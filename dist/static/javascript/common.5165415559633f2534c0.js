webpackJsonp([0],{

/***/ "+E39":
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__("S82l")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "+MLA":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__("EqjI");
var meta = __webpack_require__("06OY").onFreeze;

__webpack_require__("uqUo")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),

/***/ "+ZMJ":
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__("lOnJ");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "+tPU":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("xGkn");
var global = __webpack_require__("7KvD");
var hide = __webpack_require__("hJx8");
var Iterators = __webpack_require__("/bQp");
var TO_STRING_TAG = __webpack_require__("dSzd")('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),

/***/ "//Fk":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("U5ju"), __esModule: true };

/***/ }),

/***/ "/5sW":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value e.g. [object Object]
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it... e.g.
 * PhantomJS 1.x. Technically we don't need this anymore since native bind is
 * now more performant in most browsers, but removing it would be breaking for
 * code that was able to run in PhantomJS 1.x, so this must be kept for
 * backwards compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */


/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
})

/*  */

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */


var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  if (!getter && arguments.length === 2) {
    val = obj[key];
  }
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'can only contain alphanumeric characters and the hyphen, ' +
      'and must start with a letter.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    process.env.NODE_ENV !== 'production' &&
    // skip validation for weex recycle-list child component props
    !(false && isObject(value) && ('@binding' in value))
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      "Invalid prop: type check failed for prop \"" + name + "\"." +
      " Expected " + (expectedTypes.map(capitalize).join(', ')) +
      ", got " + (toRawType(value)) + ".",
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

/*  */

function handleError (err, vm, info) {
  if (vm) {
    var cur = vm;
    while ((cur = cur.$parent)) {
      var hooks = cur.$options.errorCaptured;
      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;
            if (capture) { return }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }
  globalHandleError(err, vm, info);
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (process.env.NODE_ENV !== 'production') {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */
/* globals MessageChannel */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).
var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false;

// Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.
/* istanbul ignore if */
if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (
  isNative(MessageChannel) ||
  // PhantomJS
  MessageChannel.toString() === '[object MessageChannelConstructor]'
)) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;
  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

// Determine microtask defer implementation.
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  microTimerFunc = function () {
    p.then(flushCallbacks);
    // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a (macro) task instead of a microtask.
 */
function withMacroTask (fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;
    var res = fn.apply(null, arguments);
    useMacroTask = false;
    return res
  })
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, def, cur, old, event;
  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    /* istanbul ignore if */
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                process.env.NODE_ENV !== 'production'
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once) {
  if (once) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;
      while (i$1--) {
        cb = cbs[i$1];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break
        }
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, ("event handler for \"" + event + "\""));
        }
      }
    }
    return vm
  };
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$1 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$1; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production'
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      process.env.NODE_ENV !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn(
          "Method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject).filter(function (key) {
        /* istanbul ignore next */
        return Object.getOwnPropertyDescriptor(inject, key).enumerable
      })
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (process.env.NODE_ENV !== 'production') {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes) {
      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {
        warn(
          "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
          "- this will likely cause render errors.",
          this
        );
      }
      slotNodes._rendered = true;
    }
    nodes = slotNodes || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () { return resolveSlots(children, parent); };

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */




// Register the component hook to weex native render engine.
// The hook will be triggered by native, not javascript.


// Updates the state of the component to weex native render engine.

/*  */

// https://github.com/Hanks10100/weex-native-directive/tree/master/component

// listening on native callback

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  // Weex specific: invoke recycle-list optimized @render function for
  // extracting cell-slot template.
  // https://github.com/Hanks10100/weex-native-directive/tree/master/component
  /* istanbul ignore if */
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    hooks[key] = componentVNodeHooks[key];
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    process.env.NODE_ENV !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    // reset _rendered flag on slots for duplicate slot check
    if (process.env.NODE_ENV !== 'production') {
      for (var key in vm.$slots) {
        // $flow-disable-line
        vm.$slots[key]._rendered = false;
      }
    }

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue (options) {
  if (process.env.NODE_ENV !== 'production' &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production' && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache, key, this$1.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
}

var builtInComponents = {
  KeepAlive: KeepAlive
}

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.5.16';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);



var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
}

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove () {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove.listeners = listeners;
    return remove
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (process.env.NODE_ENV !== 'production') {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (process.env.NODE_ENV !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (process.env.NODE_ENV !== 'production') {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
}

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
]

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
}

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
}

/*  */

/*  */









// add a raw attr (use this in preTransforms)








// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.

/*  */

/**
 * Cross-platform code generation for component v-model
 */


/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler (handler, event, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  handler = withMacroTask(handler);
  if (once$$1) { handler = createOnceHandler(handler, event, capture); }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    event,
    handler._withTask || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
}

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false
    }
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
}

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
}

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def) {
  if (!def) {
    return
  }
  /* istanbul ignore else */
  if (typeof def === 'object') {
    var res = {};
    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }
    extend(res, def);
    return res
  } else if (typeof def === 'string') {
    return autoCssTransition(def)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {}

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
]

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
}

var platformDirectives = {
  model: directive,
  show: show
}

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
}

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
}

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
}

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (
        process.env.NODE_ENV !== 'production' &&
        process.env.NODE_ENV !== 'test' &&
        isChrome
      ) {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (process.env.NODE_ENV !== 'production' &&
      process.env.NODE_ENV !== 'test' &&
      config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

/* harmony default export */ __webpack_exports__["a"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("W2nU"), __webpack_require__("DuR2"), __webpack_require__("162o").setImmediate))

/***/ }),

/***/ "/bQp":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "/n6Q":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("zQR9");
__webpack_require__("+tPU");
module.exports = __webpack_require__("Kh4W").f('iterator');


/***/ }),

/***/ "/ocq":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
  * vue-router v3.0.1
  * (c) 2017 Evan You
  * @license MIT
  */
/*  */

function assert (condition, message) {
  if (!condition) {
    throw new Error(("[vue-router] " + message))
  }
}

function warn (condition, message) {
  if (process.env.NODE_ENV !== 'production' && !condition) {
    typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
  }
}

function isError (err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1
}

var View = {
  name: 'router-view',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render (_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }
      if (parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      return h(cache[name], data, children)
    }

    var matched = route.matched[depth];
    // render empty node if no matched route
    if (!matched) {
      cache[name] = null;
      return h()
    }

    var component = cache[name] = matched.components[name];

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (
        (val && current !== vm) ||
        (!val && current === vm)
      ) {
        matched.instances[name] = val;
      }
    }

    // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // resolve props
    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);
    if (propsToPass) {
      // clone to prevent mutation
      propsToPass = data.props = extend({}, propsToPass);
      // pass non-declared props as attrs
      var attrs = data.attrs = data.attrs || {};
      for (var key in propsToPass) {
        if (!component.props || !(key in component.props)) {
          attrs[key] = propsToPass[key];
          delete propsToPass[key];
        }
      }
    }

    return h(component, data, children)
  }
};

function resolveProps (route, config) {
  switch (typeof config) {
    case 'undefined':
      return
    case 'object':
      return config
    case 'function':
      return config(route)
    case 'boolean':
      return config ? route.params : undefined
    default:
      if (process.env.NODE_ENV !== 'production') {
        warn(
          false,
          "props in \"" + (route.path) + "\" is a " + (typeof config) + ", " +
          "expecting an object, function or boolean."
        );
      }
  }
}

function extend (to, from) {
  for (var key in from) {
    to[key] = from[key];
  }
  return to
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function (str) { return encodeURIComponent(str)
  .replace(encodeReserveRE, encodeReserveReplacer)
  .replace(commaRE, ','); };

var decode = decodeURIComponent;

function resolveQuery (
  query,
  extraQuery,
  _parseQuery
) {
  if ( extraQuery === void 0 ) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
    process.env.NODE_ENV !== 'production' && warn(false, e.message);
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }
  return parsedQuery
}

function parseQuery (query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0
      ? decode(parts.join('='))
      : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res
}

function stringifyQuery (obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return ''
    }

    if (val === null) {
      return encode(key)
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&')
    }

    return encode(key) + '=' + encode(val)
  }).filter(function (x) { return x.length > 0; }).join('&') : null;
  return res ? ("?" + res) : ''
}

/*  */


var trailingSlashRE = /\/?$/;

function createRoute (
  record,
  location,
  redirectedFrom,
  router
) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;

  var query = location.query || {};
  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || (record && record.name),
    meta: (record && record.meta) || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route)
}

function clone (value) {
  if (Array.isArray(value)) {
    return value.map(clone)
  } else if (value && typeof value === 'object') {
    var res = {};
    for (var key in value) {
      res[key] = clone(value[key]);
    }
    return res
  } else {
    return value
  }
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch (record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res
}

function getFullPath (
  ref,
  _stringifyQuery
) {
  var path = ref.path;
  var query = ref.query; if ( query === void 0 ) query = {};
  var hash = ref.hash; if ( hash === void 0 ) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash
}

function isSameRoute (a, b) {
  if (b === START) {
    return a === b
  } else if (!b) {
    return false
  } else if (a.path && b.path) {
    return (
      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query)
    )
  } else if (a.name && b.name) {
    return (
      a.name === b.name &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query) &&
      isObjectEqual(a.params, b.params)
    )
  } else {
    return false
  }
}

function isObjectEqual (a, b) {
  if ( a === void 0 ) a = {};
  if ( b === void 0 ) b = {};

  // handle null value #1566
  if (!a || !b) { return a === b }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false
  }
  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key];
    // check nested equality
    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal)
    }
    return String(aVal) === String(bVal)
  })
}

function isIncludedRoute (current, target) {
  return (
    current.path.replace(trailingSlashRE, '/').indexOf(
      target.path.replace(trailingSlashRE, '/')
    ) === 0 &&
    (!target.hash || current.hash === target.hash) &&
    queryIncludes(current.query, target.query)
  )
}

function queryIncludes (current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false
    }
  }
  return true
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var Link = {
  name: 'router-link',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render (h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback = globalActiveClass == null
            ? 'router-link-active'
            : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null
            ? 'router-link-exact-active'
            : globalExactActiveClass;
    var activeClass = this.activeClass == null
            ? activeClassFallback
            : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null
            ? exactActiveClassFallback
            : this.exactActiveClass;
    var compareTarget = location.path
      ? createRoute(null, location, null, router)
      : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact
      ? classes[exactActiveClass]
      : isIncludedRoute(current, compareTarget);

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) { on[e] = handler; });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var extend = _Vue.util.extend;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default)
  }
};

function guardEvent (e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) { return }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) { return }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) { return }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true
}

function findAnchor (children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child
      }
    }
  }
}

var _Vue;

function install (Vue) {
  if (install.installed && _Vue === Vue) { return }
  install.installed = true;

  _Vue = Vue;

  var isDef = function (v) { return v !== undefined; };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate () {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed () {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get () { return this._routerRoot._router }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get () { return this._routerRoot._route }
  });

  Vue.component('router-view', View);
  Vue.component('router-link', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function resolvePath (
  relative,
  base,
  append
) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/')
}

function parsePath (path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  }
}

function cleanPath (path) {
  return path.replace(/\/\//g, '/')
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys;
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

/*  */

// $flow-disable-line
var regexpCompileCache = Object.create(null);

function fillParams (
  path,
  params,
  routeMsg
) {
  try {
    var filler =
      regexpCompileCache[path] ||
      (regexpCompileCache[path] = pathToRegexp_1.compile(path));
    return filler(params || {}, { pretty: true })
  } catch (e) {
    if (process.env.NODE_ENV !== 'production') {
      warn(false, ("missing param for " + routeMsg + ": " + (e.message)));
    }
    return ''
  }
}

/*  */

function createRouteMap (
  routes,
  oldPathList,
  oldPathMap,
  oldNameMap
) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  // $flow-disable-line
  var pathMap = oldPathMap || Object.create(null);
  // $flow-disable-line
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  }
}

function addRouteRecord (
  pathList,
  pathMap,
  nameMap,
  route,
  parent,
  matchAs
) {
  var path = route.path;
  var name = route.name;
  if (process.env.NODE_ENV !== 'production') {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(
      typeof route.component !== 'string',
      "route config \"component\" for path: " + (String(path || name)) + " cannot be a " +
      "string id. Use an actual component instead."
    );
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(
    path,
    parent,
    pathToRegexpOptions.strict
  );

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null
      ? {}
      : route.components
        ? route.props
        : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (process.env.NODE_ENV !== 'production') {
      if (route.name && !route.redirect && route.children.some(function (child) { return /^\/?$/.test(child.path); })) {
        warn(
          false,
          "Named Route '" + (route.name) + "' has a default child route. " +
          "When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), " +
          "the default child route will not be rendered. Remove the name from " +
          "this route and use the name of the default child route for named " +
          "links instead."
        );
      }
    }
    route.children.forEach(function (child) {
      var childMatchAs = matchAs
        ? cleanPath((matchAs + "/" + (child.path)))
        : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias)
      ? route.alias
      : [route.alias];

    aliases.forEach(function (alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(
        pathList,
        pathMap,
        nameMap,
        aliasRoute,
        parent,
        record.path || '/' // matchAs
      );
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {
      warn(
        false,
        "Duplicate named routes definition: " +
        "{ name: \"" + name + "\", path: \"" + (record.path) + "\" }"
      );
    }
  }
}

function compileRouteRegex (path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
  if (process.env.NODE_ENV !== 'production') {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], ("Duplicate param keys in route with path: \"" + path + "\""));
      keys[key.name] = true;
    });
  }
  return regex
}

function normalizePath (path, parent, strict) {
  if (!strict) { path = path.replace(/\/$/, ''); }
  if (path[0] === '/') { return path }
  if (parent == null) { return path }
  return cleanPath(((parent.path) + "/" + path))
}

/*  */


function normalizeLocation (
  raw,
  current,
  append,
  router
) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next.name || next._normalized) {
    return next
  }

  // relative params
  if (!next.path && next.params && current) {
    next = assign({}, next);
    next._normalized = true;
    var params = assign(assign({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, ("path " + (current.path)));
    } else if (process.env.NODE_ENV !== 'production') {
      warn(false, "relative params navigation requires a current route.");
    }
    return next
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = (current && current.path) || '/';
  var path = parsedPath.path
    ? resolvePath(parsedPath.path, basePath, append || next.append)
    : basePath;

  var query = resolveQuery(
    parsedPath.query,
    next.query,
    router && router.options.parseQuery
  );

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  }
}

function assign (a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a
}

/*  */


function createMatcher (
  routes,
  router
) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes (routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match (
    raw,
    currentRoute,
    redirectedFrom
  ) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (process.env.NODE_ENV !== 'production') {
        warn(record, ("Route with name '" + name + "' does not exist"));
      }
      if (!record) { return _createRoute(null, location) }
      var paramNames = record.regex.keys
        .filter(function (key) { return !key.optional; })
        .map(function (key) { return key.name; });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
        return _createRoute(record, location, redirectedFrom)
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom)
        }
      }
    }
    // no match
    return _createRoute(null, location)
  }

  function redirect (
    record,
    location
  ) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function'
        ? originalRedirect(createRoute(record, location, null, router))
        : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (process.env.NODE_ENV !== 'production') {
        warn(
          false, ("invalid redirect option: " + (JSON.stringify(redirect)))
        );
      }
      return _createRoute(null, location)
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (process.env.NODE_ENV !== 'production') {
        assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."));
      }
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location)
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location)
    } else {
      if (process.env.NODE_ENV !== 'production') {
        warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))));
      }
      return _createRoute(null, location)
    }
  }

  function alias (
    record,
    location,
    matchAs
  ) {
    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location)
    }
    return _createRoute(null, location)
  }

  function _createRoute (
    record,
    location,
    redirectedFrom
  ) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location)
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs)
    }
    return createRoute(record, location, redirectedFrom, router)
  }

  return {
    match: match,
    addRoutes: addRoutes
  }
}

function matchRoute (
  regex,
  path,
  params
) {
  var m = path.match(regex);

  if (!m) {
    return false
  } else if (!params) {
    return true
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      params[key.name] = val;
    }
  }

  return true
}

function resolveRecordPath (path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true)
}

/*  */


var positionStore = Object.create(null);

function setupScroll () {
  // Fix for #1585 for Firefox
  window.history.replaceState({ key: getStateKey() }, '');
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll (
  router,
  to,
  from,
  isPop
) {
  if (!router.app) {
    return
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return
  }

  if (process.env.NODE_ENV !== 'production') {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  }

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior(to, from, isPop ? position : null);

    if (!shouldScroll) {
      return
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition((shouldScroll), position);
      }).catch(function (err) {
        if (process.env.NODE_ENV !== 'production') {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition () {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition () {
  var key = getStateKey();
  if (key) {
    return positionStore[key]
  }
}

function getElementPosition (el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  }
}

function isValidPosition (obj) {
  return isNumber(obj.x) || isNumber(obj.y)
}

function normalizePosition (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  }
}

function normalizeOffset (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  }
}

function isNumber (v) {
  return typeof v === 'number'
}

function scrollToPosition (shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';
  if (isObject && typeof shouldScroll.selector === 'string') {
    var el = document.querySelector(shouldScroll.selector);
    if (el) {
      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    window.scrollTo(position.x, position.y);
  }
}

/*  */

var supportsPushState = inBrowser && (function () {
  var ua = window.navigator.userAgent;

  if (
    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
    ua.indexOf('Mobile Safari') !== -1 &&
    ua.indexOf('Chrome') === -1 &&
    ua.indexOf('Windows Phone') === -1
  ) {
    return false
  }

  return window.history && 'pushState' in window.history
})();

// use User Timing api (if present) for more accurate key precision
var Time = inBrowser && window.performance && window.performance.now
  ? window.performance
  : Date;

var _key = genKey();

function genKey () {
  return Time.now().toFixed(3)
}

function getStateKey () {
  return _key
}

function setStateKey (key) {
  _key = key;
}

function pushState (url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      history.replaceState({ key: _key }, '', url);
    } else {
      _key = genKey();
      history.pushState({ key: _key }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState (url) {
  pushState(url, true);
}

/*  */

function runQueue (queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

function resolveAsyncComponents (matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function'
            ? resolvedDef
            : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
          process.env.NODE_ENV !== 'production' && warn(false, msg);
          if (!error) {
            error = isError(reason)
              ? reason
              : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) { next(); }
  }
}

function flatMapComponents (
  matched,
  fn
) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) { return fn(
      m.components[key],
      m.instances[key],
      m, key
    ); })
  }))
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

var hasSymbol =
  typeof Symbol === 'function' &&
  typeof Symbol.toStringTag === 'symbol';

function isESModule (obj) {
  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once (fn) {
  var called = false;
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (called) { return }
    called = true;
    return fn.apply(this, args)
  }
}

/*  */

var History = function History (router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen (cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady (cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError (errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {
    var this$1 = this;

  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();

    // fire ready cbs once
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) { cb(route); });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
    var this$1 = this;

  var current = this.current;
  var abort = function (err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) { cb(err); });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (
    isSameRoute(route, current) &&
    // in the case the route map has been dynamically appended to
    route.matched.length === current.matched.length
  ) {
    this.ensureURL();
    return abort()
  }

  var ref = resolveQueue(this.current.matched, route.matched);
    var updated = ref.updated;
    var deactivated = ref.deactivated;
    var activated = ref.activated;

  var queue = [].concat(
    // in-component leave guards
    extractLeaveGuards(deactivated),
    // global before hooks
    this.router.beforeHooks,
    // in-component update hooks
    extractUpdateHooks(updated),
    // in-config enter guards
    activated.map(function (m) { return m.beforeEnter; }),
    // async components
    resolveAsyncComponents(activated)
  );

  this.pending = route;
  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort()
    }
    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (
          typeof to === 'string' ||
          (typeof to === 'object' && (
            typeof to.path === 'string' ||
            typeof to.name === 'string'
          ))
        ) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();
          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];
    var isValid = function () { return this$1.current === route; };
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort()
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) { cb(); });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute (route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase (base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = (baseEl && baseEl.getAttribute('href')) || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '')
}

function resolveQueue (
  current,
  next
) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  }
}

function extractGuards (
  records,
  name,
  bind,
  reverse
) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard)
        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
        : bind(guard, instance, match, key)
    }
  });
  return flatten(reverse ? guards.reverse() : guards)
}

function extractGuard (
  def,
  key
) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key]
}

function extractLeaveGuards (deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
}

function extractUpdateHooks (updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
}

function bindGuard (guard, instance) {
  if (instance) {
    return function boundRouteGuard () {
      return guard.apply(instance, arguments)
    }
  }
}

function extractEnterGuards (
  activated,
  cbs,
  isValid
) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid)
  })
}

function bindEnterGuard (
  guard,
  match,
  key,
  cbs,
  isValid
) {
  return function routeEnterGuard (to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    })
  }
}

function poll (
  cb, // somehow flow cannot infer this is a function
  instances,
  key,
  isValid
) {
  if (instances[key]) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}

/*  */


var HTML5History = (function (History$$1) {
  function HTML5History (router, base) {
    var this$1 = this;

    History$$1.call(this, router, base);

    var expectScroll = router.options.scrollBehavior;

    if (expectScroll) {
      setupScroll();
    }

    var initLocation = getLocation(this.base);
    window.addEventListener('popstate', function (e) {
      var current = this$1.current;

      // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.
      var location = getLocation(this$1.base);
      if (this$1.current === START && location === initLocation) {
        return
      }

      this$1.transitionTo(location, function (route) {
        if (expectScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if ( History$$1 ) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go (n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL (push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
    return getLocation(this.base)
  };

  return HTML5History;
}(History));

function getLocation (base) {
  var path = window.location.pathname;
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash
}

/*  */


var HashHistory = (function (History$$1) {
  function HashHistory (router, base, fallback) {
    History$$1.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return
    }
    ensureSlash();
  }

  if ( History$$1 ) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners () {
    var this$1 = this;

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
      var current = this$1.current;
      if (!ensureSlash()) {
        return
      }
      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }
        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };

  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go (n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL (push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    return getHash()
  };

  return HashHistory;
}(History));

function checkFallback (base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(
      cleanPath(base + '/#' + location)
    );
    return true
  }
}

function ensureSlash () {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true
  }
  replaceHash('/' + path);
  return false
}

function getHash () {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  return index === -1 ? '' : href.slice(index + 1)
}

function getUrl (path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return (base + "#" + path)
}

function pushHash (path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash (path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}

/*  */


var AbstractHistory = (function (History$$1) {
  function AbstractHistory (router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go (n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/'
  };

  AbstractHistory.prototype.ensureURL = function ensureURL () {
    // noop
  };

  return AbstractHistory;
}(History));

/*  */

var VueRouter = function VueRouter (options) {
  if ( options === void 0 ) options = {};

  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break
    default:
      if (process.env.NODE_ENV !== 'production') {
        assert(false, ("invalid mode: " + mode));
      }
  }
};

var prototypeAccessors = { currentRoute: { configurable: true } };

VueRouter.prototype.match = function match (
  raw,
  current,
  redirectedFrom
) {
  return this.matcher.match(raw, current, redirectedFrom)
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current
};

VueRouter.prototype.init = function init (app /* Vue component instance */) {
    var this$1 = this;

  process.env.NODE_ENV !== 'production' && assert(
    install.installed,
    "not installed. Make sure to call `Vue.use(VueRouter)` " +
    "before creating root instance."
  );

  this.apps.push(app);

  // main app already initialized.
  if (this.app) {
    return
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function () {
      history.setupListeners();
    };
    history.transitionTo(
      history.getCurrentLocation(),
      setupHashListener,
      setupHashListener
    );
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach (fn) {
  return registerHook(this.beforeHooks, fn)
};

VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
  return registerHook(this.resolveHooks, fn)
};

VueRouter.prototype.afterEach = function afterEach (fn) {
  return registerHook(this.afterHooks, fn)
};

VueRouter.prototype.onReady = function onReady (cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError (errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push (location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go (n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back () {
  this.go(-1);
};

VueRouter.prototype.forward = function forward () {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
  var route = to
    ? to.matched
      ? to
      : this.resolve(to).route
    : this.currentRoute;
  if (!route) {
    return []
  }
  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key]
    })
  }))
};

VueRouter.prototype.resolve = function resolve (
  to,
  current,
  append
) {
  var location = normalizeLocation(
    to,
    current || this.history.current,
    append,
    this
  );
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  }
};

VueRouter.prototype.addRoutes = function addRoutes (routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties( VueRouter.prototype, prototypeAccessors );

function registerHook (list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) { list.splice(i, 1); }
  }
}

function createHref (base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path
}

VueRouter.install = install;
VueRouter.version = '3.0.1';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["a"] = (VueRouter);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("W2nU")))

/***/ }),

/***/ "06OY":
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__("3Eo+")('meta');
var isObject = __webpack_require__("EqjI");
var has = __webpack_require__("D2L2");
var setDesc = __webpack_require__("evD5").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__("S82l")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "162o":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__("mypn");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("DuR2")))

/***/ }),

/***/ "1kS7":
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "2FcE":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, System) {(function (global, factory) {
	 true ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Live2dFind = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _global$1 = /*#__PURE__*/Object.freeze({
		default: _global,
		__moduleExports: _global
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.5.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _core$1 = /*#__PURE__*/Object.freeze({
		default: _core,
		__moduleExports: _core,
		version: _core_1
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	var _aFunction$1 = /*#__PURE__*/Object.freeze({
		default: _aFunction,
		__moduleExports: _aFunction
	});

	var aFunction = ( _aFunction$1 && _aFunction ) || _aFunction$1;

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var _ctx$1 = /*#__PURE__*/Object.freeze({
		default: _ctx,
		__moduleExports: _ctx
	});

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _isObject$1 = /*#__PURE__*/Object.freeze({
		default: _isObject,
		__moduleExports: _isObject
	});

	var isObject = ( _isObject$1 && _isObject ) || _isObject$1;

	var _anObject = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _anObject$1 = /*#__PURE__*/Object.freeze({
		default: _anObject,
		__moduleExports: _anObject
	});

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	var _fails$1 = /*#__PURE__*/Object.freeze({
		default: _fails,
		__moduleExports: _fails
	});

	var require$$1 = ( _fails$1 && _fails ) || _fails$1;

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !require$$1(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var _descriptors$1 = /*#__PURE__*/Object.freeze({
		default: _descriptors,
		__moduleExports: _descriptors
	});

	var require$$0 = ( _global$1 && _global ) || _global$1;

	var document$1 = require$$0.document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document$1) && isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is ? document$1.createElement(it) : {};
	};

	var _domCreate$1 = /*#__PURE__*/Object.freeze({
		default: _domCreate,
		__moduleExports: _domCreate
	});

	var require$$0$1 = ( _descriptors$1 && _descriptors ) || _descriptors$1;

	var require$$1$1 = ( _domCreate$1 && _domCreate ) || _domCreate$1;

	var _ie8DomDefine = !require$$0$1 && !require$$1(function () {
	  return Object.defineProperty(require$$1$1('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	var _ie8DomDefine$1 = /*#__PURE__*/Object.freeze({
		default: _ie8DomDefine,
		__moduleExports: _ie8DomDefine
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var _toPrimitive$1 = /*#__PURE__*/Object.freeze({
		default: _toPrimitive,
		__moduleExports: _toPrimitive
	});

	var anObject = ( _anObject$1 && _anObject ) || _anObject$1;

	var IE8_DOM_DEFINE = ( _ie8DomDefine$1 && _ie8DomDefine ) || _ie8DomDefine$1;

	var toPrimitive = ( _toPrimitive$1 && _toPrimitive ) || _toPrimitive$1;

	var dP = Object.defineProperty;

	var f = require$$0$1 ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _objectDp$1 = /*#__PURE__*/Object.freeze({
		default: _objectDp,
		__moduleExports: _objectDp,
		f: f
	});

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _propertyDesc$1 = /*#__PURE__*/Object.freeze({
		default: _propertyDesc,
		__moduleExports: _propertyDesc
	});

	var dP$1 = ( _objectDp$1 && _objectDp ) || _objectDp$1;

	var descriptor = ( _propertyDesc$1 && _propertyDesc ) || _propertyDesc$1;

	var _hide = require$$0$1 ? function (object, key, value) {
	  return dP$1.f(object, key, descriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var _hide$1 = /*#__PURE__*/Object.freeze({
		default: _hide,
		__moduleExports: _hide
	});

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var _has$1 = /*#__PURE__*/Object.freeze({
		default: _has,
		__moduleExports: _has
	});

	var core = ( _core$1 && _core ) || _core$1;

	var ctx = ( _ctx$1 && _ctx ) || _ctx$1;

	var require$$0$2 = ( _hide$1 && _hide ) || _hide$1;

	var has = ( _has$1 && _has ) || _has$1;

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? require$$0 : IS_STATIC ? require$$0[name] : (require$$0[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, require$$0)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) require$$0$2(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var _export$1 = /*#__PURE__*/Object.freeze({
		default: _export,
		__moduleExports: _export
	});

	var toString = {}.toString;

	var _cof = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var _cof$1 = /*#__PURE__*/Object.freeze({
		default: _cof,
		__moduleExports: _cof
	});

	var cof = ( _cof$1 && _cof ) || _cof$1;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

	var _iobject$1 = /*#__PURE__*/Object.freeze({
		default: _iobject,
		__moduleExports: _iobject
	});

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	var _defined$1 = /*#__PURE__*/Object.freeze({
		default: _defined,
		__moduleExports: _defined
	});

	var IObject = ( _iobject$1 && _iobject ) || _iobject$1;

	var defined = ( _defined$1 && _defined ) || _defined$1;

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return IObject(defined(it));
	};

	var _toIobject$1 = /*#__PURE__*/Object.freeze({
		default: _toIobject,
		__moduleExports: _toIobject
	});

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	var _toInteger$1 = /*#__PURE__*/Object.freeze({
		default: _toInteger,
		__moduleExports: _toInteger
	});

	var toInteger = ( _toInteger$1 && _toInteger ) || _toInteger$1;

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var _toLength$1 = /*#__PURE__*/Object.freeze({
		default: _toLength,
		__moduleExports: _toLength
	});

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	var _toAbsoluteIndex$1 = /*#__PURE__*/Object.freeze({
		default: _toAbsoluteIndex,
		__moduleExports: _toAbsoluteIndex
	});

	var toIObject = ( _toIobject$1 && _toIobject ) || _toIobject$1;

	var toLength = ( _toLength$1 && _toLength ) || _toLength$1;

	var toAbsoluteIndex = ( _toAbsoluteIndex$1 && _toAbsoluteIndex ) || _toAbsoluteIndex$1;

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var _arrayIncludes$1 = /*#__PURE__*/Object.freeze({
		default: _arrayIncludes,
		__moduleExports: _arrayIncludes
	});

	var SHARED = '__core-js_shared__';
	var store = require$$0[SHARED] || (require$$0[SHARED] = {});
	var _shared = function (key) {
	  return store[key] || (store[key] = {});
	};

	var _shared$1 = /*#__PURE__*/Object.freeze({
		default: _shared,
		__moduleExports: _shared
	});

	var id$1 = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
	};

	var _uid$1 = /*#__PURE__*/Object.freeze({
		default: _uid,
		__moduleExports: _uid
	});

	var require$$0$3 = ( _shared$1 && _shared ) || _shared$1;

	var uid = ( _uid$1 && _uid ) || _uid$1;

	var shared = require$$0$3('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};

	var _sharedKey$1 = /*#__PURE__*/Object.freeze({
		default: _sharedKey,
		__moduleExports: _sharedKey
	});

	var require$$0$4 = ( _arrayIncludes$1 && _arrayIncludes ) || _arrayIncludes$1;

	var require$$0$5 = ( _sharedKey$1 && _sharedKey ) || _sharedKey$1;

	var arrayIndexOf = require$$0$4(false);
	var IE_PROTO = require$$0$5('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	var _objectKeysInternal$1 = /*#__PURE__*/Object.freeze({
		default: _objectKeysInternal,
		__moduleExports: _objectKeysInternal
	});

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	var _enumBugKeys$1 = /*#__PURE__*/Object.freeze({
		default: _enumBugKeys,
		__moduleExports: _enumBugKeys
	});

	var $keys = ( _objectKeysInternal$1 && _objectKeysInternal ) || _objectKeysInternal$1;

	var enumBugKeys = ( _enumBugKeys$1 && _enumBugKeys ) || _enumBugKeys$1;

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};

	var _objectKeys$1 = /*#__PURE__*/Object.freeze({
		default: _objectKeys,
		__moduleExports: _objectKeys
	});

	var f$1 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$1
	};

	var _objectGops$1 = /*#__PURE__*/Object.freeze({
		default: _objectGops,
		__moduleExports: _objectGops,
		f: f$1
	});

	var f$2 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$2
	};

	var _objectPie$1 = /*#__PURE__*/Object.freeze({
		default: _objectPie,
		__moduleExports: _objectPie,
		f: f$2
	});

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(defined(it));
	};

	var _toObject$1 = /*#__PURE__*/Object.freeze({
		default: _toObject,
		__moduleExports: _toObject
	});

	var getKeys = ( _objectKeys$1 && _objectKeys ) || _objectKeys$1;

	var gOPS = ( _objectGops$1 && _objectGops ) || _objectGops$1;

	var require$$0$6 = ( _objectPie$1 && _objectPie ) || _objectPie$1;

	var toObject = ( _toObject$1 && _toObject ) || _toObject$1;

	// 19.1.2.1 Object.assign(target, source, ...)





	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || require$$1(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = require$$0$6.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;

	var _objectAssign$1 = /*#__PURE__*/Object.freeze({
		default: _objectAssign,
		__moduleExports: _objectAssign
	});

	var $export$1 = ( _export$1 && _export ) || _export$1;

	var require$$0$7 = ( _objectAssign$1 && _objectAssign ) || _objectAssign$1;

	// 19.1.3.1 Object.assign(target, source)


	$export$1($export$1.S + $export$1.F, 'Object', { assign: require$$0$7 });

	var assign = core.Object.assign;

	var assign$1 = /*#__PURE__*/Object.freeze({
		default: assign,
		__moduleExports: assign
	});

	var require$$0$8 = ( assign$1 && assign ) || assign$1;

	var assign$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$8, __esModule: true };
	});

	var _Object$assign = unwrapExports(assign$2);

	var assign$3 = /*#__PURE__*/Object.freeze({
		default: _Object$assign,
		__moduleExports: assign$2
	});

	var _assign = ( assign$3 && _Object$assign ) || assign$3;

	var _extends = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _assign2 = _interopRequireDefault(_assign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};
	});

	var _extends$1 = unwrapExports(_extends);

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _stringAt$1 = /*#__PURE__*/Object.freeze({
		default: _stringAt,
		__moduleExports: _stringAt
	});

	var _library = true;

	var _library$1 = /*#__PURE__*/Object.freeze({
		default: _library,
		__moduleExports: _library
	});

	var _redefine = require$$0$2;

	var _redefine$1 = /*#__PURE__*/Object.freeze({
		default: _redefine,
		__moduleExports: _redefine
	});

	var _iterators = {};

	var _iterators$1 = /*#__PURE__*/Object.freeze({
		default: _iterators,
		__moduleExports: _iterators
	});

	var _objectDps = require$$0$1 ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP$1.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var _objectDps$1 = /*#__PURE__*/Object.freeze({
		default: _objectDps,
		__moduleExports: _objectDps
	});

	var document$2 = require$$0.document;
	var _html = document$2 && document$2.documentElement;

	var _html$1 = /*#__PURE__*/Object.freeze({
		default: _html,
		__moduleExports: _html
	});

	var dPs = ( _objectDps$1 && _objectDps ) || _objectDps$1;

	var require$$2 = ( _html$1 && _html ) || _html$1;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$1 = require$$0$5('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = require$$1$1('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  require$$2.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

	var _objectCreate$1 = /*#__PURE__*/Object.freeze({
		default: _objectCreate,
		__moduleExports: _objectCreate
	});

	var _wks = createCommonjsModule(function (module) {
	var store = require$$0$3('wks');

	var Symbol = require$$0.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var _wks$1 = /*#__PURE__*/Object.freeze({
		default: _wks,
		__moduleExports: _wks
	});

	var require$$1$2 = ( _wks$1 && _wks ) || _wks$1;

	var def = dP$1.f;

	var TAG = require$$1$2('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var _setToStringTag$1 = /*#__PURE__*/Object.freeze({
		default: _setToStringTag,
		__moduleExports: _setToStringTag
	});

	var create = ( _objectCreate$1 && _objectCreate ) || _objectCreate$1;

	var setToStringTag = ( _setToStringTag$1 && _setToStringTag ) || _setToStringTag$1;

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	require$$0$2(IteratorPrototype, require$$1$2('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

	var _iterCreate$1 = /*#__PURE__*/Object.freeze({
		default: _iterCreate,
		__moduleExports: _iterCreate
	});

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$2 = require$$0$5('IE_PROTO');
	var ObjectProto = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

	var _objectGpo$1 = /*#__PURE__*/Object.freeze({
		default: _objectGpo,
		__moduleExports: _objectGpo
	});

	var LIBRARY = ( _library$1 && _library ) || _library$1;

	var redefine = ( _redefine$1 && _redefine ) || _redefine$1;

	var Iterators = ( _iterators$1 && _iterators ) || _iterators$1;

	var $iterCreate = ( _iterCreate$1 && _iterCreate ) || _iterCreate$1;

	var getPrototypeOf = ( _objectGpo$1 && _objectGpo ) || _objectGpo$1;

	var ITERATOR = require$$1$2('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') require$$0$2(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    require$$0$2(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export$1($export$1.P + $export$1.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var _iterDefine$1 = /*#__PURE__*/Object.freeze({
		default: _iterDefine,
		__moduleExports: _iterDefine
	});

	var require$$0$9 = ( _stringAt$1 && _stringAt ) || _stringAt$1;

	var require$$0$10 = ( _iterDefine$1 && _iterDefine ) || _iterDefine$1;

	var $at = require$$0$9(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	require$$0$10(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	// call something on iterator step with safe closing on error

	var _iterCall = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};

	var _iterCall$1 = /*#__PURE__*/Object.freeze({
		default: _iterCall,
		__moduleExports: _iterCall
	});

	// check on default Array iterator

	var ITERATOR$1 = require$$1$2('iterator');
	var ArrayProto = Array.prototype;

	var _isArrayIter = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR$1] === it);
	};

	var _isArrayIter$1 = /*#__PURE__*/Object.freeze({
		default: _isArrayIter,
		__moduleExports: _isArrayIter
	});

	var _createProperty = function (object, index, value) {
	  if (index in object) dP$1.f(object, index, descriptor(0, value));
	  else object[index] = value;
	};

	var _createProperty$1 = /*#__PURE__*/Object.freeze({
		default: _createProperty,
		__moduleExports: _createProperty
	});

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = require$$1$2('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	var _classof$1 = /*#__PURE__*/Object.freeze({
		default: _classof,
		__moduleExports: _classof
	});

	var classof = ( _classof$1 && _classof ) || _classof$1;

	var ITERATOR$2 = require$$1$2('iterator');

	var core_getIteratorMethod = core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

	var core_getIteratorMethod$1 = /*#__PURE__*/Object.freeze({
		default: core_getIteratorMethod,
		__moduleExports: core_getIteratorMethod
	});

	var ITERATOR$3 = require$$1$2('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	} catch (e) { /* empty */ }

	var _iterDetect = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR$3] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};

	var _iterDetect$1 = /*#__PURE__*/Object.freeze({
		default: _iterDetect,
		__moduleExports: _iterDetect
	});

	var call = ( _iterCall$1 && _iterCall ) || _iterCall$1;

	var isArrayIter = ( _isArrayIter$1 && _isArrayIter ) || _isArrayIter$1;

	var createProperty = ( _createProperty$1 && _createProperty ) || _createProperty$1;

	var getIterFn = ( core_getIteratorMethod$1 && core_getIteratorMethod ) || core_getIteratorMethod$1;

	var require$$0$11 = ( _iterDetect$1 && _iterDetect ) || _iterDetect$1;

	$export$1($export$1.S + $export$1.F * !require$$0$11(function (iter) { }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	var from = core.Array.from;

	var from$1 = /*#__PURE__*/Object.freeze({
		default: from,
		__moduleExports: from
	});

	var require$$0$12 = ( from$1 && from ) || from$1;

	var from$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$12, __esModule: true };
	});

	var _Array$from = unwrapExports(from$2);

	var from$3 = /*#__PURE__*/Object.freeze({
		default: _Array$from,
		__moduleExports: from$2
	});

	var _from = ( from$3 && _Array$from ) || from$3;

	var toConsumableArray = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _from2 = _interopRequireDefault(_from);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};
	});

	var _toConsumableArray = unwrapExports(toConsumableArray);

	var _addToUnscopables = function () { /* empty */ };

	var _addToUnscopables$1 = /*#__PURE__*/Object.freeze({
		default: _addToUnscopables,
		__moduleExports: _addToUnscopables
	});

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	var _iterStep$1 = /*#__PURE__*/Object.freeze({
		default: _iterStep,
		__moduleExports: _iterStep
	});

	var addToUnscopables = ( _addToUnscopables$1 && _addToUnscopables ) || _addToUnscopables$1;

	var step = ( _iterStep$1 && _iterStep ) || _iterStep$1;

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = require$$0$10(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var TO_STRING_TAG = require$$1$2('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = require$$0[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) require$$0$2(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

	var _anInstance = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

	var _anInstance$1 = /*#__PURE__*/Object.freeze({
		default: _anInstance,
		__moduleExports: _anInstance
	});

	var _forOf = createCommonjsModule(function (module) {
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	});

	var _forOf$1 = /*#__PURE__*/Object.freeze({
		default: _forOf,
		__moduleExports: _forOf
	});

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)


	var SPECIES = require$$1$2('species');
	var _speciesConstructor = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

	var _speciesConstructor$1 = /*#__PURE__*/Object.freeze({
		default: _speciesConstructor,
		__moduleExports: _speciesConstructor
	});

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	var _invoke = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};

	var _invoke$1 = /*#__PURE__*/Object.freeze({
		default: _invoke,
		__moduleExports: _invoke
	});

	var invoke = ( _invoke$1 && _invoke ) || _invoke$1;

	var process = require$$0.process;
	var setTask = require$$0.setImmediate;
	var clearTask = require$$0.clearImmediate;
	var MessageChannel = require$$0.MessageChannel;
	var Dispatch = require$$0.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (cof(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (require$$0.addEventListener && typeof postMessage == 'function' && !require$$0.importScripts) {
	    defer = function (id) {
	      require$$0.postMessage(id + '', '*');
	    };
	    require$$0.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in require$$1$1('script')) {
	    defer = function (id) {
	      require$$2.appendChild(require$$1$1('script'))[ONREADYSTATECHANGE] = function () {
	        require$$2.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	var _task = {
	  set: setTask,
	  clear: clearTask
	};
	var _task_1 = _task.set;
	var _task_2 = _task.clear;

	var _task$1 = /*#__PURE__*/Object.freeze({
		default: _task,
		__moduleExports: _task,
		set: _task_1,
		clear: _task_2
	});

	var require$$0$13 = ( _task$1 && _task ) || _task$1;

	var macrotask = require$$0$13.set;
	var Observer = require$$0.MutationObserver || require$$0.WebKitMutationObserver;
	var process$1 = require$$0.process;
	var Promise = require$$0.Promise;
	var isNode = cof(process$1) == 'process';

	var _microtask = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process$1.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(require$$0.navigator && require$$0.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    var promise = Promise.resolve();
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(require$$0, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};

	var _microtask$1 = /*#__PURE__*/Object.freeze({
		default: _microtask,
		__moduleExports: _microtask
	});

	// 25.4.1.5 NewPromiseCapability(C)


	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}

	var f$3 = function (C) {
	  return new PromiseCapability(C);
	};

	var _newPromiseCapability = {
		f: f$3
	};

	var _newPromiseCapability$1 = /*#__PURE__*/Object.freeze({
		default: _newPromiseCapability,
		__moduleExports: _newPromiseCapability,
		f: f$3
	});

	var _perform = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

	var _perform$1 = /*#__PURE__*/Object.freeze({
		default: _perform,
		__moduleExports: _perform
	});

	var newPromiseCapability = ( _newPromiseCapability$1 && _newPromiseCapability ) || _newPromiseCapability$1;

	var _promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var _promiseResolve$1 = /*#__PURE__*/Object.freeze({
		default: _promiseResolve,
		__moduleExports: _promiseResolve
	});

	var _redefineAll = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else require$$0$2(target, key, src[key]);
	  } return target;
	};

	var _redefineAll$1 = /*#__PURE__*/Object.freeze({
		default: _redefineAll,
		__moduleExports: _redefineAll
	});

	var SPECIES$1 = require$$1$2('species');

	var _setSpecies = function (KEY) {
	  var C = typeof core[KEY] == 'function' ? core[KEY] : require$$0[KEY];
	  if (require$$0$1 && C && !C[SPECIES$1]) dP$1.f(C, SPECIES$1, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};

	var _setSpecies$1 = /*#__PURE__*/Object.freeze({
		default: _setSpecies,
		__moduleExports: _setSpecies
	});

	var anInstance = ( _anInstance$1 && _anInstance ) || _anInstance$1;

	var forOf = ( _forOf$1 && _forOf ) || _forOf$1;

	var speciesConstructor = ( _speciesConstructor$1 && _speciesConstructor ) || _speciesConstructor$1;

	var require$$1$3 = ( _microtask$1 && _microtask ) || _microtask$1;

	var perform = ( _perform$1 && _perform ) || _perform$1;

	var promiseResolve = ( _promiseResolve$1 && _promiseResolve ) || _promiseResolve$1;

	var require$$3 = ( _redefineAll$1 && _redefineAll ) || _redefineAll$1;

	var require$$5 = ( _setSpecies$1 && _setSpecies ) || _setSpecies$1;

	var task = require$$0$13.set;
	var microtask = require$$1$3();



	var PROMISE = 'Promise';
	var TypeError$1 = require$$0.TypeError;
	var process$2 = require$$0.process;
	var $Promise = require$$0[PROMISE];
	var isNode$1 = classof(process$2) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability$1 = newGenericPromiseCapability = newPromiseCapability.f;

	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[require$$1$2('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(require$$0, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode$1) {
	          process$2.emit('unhandledRejection', value, promise);
	        } else if (handler = require$$0.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = require$$0.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(require$$0, function () {
	    var handler;
	    if (isNode$1) {
	      process$2.emit('rejectionHandled', promise);
	    } else if (handler = require$$0.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = require$$3($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability$1(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode$1 ? process$2.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	$export$1($export$1.G + $export$1.W + $export$1.F * !USE_NATIVE, { Promise: $Promise });
	setToStringTag($Promise, PROMISE);
	require$$5(PROMISE);
	Wrapper = core[PROMISE];

	// statics
	$export$1($export$1.S + $export$1.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export$1($export$1.S + $export$1.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export$1($export$1.S + $export$1.F * !(USE_NATIVE && require$$0$11(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

	$export$1($export$1.P + $export$1.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || require$$0.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });

	// https://github.com/tc39/proposal-promise-try




	$export$1($export$1.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });

	var promise = core.Promise;

	var promise$1 = /*#__PURE__*/Object.freeze({
		default: promise,
		__moduleExports: promise
	});

	var require$$0$14 = ( promise$1 && promise ) || promise$1;

	var promise$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$14, __esModule: true };
	});

	var _Promise = unwrapExports(promise$2);

	// most Object methods by ES6 should accept primitives



	var _objectSap = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export$1($export$1.S + $export$1.F * require$$1(function () { fn(1); }), 'Object', exp);
	};

	var _objectSap$1 = /*#__PURE__*/Object.freeze({
		default: _objectSap,
		__moduleExports: _objectSap
	});

	var require$$0$15 = ( _objectSap$1 && _objectSap ) || _objectSap$1;

	// 19.1.2.14 Object.keys(O)



	require$$0$15('keys', function () {
	  return function keys(it) {
	    return getKeys(toObject(it));
	  };
	});

	var keys = core.Object.keys;

	var keys$1 = /*#__PURE__*/Object.freeze({
		default: keys,
		__moduleExports: keys
	});

	var require$$0$16 = ( keys$1 && keys ) || keys$1;

	var keys$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$16, __esModule: true };
	});

	var _Object$keys = unwrapExports(keys$2);

	var ITERATOR$4 = require$$1$2('iterator');

	var core_isIterable = core.isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR$4] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || Iterators.hasOwnProperty(classof(O));
	};

	var core_isIterable$1 = /*#__PURE__*/Object.freeze({
		default: core_isIterable,
		__moduleExports: core_isIterable
	});

	var require$$2$1 = ( core_isIterable$1 && core_isIterable ) || core_isIterable$1;

	var isIterable = require$$2$1;

	var isIterable$1 = /*#__PURE__*/Object.freeze({
		default: isIterable,
		__moduleExports: isIterable
	});

	var require$$0$17 = ( isIterable$1 && isIterable ) || isIterable$1;

	var isIterable$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$17, __esModule: true };
	});

	var isIterable$3 = unwrapExports(isIterable$2);

	var isIterable$4 = /*#__PURE__*/Object.freeze({
		default: isIterable$3,
		__moduleExports: isIterable$2
	});

	var core_getIterator = core.getIterator = function (it) {
	  var iterFn = getIterFn(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

	var core_getIterator$1 = /*#__PURE__*/Object.freeze({
		default: core_getIterator,
		__moduleExports: core_getIterator
	});

	var require$$2$2 = ( core_getIterator$1 && core_getIterator ) || core_getIterator$1;

	var getIterator = require$$2$2;

	var getIterator$1 = /*#__PURE__*/Object.freeze({
		default: getIterator,
		__moduleExports: getIterator
	});

	var require$$0$18 = ( getIterator$1 && getIterator ) || getIterator$1;

	var getIterator$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$18, __esModule: true };
	});

	var getIterator$3 = unwrapExports(getIterator$2);

	var getIterator$4 = /*#__PURE__*/Object.freeze({
		default: getIterator$3,
		__moduleExports: getIterator$2
	});

	var _isIterable2 = ( isIterable$4 && isIterable$3 ) || isIterable$4;

	var _getIterator2 = ( getIterator$4 && getIterator$3 ) || getIterator$4;

	var slicedToArray = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _isIterable3 = _interopRequireDefault(_isIterable2);



	var _getIterator3 = _interopRequireDefault(_getIterator2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();
	});

	var _slicedToArray = unwrapExports(slicedToArray);

	var isEnum = require$$0$6.f;
	var _objectToArray = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) if (isEnum.call(O, key = keys[i++])) {
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

	var _objectToArray$1 = /*#__PURE__*/Object.freeze({
		default: _objectToArray,
		__moduleExports: _objectToArray
	});

	var require$$0$19 = ( _objectToArray$1 && _objectToArray ) || _objectToArray$1;

	// https://github.com/tc39/proposal-object-values-entries

	var $entries = require$$0$19(true);

	$export$1($export$1.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});

	var entries = core.Object.entries;

	var entries$1 = /*#__PURE__*/Object.freeze({
		default: entries,
		__moduleExports: entries
	});

	var require$$0$20 = ( entries$1 && entries ) || entries$1;

	var entries$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$20, __esModule: true };
	});

	var _Object$entries = unwrapExports(entries$2);

	var classCallCheck = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	});

	var _classCallCheck = unwrapExports(classCallCheck);

	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export$1($export$1.S + $export$1.F * !require$$0$1, 'Object', { defineProperty: dP$1.f });

	var $Object = core.Object;
	var defineProperty = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};

	var defineProperty$1 = /*#__PURE__*/Object.freeze({
		default: defineProperty,
		__moduleExports: defineProperty
	});

	var require$$0$21 = ( defineProperty$1 && defineProperty ) || defineProperty$1;

	var defineProperty$2 = createCommonjsModule(function (module) {
	module.exports = { "default": require$$0$21, __esModule: true };
	});

	var defineProperty$3 = unwrapExports(defineProperty$2);

	var defineProperty$4 = /*#__PURE__*/Object.freeze({
		default: defineProperty$3,
		__moduleExports: defineProperty$2
	});

	var _defineProperty = ( defineProperty$4 && defineProperty$3 ) || defineProperty$4;

	var createClass = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	});

	var _createClass = unwrapExports(createClass);

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	var _freeGlobal$1 = /*#__PURE__*/Object.freeze({
		default: _freeGlobal,
		__moduleExports: _freeGlobal
	});

	var freeGlobal$1 = ( _freeGlobal$1 && _freeGlobal ) || _freeGlobal$1;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal$1 || freeSelf || Function('return this')();

	var _root = root;

	var _root$1 = /*#__PURE__*/Object.freeze({
		default: _root,
		__moduleExports: _root
	});

	var root$1 = ( _root$1 && _root ) || _root$1;

	/** Built-in value references. */
	var Symbol$1 = root$1.Symbol;

	var _Symbol = Symbol$1;

	var _Symbol$1 = /*#__PURE__*/Object.freeze({
		default: _Symbol,
		__moduleExports: _Symbol
	});

	var Symbol$2 = ( _Symbol$1 && _Symbol ) || _Symbol$1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	var _getRawTag$1 = /*#__PURE__*/Object.freeze({
		default: _getRawTag,
		__moduleExports: _getRawTag
	});

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString;

	var _objectToString$1 = /*#__PURE__*/Object.freeze({
		default: _objectToString,
		__moduleExports: _objectToString
	});

	var getRawTag$1 = ( _getRawTag$1 && _getRawTag ) || _getRawTag$1;

	var objectToString$1 = ( _objectToString$1 && _objectToString ) || _objectToString$1;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? getRawTag$1(value)
	    : objectToString$1(value);
	}

	var _baseGetTag = baseGetTag;

	var _baseGetTag$1 = /*#__PURE__*/Object.freeze({
		default: _baseGetTag,
		__moduleExports: _baseGetTag
	});

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$1(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$1;

	var isObject$2 = /*#__PURE__*/Object.freeze({
		default: isObject_1,
		__moduleExports: isObject_1
	});

	var baseGetTag$1 = ( _baseGetTag$1 && _baseGetTag ) || _baseGetTag$1;

	var isObject$3 = ( isObject$2 && isObject_1 ) || isObject$2;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject$3(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag$1(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction;

	(function () {
	    var j = true;

	    function aa() {
	        if (j) {
	            return;
	        }this._$MT = null;
	        this._$5S = null;
	        this._$NP = 0;
	        aa._$42++;
	        this._$5S = new y(this);
	    }
	    aa._$0s = 1;
	    aa._$4s = 2;
	    aa._$42 = 0;
	    aa._$62 = function (aQ, aU) {
	        try {
	            if (aU instanceof ArrayBuffer) {
	                aU = new DataView(aU);
	            }
	            if (!(aU instanceof DataView)) {
	                throw new J('_$SS#loadModel(b) / b _$x be DataView or ArrayBuffer');
	            }
	            var aS = new K(aU);
	            var aM = aS._$ST();
	            var aK = aS._$ST();
	            var aJ = aS._$ST();
	            var aN = void 0;
	            if (aM == 109 && aK == 111 && aJ == 99) {
	                aN = aS._$ST();
	            } else {
	                throw new J('_$gi _$C _$li , _$Q0 _$P0.');
	            }aS._$gr(aN);
	            if (aN > ay._$T7) {
	                aQ._$NP |= aa._$4s;var aR = ay._$T7;var aI = '_$gi _$C _$li , _$n0 _$_ version _$li ( SDK : ' + aR + ' < _$f0 : ' + aN + ' )@_$SS#loadModel()\n';throw new J(aI);
	            }
	            var aL = aS._$nP();
	            if (aN >= ay._$s7) {
	                var aH = aS._$9T();var aT = aS._$9T();if (aH != -30584 || aT != -30584) {
	                    aQ._$NP |= aa._$0s;throw new J('_$gi _$C _$li , _$0 _$6 _$Ui.');
	                }
	            }aQ._$KS(aL);
	            var aP = aQ.getModelContext();
	            aP.setDrawParam(aQ.getDrawParam());
	            aP.init();
	        } catch (aO) {
	            q._$Rb(aO);
	        }
	    };
	    aa.prototype._$KS = function (aH) {
	        this._$MT = aH;
	    };
	    aa.prototype.getModelImpl = function () {
	        if (this._$MT == null) {
	            this._$MT = new w();
	            this._$MT._$zP();
	        }
	        return this._$MT;
	    };
	    aa.prototype.getCanvasWidth = function () {
	        if (this._$MT == null) {
	            return 0;
	        }return this._$MT.getCanvasWidth();
	    };
	    aa.prototype.getCanvasHeight = function () {
	        if (this._$MT == null) {
	            return 0;
	        }return this._$MT.getCanvasHeight();
	    };
	    aa.prototype.getParamFloat = function (aH) {
	        if (typeof aH !== 'number') {
	            aH = this._$5S.getParamIndex(z.getID(aH));
	        }return this._$5S.getParamFloat(aH);
	    };
	    aa.prototype.setParamFloat = function (aH, aJ, aI) {
	        if (typeof aH !== 'number') {
	            aH = this._$5S.getParamIndex(z.getID(aH));
	        }if (arguments.length < 3) {
	            aI = 1;
	        }this._$5S.setParamFloat(aH, this._$5S.getParamFloat(aH) * (1 - aI) + aJ * aI);
	    };
	    aa.prototype.addToParamFloat = function (aH, aJ, aI) {
	        if (typeof aH !== 'number') {
	            aH = this._$5S.getParamIndex(z.getID(aH));
	        }if (arguments.length < 3) {
	            aI = 1;
	        }this._$5S.setParamFloat(aH, this._$5S.getParamFloat(aH) + aJ * aI);
	    };
	    aa.prototype.multParamFloat = function (aH, aJ, aI) {
	        if (typeof aH !== 'number') {
	            aH = this._$5S.getParamIndex(z.getID(aH));
	        }if (arguments.length < 3) {
	            aI = 1;
	        }this._$5S.setParamFloat(aH, this._$5S.getParamFloat(aH) * (1 + (aJ - 1) * aI));
	    };
	    aa.prototype.getParamIndex = function (aH) {
	        return this._$5S.getParamIndex(z.getID(aH));
	    };
	    aa.prototype.loadParam = function () {
	        this._$5S.loadParam();
	    };
	    aa.prototype.saveParam = function () {
	        this._$5S.saveParam();
	    };
	    aa.prototype.init = function () {
	        this._$5S.init();
	    };
	    aa.prototype.update = function () {
	        this._$5S.update();
	    };
	    aa.prototype._$Rs = function () {
	        q._$li('_$60 _$PT _$Rs()');return -1;
	    };
	    aa.prototype._$Ds = function (aH) {
	        q._$li('_$60 _$PT _$SS#_$Ds() \n');
	    };
	    aa.prototype._$K2 = function () {};
	    aa.prototype.draw = function () {};
	    aa.prototype.getModelContext = function () {
	        return this._$5S;
	    };
	    aa.prototype._$s2 = function () {
	        return this._$NP;
	    };
	    aa.prototype._$P7 = function (aK, aR, aH, a0) {
	        var aU = -1;
	        var aY = 0;
	        var aM = this;
	        var aJ = 0.5;
	        var aI = 0.15;
	        var aX = true;
	        if (aH == 0) {
	            for (var aV = 0; aV < aK.length; aV++) {
	                var aP = aK[aV];
	                var aO = aR[aV];
	                var aS = aM.getParamFloat(aP) != 0;
	                aM.setPartsOpacity(aO, aS ? 1 : 0);
	            }
	        } else {
	            if (aK.length == 1) {
	                var aP = aK[0];var aT = aM.getParamFloat(aP) != 0;var aO = aR[0];var aQ = aM.getPartsOpacity(aO);var aW = aH / a0;if (aT) {
	                    aQ += aW;if (aQ > 1) {
	                        aQ = 1;
	                    }
	                } else {
	                    aQ -= aW;if (aQ < 0) {
	                        aQ = 0;
	                    }
	                }aM.setPartsOpacity(aO, aQ);
	            } else {
	                for (var aV = 0; aV < aK.length; aV++) {
	                    var aP = aK[aV];
	                    var aS = aM.getParamFloat(aP) != 0;
	                    if (aS) {
	                        if (aU >= 0) {
	                            break;
	                        }aU = aV;
	                        var aO = aR[aV];
	                        aY = aM.getPartsOpacity(aO);
	                        aY += aH / a0;
	                        if (aY > 1) {
	                            aY = 1;
	                        }
	                    }
	                }
	                if (aU < 0) {
	                    console.log('No _$wi _$q0/ _$U default[%s]', aK[0]);
	                    aU = 0;
	                    aY = 1;
	                    aM.loadParam();
	                    aM.setParamFloat(aK[aU], aY);
	                    aM.saveParam();
	                }
	                for (var aV = 0; aV < aK.length; aV++) {
	                    var aO = aR[aV];if (aU == aV) {
	                        aM.setPartsOpacity(aO, aY);
	                    } else {
	                        var aL = aM.getPartsOpacity(aO);var aZ;if (aY < aJ) {
	                            aZ = aY * (aJ - 1) / aJ + 1;
	                        } else {
	                            aZ = (1 - aY) * aJ / (1 - aJ);
	                        }if (aX) {
	                            var aN = (1 - aZ) * (1 - aY);if (aN > aI) {
	                                aZ = 1 - aI / (1 - aY);
	                            }
	                        }if (aL > aZ) {
	                            aL = aZ;
	                        }aM.setPartsOpacity(aO, aL);
	                    }
	                }
	            }
	        }
	    };
	    aa.prototype.setPartsOpacity = function (aI, aH) {
	        if (typeof aI !== 'number') {
	            aI = this._$5S.getPartsDataIndex(i.getID(aI));
	        }this._$5S.setPartsOpacity(aI, aH);
	    };
	    aa.prototype.getPartsDataIndex = function (aH) {
	        if (!(aH instanceof i)) {
	            aH = i.getID(aH);
	        }return this._$5S.getPartsDataIndex(aH);
	    };
	    aa.prototype.getPartsOpacity = function (aH) {
	        if (typeof aH !== 'number') {
	            aH = this._$5S.getPartsDataIndex(i.getID(aH));
	        }if (aH < 0) {
	            return 0;
	        }return this._$5S.getPartsOpacity(aH);
	    };
	    aa.prototype.getDrawParam = function () {};
	    aa.prototype.getDrawDataIndex = function (aH) {
	        return this._$5S.getDrawDataIndex(Z.getID(aH));
	    };
	    aa.prototype.getDrawData = function (aH) {
	        return this._$5S.getDrawData(aH);
	    };
	    aa.prototype.getTransformedPoints = function (aH) {
	        var aI = this._$5S._$C2(aH);if (aI instanceof ag) {
	            return aI.getTransformedPoints();
	        }return null;
	    };
	    aa.prototype.getIndexArray = function (aI) {
	        if (aI < 0 || aI >= this._$5S._$aS.length) {
	            return null;
	        }var aH = this._$5S._$aS[aI];if (aH != null && aH.getType() == a._$wb) {
	            if (aH instanceof b) {
	                return aH.getIndexArray();
	            }
	        }return null;
	    };

	    function W(aJ) {
	        if (j) {
	            return;
	        }this.clipContextList = new Array();
	        this.glcontext = aJ.gl;
	        this.dp_webgl = aJ;
	        this.curFrameNo = 0;
	        this.firstError_clipInNotUpdate = true;
	        this.colorBuffer = 0;
	        this.isInitGLFBFunc = false;
	        this.tmpBoundsOnModel = new av();
	        if (Q.glContext.length > Q.frameBuffers.length) {
	            this.curFrameNo = this.getMaskRenderTexture();
	        }this.tmpModelToViewMatrix = new ac();
	        this.tmpMatrix2 = new ac();
	        this.tmpMatrixForMask = new ac();
	        this.tmpMatrixForDraw = new ac();
	        this.CHANNEL_COLORS = new Array();
	        var aI = new o();
	        aI = new o();
	        aI.r = 0;
	        aI.g = 0;
	        aI.b = 0;
	        aI.a = 1;
	        this.CHANNEL_COLORS.push(aI);
	        aI = new o();
	        aI.r = 1;
	        aI.g = 0;
	        aI.b = 0;
	        aI.a = 0;
	        this.CHANNEL_COLORS.push(aI);
	        aI = new o();
	        aI.r = 0;
	        aI.g = 1;
	        aI.b = 0;
	        aI.a = 0;
	        this.CHANNEL_COLORS.push(aI);
	        aI = new o();
	        aI.r = 0;
	        aI.g = 0;
	        aI.b = 1;
	        aI.a = 0;
	        this.CHANNEL_COLORS.push(aI);
	        for (var aH = 0; aH < this.CHANNEL_COLORS.length; aH++) {
	            this.dp_webgl.setChannelFlagAsColor(aH, this.CHANNEL_COLORS[aH]);
	        }
	    }
	    W.CHANNEL_COUNT = 4;
	    W.RENDER_TEXTURE_USE_MIPMAP = false;
	    W.NOT_USED_FRAME = -100;
	    W.prototype._$L7 = function () {
	        if (this.tmpModelToViewMatrix) {
	            this.tmpModelToViewMatrix = null;
	        }if (this.tmpMatrix2) {
	            this.tmpMatrix2 = null;
	        }if (this.tmpMatrixForMask) {
	            this.tmpMatrixForMask = null;
	        }if (this.tmpMatrixForDraw) {
	            this.tmpMatrixForDraw = null;
	        }if (this.tmpBoundsOnModel) {
	            this.tmpBoundsOnModel = null;
	        }if (this.CHANNEL_COLORS) {
	            for (var aH = this.CHANNEL_COLORS.length - 1; aH >= 0; --aH) {
	                this.CHANNEL_COLORS.splice(aH, 1);
	            }this.CHANNEL_COLORS = [];
	        }this.releaseShader();
	    };
	    W.prototype.releaseShader = function () {
	        var aI = Q.frameBuffers.length;
	        for (var aH = 0; aH < aI; aH++) {
	            this.gl.deleteFramebuffer(Q.frameBuffers[aH].framebuffer);
	        }Q.frameBuffers = [];
	        Q.glContext = [];
	    };
	    W.prototype.init = function (aO, aN, aL) {
	        for (var aM = 0; aM < aN.length; aM++) {
	            var aH = aN[aM].getClipIDList();
	            if (aH == null) {
	                continue;
	            }
	            var aJ = this.findSameClip(aH);
	            if (aJ == null) {
	                aJ = new U(this, aO, aH);
	                this.clipContextList.push(aJ);
	            }
	            var aI = aN[aM].getDrawDataID();
	            var aK = aO.getDrawDataIndex(aI);
	            aJ.addClippedDrawData(aI, aK);
	            var aP = aL[aM];
	            aP.clipBufPre_clipContext = aJ;
	        }
	    };
	    W.prototype.getMaskRenderTexture = function () {
	        var aH = null;
	        aH = this.dp_webgl.createFramebuffer();
	        Q.frameBuffers[this.dp_webgl.glno] = aH;
	        return this.dp_webgl.glno;
	    };
	    W.prototype.setupClip = function (a1, aQ) {
	        var aK = 0;
	        for (var aO = 0; aO < this.clipContextList.length; aO++) {
	            var aP = this.clipContextList[aO];
	            this.calcClippedDrawTotalBounds(a1, aP);
	            if (aP.isUsing) {
	                aK++;
	            }
	        }
	        if (aK > 0) {
	            var aM = aQ.gl.getParameter(aQ.gl.FRAMEBUFFER_BINDING);
	            var aW = new Array(4);
	            aW[0] = 0;
	            aW[1] = 0;
	            aW[2] = aQ.gl.canvas.width;
	            aW[3] = aQ.gl.canvas.height;
	            aQ.gl.viewport(0, 0, Q.clippingMaskBufferSize, Q.clippingMaskBufferSize);
	            this.setupLayoutBounds(aK);
	            aQ.gl.bindFramebuffer(aQ.gl.FRAMEBUFFER, Q.frameBuffers[this.curFrameNo].framebuffer);
	            aQ.gl.clearColor(0, 0, 0, 0);
	            aQ.gl.clear(aQ.gl.COLOR_BUFFER_BIT);
	            for (var aO = 0; aO < this.clipContextList.length; aO++) {
	                var aP = this.clipContextList[aO];
	                var aT = aP.allClippedDrawRect;
	                var aN = aP.layoutChannelNo;
	                var aV = aP.layoutBounds;
	                var aJ = 0.05;
	                this.tmpBoundsOnModel._$jL(aT);
	                this.tmpBoundsOnModel.expand(aT.width * aJ, aT.height * aJ);
	                var aZ = aV.width / this.tmpBoundsOnModel.width;
	                var aY = aV.height / this.tmpBoundsOnModel.height;
	                this.tmpMatrix2.identity();
	                this.tmpMatrix2.translate(-1, -1, 0);
	                this.tmpMatrix2.scale(2, 2, 1);
	                this.tmpMatrix2.translate(aV.x, aV.y, 0);
	                this.tmpMatrix2.scale(aZ, aY, 1);
	                this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x, -this.tmpBoundsOnModel.y, 0);
	                this.tmpMatrixForMask.setMatrix(this.tmpMatrix2.m);
	                this.tmpMatrix2.identity();
	                this.tmpMatrix2.translate(aV.x, aV.y, 0);
	                this.tmpMatrix2.scale(aZ, aY, 1);
	                this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x, -this.tmpBoundsOnModel.y, 0);
	                this.tmpMatrixForDraw.setMatrix(this.tmpMatrix2.m);
	                var aH = this.tmpMatrixForMask.getArray();
	                for (var aX = 0; aX < 16; aX++) {
	                    aP.matrixForMask[aX] = aH[aX];
	                }
	                var a0 = this.tmpMatrixForDraw.getArray();
	                for (var aX = 0; aX < 16; aX++) {
	                    aP.matrixForDraw[aX] = a0[aX];
	                }
	                var aS = aP.clippingMaskDrawIndexList.length;
	                for (var aU = 0; aU < aS; aU++) {
	                    var aR = aP.clippingMaskDrawIndexList[aU];
	                    var aI = a1.getDrawData(aR);
	                    var aL = a1._$C2(aR);
	                    aQ.setClipBufPre_clipContextForMask(aP);
	                    aI.draw(aQ, a1, aL);
	                }
	            }
	            aQ.gl.bindFramebuffer(aQ.gl.FRAMEBUFFER, aM);
	            aQ.setClipBufPre_clipContextForMask(null);
	            aQ.gl.viewport(aW[0], aW[1], aW[2], aW[3]);
	        }
	    };
	    W.prototype.getColorBuffer = function () {
	        return this.colorBuffer;
	    };
	    W.prototype.findSameClip = function (aK) {
	        for (var aN = 0; aN < this.clipContextList.length; aN++) {
	            var aO = this.clipContextList[aN];var aH = aO.clipIDList.length;if (aH != aK.length) {
	                continue;
	            }var aI = 0;for (var aM = 0; aM < aH; aM++) {
	                var aL = aO.clipIDList[aM];for (var aJ = 0; aJ < aH; aJ++) {
	                    if (aK[aJ] == aL) {
	                        aI++;break;
	                    }
	                }
	            }if (aI == aH) {
	                return aO;
	            }
	        }return null;
	    };
	    W.prototype.calcClippedDrawTotalBounds = function (a6, aV) {
	        var aU = a6._$Ri.getModelImpl().getCanvasWidth();
	        var a5 = a6._$Ri.getModelImpl().getCanvasHeight();
	        var aJ = aU > a5 ? aU : a5;
	        var aT = aJ;
	        var aR = aJ;
	        var aS = 0;
	        var aP = 0;
	        var aL = aV.clippedDrawContextList.length;
	        for (var aM = 0; aM < aL; aM++) {
	            var aW = aV.clippedDrawContextList[aM];
	            var aN = aW.drawDataIndex;
	            var aK = a6._$C2(aN);
	            if (aK._$yo()) {
	                var aX = aK.getTransformedPoints();
	                var a4 = aX.length;
	                var aI = [];
	                var aH = [];
	                var aO = 0;
	                for (var a3 = aw._$i2; a3 < a4; a3 += aw._$No) {
	                    aI[aO] = aX[a3];
	                    aH[aO] = aX[a3 + 1];
	                    aO++;
	                }
	                var a2 = Math.min.apply(null, aI);
	                var a1 = Math.min.apply(null, aH);
	                var a0 = Math.max.apply(null, aI);
	                var aZ = Math.max.apply(null, aH);
	                if (a2 < aT) {
	                    aT = a2;
	                }
	                if (a1 < aR) {
	                    aR = a1;
	                }
	                if (a0 > aS) {
	                    aS = a0;
	                }
	                if (aZ > aP) {
	                    aP = aZ;
	                }
	            }
	        }
	        if (aT == aJ) {
	            aV.allClippedDrawRect.x = 0;
	            aV.allClippedDrawRect.y = 0;
	            aV.allClippedDrawRect.width = 0;
	            aV.allClippedDrawRect.height = 0;
	            aV.isUsing = false;
	        } else {
	            var aQ = aS - aT;
	            var aY = aP - aR;
	            aV.allClippedDrawRect.x = aT;
	            aV.allClippedDrawRect.y = aR;
	            aV.allClippedDrawRect.width = aQ;
	            aV.allClippedDrawRect.height = aY;
	            aV.isUsing = true;
	        }
	    };
	    W.prototype.setupLayoutBounds = function (aQ) {
	        var aI = aQ / W.CHANNEL_COUNT;
	        var aP = aQ % W.CHANNEL_COUNT;
	        aI = ~~aI;
	        aP = ~~aP;
	        var aH = 0;
	        for (var aJ = 0; aJ < W.CHANNEL_COUNT; aJ++) {
	            var aM = aI + (aJ < aP ? 1 : 0);
	            if (aM == 0) ; else {
	                if (aM == 1) {
	                    var aL = this.clipContextList[aH++];
	                    aL.layoutChannelNo = aJ;
	                    aL.layoutBounds.x = 0;
	                    aL.layoutBounds.y = 0;
	                    aL.layoutBounds.width = 1;
	                    aL.layoutBounds.height = 1;
	                } else {
	                    if (aM == 2) {
	                        for (var aO = 0; aO < aM; aO++) {
	                            var aN = aO % 2;
	                            var aK = 0;
	                            aN = ~~aN;
	                            var aL = this.clipContextList[aH++];
	                            aL.layoutChannelNo = aJ;
	                            aL.layoutBounds.x = aN * 0.5;
	                            aL.layoutBounds.y = 0;
	                            aL.layoutBounds.width = 0.5;
	                            aL.layoutBounds.height = 1;
	                        }
	                    } else {
	                        if (aM <= 4) {
	                            for (var aO = 0; aO < aM; aO++) {
	                                var aN = aO % 2;
	                                var aK = aO / 2;
	                                aN = ~~aN;
	                                aK = ~~aK;
	                                var aL = this.clipContextList[aH++];
	                                aL.layoutChannelNo = aJ;
	                                aL.layoutBounds.x = aN * 0.5;
	                                aL.layoutBounds.y = aK * 0.5;
	                                aL.layoutBounds.width = 0.5;
	                                aL.layoutBounds.height = 0.5;
	                            }
	                        } else {
	                            if (aM <= 9) {
	                                for (var aO = 0; aO < aM; aO++) {
	                                    var aN = aO % 3;
	                                    var aK = aO / 3;
	                                    aN = ~~aN;
	                                    aK = ~~aK;
	                                    var aL = this.clipContextList[aH++];
	                                    aL.layoutChannelNo = aJ;
	                                    aL.layoutBounds.x = aN / 3;
	                                    aL.layoutBounds.y = aK / 3;
	                                    aL.layoutBounds.width = 1 / 3;
	                                    aL.layoutBounds.height = 1 / 3;
	                                }
	                            } else {
	                                q._$li('_$6 _$0P mask count : %d', aM);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    };

	    function U(aH, aK, aI) {
	        this.clipIDList = new Array();
	        this.clipIDList = aI;
	        this.clippingMaskDrawIndexList = new Array();
	        for (var aJ = 0; aJ < aI.length; aJ++) {
	            this.clippingMaskDrawIndexList.push(aK.getDrawDataIndex(aI[aJ]));
	        }this.clippedDrawContextList = new Array();
	        this.isUsing = true;
	        this.layoutChannelNo = 0;
	        this.layoutBounds = new av();
	        this.allClippedDrawRect = new av();
	        this.matrixForMask = new Float32Array(16);
	        this.matrixForDraw = new Float32Array(16);
	        this.owner = aH;
	    }
	    U.prototype.addClippedDrawData = function (aJ, aI) {
	        var aH = new R(aJ, aI);
	        this.clippedDrawContextList.push(aH);
	    };

	    function R(aI, aH) {
	        this._$gP = aI;
	        this.drawDataIndex = aH;
	    }

	    function I() {
	        if (j) {
	            return;
	        }this.color = null;
	    }

	    function ah() {
	        if (j) {
	            return;
	        }this._$dP = null;
	        this._$eo = null;
	        this._$V0 = null;
	        this._$dP = 1000;
	        this._$eo = 1000;
	        this._$V0 = 1;
	        this._$a0();
	    }
	    ah._$JT = function (aP, aN, aO) {
	        var aQ = aP / aN;var a1 = aO / aN;var aU = a1;var aZ = 1 / 3;var aR = 2 / 3;var a0 = 1 - (1 - a1) * (1 - a1);var a2 = 1 - (1 - aU) * (1 - aU);var aM = 0;var aL = (1 - a1) * aZ * a0 + (aU * aR + (1 - aU) * aZ) * (1 - a0);var aK = (aU + (1 - aU) * aR) * a2 + (a1 * aZ + (1 - a1) * aR) * (1 - a2);var aJ = 1;var aY = aJ - 3 * aK + 3 * aL - aM;var aX = 3 * aK - 6 * aL + 3 * aM;var aW = 3 * aL - 3 * aM;var aV = aM;if (aQ <= 0) {
	            return 0;
	        } else {
	            if (aQ >= 1) {
	                return 1;
	            }
	        }var aS = aQ;var aI = aS * aS;var aH = aS * aI;var aT = aY * aH + aX * aI + aW * aS + aV;return aT;
	    };
	    ah.prototype._$a0 = function () {};
	    ah.prototype.setFadeIn = function (aH) {
	        this._$dP = aH;
	    };
	    ah.prototype.setFadeOut = function (aH) {
	        this._$eo = aH;
	    };
	    ah.prototype._$pT = function (aH) {
	        this._$V0 = aH;
	    };
	    ah.prototype.getFadeOut = function () {
	        return this._$eo;
	    };
	    ah.prototype._$4T = function () {
	        return this._$eo;
	    };
	    ah.prototype._$mT = function () {
	        return this._$V0;
	    };
	    ah.prototype.getDurationMSec = function () {
	        return -1;
	    };
	    ah.prototype.getLoopDurationMSec = function () {
	        return -1;
	    };
	    ah.prototype.updateParam = function (aJ, aN) {
	        if (!aN._$AT || aN._$9L) {
	            return;
	        }
	        var aL = P.getUserTimeMSec();
	        if (aN._$z2 < 0) {
	            aN._$z2 = aL;
	            aN._$bs = aL;
	            var aM = this.getDurationMSec();
	            if (aN._$Do < 0) {
	                aN._$Do = aM <= 0 ? -1 : aN._$z2 + aM;
	            }
	        }
	        var aI = this._$V0;
	        var aH = this._$dP == 0 ? 1 : A._$r2((aL - aN._$bs) / this._$dP);
	        var aK = this._$eo == 0 || aN._$Do < 0 ? 1 : A._$r2((aN._$Do - aL) / this._$eo);
	        aI = aI * aH * aK;
	        if (!(aI >= 0 && aI <= 1)) {
	            console.log('### assert!! ### ');
	        }this.updateParamExe(aJ, aL, aI, aN);
	        if (aN._$Do > 0 && aN._$Do < aL) {
	            aN._$9L = true;
	        }
	    };
	    ah.prototype.updateParamExe = function (aH, aI, aJ, aK) {};

	    function q() {}q._$8s = 0;
	    q._$fT = new Object();
	    q.start = function (aI) {
	        var aH = q._$fT[aI];
	        if (aH == null) {
	            aH = new af();
	            aH._$r = aI;
	            q._$fT[aI] = aH;
	        }
	        aH._$0S = P.getSystemTimeMSec();
	    };
	    q.dump = function (aJ) {
	        var aH = q._$fT[aJ];
	        if (aH != null) {
	            var aI = P.getSystemTimeMSec();
	            var aK = aI - aH._$0S;
	            console.log(aJ + ' : ' + aK + 'ms');
	            return aK;
	        } else {
	            return -1;
	        }
	    };
	    q.end = function (aJ) {
	        var aH = q._$fT[aJ];if (aH != null) {
	            var aI = P.getSystemTimeMSec();return aI - aH._$0S;
	        } else {
	            return -1;
	        }
	    };
	    q._$li = function (aI, aH) {
	        console.log('_$li : ' + aI + '\n', aH);
	    };
	    q._$Ji = function (aI, aH) {
	        console.log(aI, aH);
	    };
	    q._$dL = function (aI, aH) {
	        console.log(aI, aH);
	        console.log('\n');
	    };
	    q._$KL = function (aJ, aI) {
	        for (var aH = 0; aH < aI; aH++) {
	            if (aH % 16 == 0 && aH > 0) {
	                console.log('\n');
	            } else {
	                if (aH % 8 == 0 && aH > 0) {
	                    console.log('  ');
	                }
	            }console.log('%02X ', aJ[aH] & 255);
	        }console.log('\n');
	    };
	    q._$nr = function (aL, aI, aK) {
	        console.log('%s\n', aL);
	        var aH = aI.length;
	        for (var aJ = 0; aJ < aH; ++aJ) {
	            console.log('%5d', aI[aJ]);
	            console.log('%s\n', aK);
	            console.log(',');
	        }
	        console.log('\n');
	    };
	    q._$Rb = function (aH) {
	        console.log('dump exception : ' + aH);
	        console.log('stack :: ' + aH.stack);
	    };

	    function af() {
	        this._$r = null;
	        this._$0S = null;
	    }

	    function F() {
	        if (j) {
	            return;
	        }this.x = null;
	        this.y = null;
	        this.width = null;
	        this.height = null;
	    }
	    F.prototype._$8P = function () {
	        return 0.5 * (this.x + this.x + this.width);
	    };
	    F.prototype._$6P = function () {
	        return 0.5 * (this.y + this.y + this.height);
	    };
	    F.prototype._$EL = function () {
	        return this.x + this.width;
	    };
	    F.prototype._$5T = function () {
	        return this.y + this.height;
	    };
	    F.prototype._$jL = function (aI, aK, aJ, aH) {
	        this.x = aI;
	        this.y = aK;
	        this.width = aJ;
	        this.height = aH;
	    };
	    F.prototype._$jL = function (aH) {
	        this.x = aH.x;
	        this.y = aH.y;
	        this.width = aH.width;
	        this.height = aH.height;
	    };

	    function i(aH) {
	        if (j) {
	            return;
	        }ak.prototype.constructor.call(this, aH);
	    }i.prototype = new ak();
	    i._$tP = new Object();
	    i._$27 = function () {
	        i._$tP.clear();
	    };
	    i.getID = function (aH) {
	        var aI = i._$tP[aH];
	        if (aI == null) {
	            aI = new i(aH);
	            i._$tP[aH] = aI;
	        }
	        return aI;
	    };
	    i.prototype._$3s = function () {
	        return new i();
	    };

	    function S() {}

	    function z(aH) {
	        if (j) {
	            return;
	        }ak.prototype.constructor.call(this, aH);
	    }z.prototype = new ak();
	    z._$tP = new Object();
	    z._$27 = function () {
	        z._$tP.clear();
	    };
	    z.getID = function (aH) {
	        var aI = z._$tP[aH];
	        if (aI == null) {
	            aI = new z(aH);
	            z._$tP[aH] = aI;
	        }
	        return aI;
	    };
	    z.prototype._$3s = function () {
	        return new z();
	    };

	    function w() {
	        if (j) {
	            return;
	        }this._$vo = null;
	        this._$F2 = null;
	        this._$ao = 400;
	        this._$1S = 400;
	        w._$42++;
	    }
	    w._$42 = 0;
	    w.prototype._$zP = function () {
	        if (this._$vo == null) {
	            this._$vo = new an();
	        }if (this._$F2 == null) {
	            this._$F2 = new Array();
	        }
	    };
	    w.prototype.getCanvasWidth = function () {
	        return this._$ao;
	    };
	    w.prototype.getCanvasHeight = function () {
	        return this._$1S;
	    };
	    w.prototype._$F0 = function (aH) {
	        this._$vo = aH._$nP();
	        this._$F2 = aH._$nP();
	        this._$ao = aH._$6L();
	        this._$1S = aH._$6L();
	    };
	    w.prototype._$6S = function (aH) {
	        this._$F2.push(aH);
	    };
	    w.prototype._$Xr = function () {
	        return this._$F2;
	    };
	    w.prototype._$E2 = function () {
	        return this._$vo;
	    };

	    function u() {
	        if (j) {
	            return;
	        }this.p1 = new N();
	        this.p2 = new N();
	        this._$Fo = 0;
	        this._$Db = 0;
	        this._$L2 = 0;
	        this._$M2 = 0;
	        this._$ks = 0;
	        this._$9b = 0;
	        this._$iP = 0;
	        this._$iT = 0;
	        this._$lL = new Array();
	        this._$qP = new Array();
	        this.setup(0.3, 0.5, 0.1);
	    }
	    u.prototype.setup = function (aJ, aI, aH) {
	        this._$ks = this._$Yb();
	        this.p2._$xT();
	        if (arguments.length == 3) {
	            this._$Fo = aJ;
	            this._$L2 = aI;
	            this.p1._$p = aH;
	            this.p2._$p = aH;
	            this.p2.y = aJ;
	            this.setup();
	        }
	    };
	    u.prototype.getPhysicsPoint1 = function () {
	        return this.p1;
	    };
	    u.prototype.getPhysicsPoint2 = function () {
	        return this.p2;
	    };
	    u.prototype._$qr = function () {
	        return this._$Db;
	    };
	    u.prototype._$pr = function (aH) {
	        this._$Db = aH;
	    };
	    u.prototype._$5r = function () {
	        return this._$M2;
	    };
	    u.prototype._$Cs = function () {
	        return this._$9b;
	    };
	    u.prototype._$Yb = function () {
	        return -180 * Math.atan2(this.p1.x - this.p2.x, -(this.p1.y - this.p2.y)) / Math.PI;
	    };
	    u.prototype.addSrcParam = function (aJ, aH, aL, aI) {
	        var aK = new h(aJ, aH, aL, aI);
	        this._$lL.push(aK);
	    };
	    u.prototype.addTargetParam = function (aJ, aH, aK, aI) {
	        var aL = new aF(aJ, aH, aK, aI);
	        this._$qP.push(aL);
	    };
	    u.prototype.update = function (aI, aL) {
	        if (this._$iP == 0) {
	            this._$iP = this._$iT = aL;
	            this._$Fo = Math.sqrt((this.p1.x - this.p2.x) * (this.p1.x - this.p2.x) + (this.p1.y - this.p2.y) * (this.p1.y - this.p2.y));
	            return;
	        }
	        var aK = (aL - this._$iT) / 1000;
	        if (aK != 0) {
	            for (var aJ = this._$lL.length - 1; aJ >= 0; --aJ) {
	                var aM = this._$lL[aJ];
	                aM._$oP(aI, this);
	            }
	            this._$oo(aI, aK);
	            this._$M2 = this._$Yb();
	            this._$9b = (this._$M2 - this._$ks) / aK;
	            this._$ks = this._$M2;
	        }
	        for (var aJ = this._$qP.length - 1; aJ >= 0; --aJ) {
	            var aH = this._$qP[aJ];
	            aH._$YS(aI, this);
	        }
	        this._$iT = aL;
	    };
	    u.prototype._$oo = function (aN, aI) {
	        if (aI < 0.033) {
	            aI = 0.033;
	        }
	        var aU = 1 / aI;
	        this.p1.vx = (this.p1.x - this.p1._$s0) * aU;
	        this.p1.vy = (this.p1.y - this.p1._$70) * aU;
	        this.p1.ax = (this.p1.vx - this.p1._$7L) * aU;
	        this.p1.ay = (this.p1.vy - this.p1._$HL) * aU;
	        this.p1.fx = this.p1.ax * this.p1._$p;
	        this.p1.fy = this.p1.ay * this.p1._$p;
	        this.p1._$xT();
	        var aM = -Math.atan2(this.p1.y - this.p2.y, this.p1.x - this.p2.x);
	        var aL = void 0;
	        var aV = void 0;
	        var aR = Math.cos(aM);
	        var aH = Math.sin(aM);
	        var aW = 9.8 * this.p2._$p;
	        var aQ = this._$Db * aC._$bS;
	        var aP = aW * Math.cos(aM - aQ);
	        aL = aP * aH;
	        aV = aP * aR;
	        var aK = -this.p1.fx * aH * aH;
	        var aT = -this.p1.fy * aH * aR;
	        var aJ = -this.p2.vx * this._$L2;
	        var aS = -this.p2.vy * this._$L2;
	        this.p2.fx = aL + aK + aJ;
	        this.p2.fy = aV + aT + aS;
	        this.p2.ax = this.p2.fx / this.p2._$p;
	        this.p2.ay = this.p2.fy / this.p2._$p;
	        this.p2.vx += this.p2.ax * aI;
	        this.p2.vy += this.p2.ay * aI;
	        this.p2.x += this.p2.vx * aI;
	        this.p2.y += this.p2.vy * aI;
	        var aO = Math.sqrt((this.p1.x - this.p2.x) * (this.p1.x - this.p2.x) + (this.p1.y - this.p2.y) * (this.p1.y - this.p2.y));
	        this.p2.x = this.p1.x + this._$Fo * (this.p2.x - this.p1.x) / aO;
	        this.p2.y = this.p1.y + this._$Fo * (this.p2.y - this.p1.y) / aO;
	        this.p2.vx = (this.p2.x - this.p2._$s0) * aU;
	        this.p2.vy = (this.p2.y - this.p2._$70) * aU;
	        this.p2._$xT();
	    };

	    function N() {
	        this._$p = 1;
	        this.x = 0;
	        this.y = 0;
	        this.vx = 0;
	        this.vy = 0;
	        this.ax = 0;
	        this.ay = 0;
	        this.fx = 0;
	        this.fy = 0;
	        this._$s0 = 0;
	        this._$70 = 0;
	        this._$7L = 0;
	        this._$HL = 0;
	    }
	    N.prototype._$xT = function () {
	        this._$s0 = this.x;
	        this._$70 = this.y;
	        this._$7L = this.vx;
	        this._$HL = this.vy;
	    };

	    function at(aJ, aI, aH) {
	        this._$wL = null;
	        this.scale = null;
	        this._$V0 = null;
	        this._$wL = aJ;
	        this.scale = aI;
	        this._$V0 = aH;
	    }
	    at.prototype._$oP = function (aI, aH) {};

	    function h(aJ, aK, aI, aH) {
	        at.prototype.constructor.call(this, aK, aI, aH);
	        this._$tL = null;
	        this._$tL = aJ;
	    }
	    h.prototype = new at();
	    h.prototype._$oP = function (aJ, aH) {
	        var aK = this.scale * aJ.getParamFloat(this._$wL);
	        var aL = aH.getPhysicsPoint1();
	        switch (this._$tL) {
	            default:
	            case u.Src.SRC_TO_X:
	                aL.x = aL.x + (aK - aL.x) * this._$V0;
	                break;
	            case u.Src.SRC_TO_Y:
	                aL.y = aL.y + (aK - aL.y) * this._$V0;
	                break;
	            case u.Src.SRC_TO_G_ANGLE:
	                var aI = aH._$qr();
	                aI = aI + (aK - aI) * this._$V0;
	                aH._$pr(aI);
	                break;
	        }
	    };

	    function d(aJ, aI, aH) {
	        this._$wL = null;
	        this.scale = null;
	        this._$V0 = null;
	        this._$wL = aJ;
	        this.scale = aI;
	        this._$V0 = aH;
	    }
	    d.prototype._$YS = function (aI, aH) {};

	    function aF(aI, aK, aJ, aH) {
	        d.prototype.constructor.call(this, aK, aJ, aH);
	        this._$YP = null;
	        this._$YP = aI;
	    }
	    aF.prototype = new d();
	    aF.prototype._$YS = function (aI, aH) {
	        switch (this._$YP) {
	            default:
	            case u.Target.TARGET_FROM_ANGLE:
	                aI.setParamFloat(this._$wL, this.scale * aH._$5r(), this._$V0);
	                break;
	            case u.Target.TARGET_FROM_ANGLE_V:
	                aI.setParamFloat(this._$wL, this.scale * aH._$Cs(), this._$V0);
	                break;
	        }
	    };
	    u.Src = function () {};
	    u.Src.SRC_TO_X = 'SRC_TO_X';
	    u.Src.SRC_TO_Y = 'SRC_TO_Y';
	    u.Src.SRC_TO_G_ANGLE = 'SRC_TO_G_ANGLE';
	    u.Target = function () {};
	    u.Target.TARGET_FROM_ANGLE = 'TARGET_FROM_ANGLE';
	    u.Target.TARGET_FROM_ANGLE_V = 'TARGET_FROM_ANGLE_V';

	    function X() {
	        if (j) {
	            return;
	        }this._$fL = 0;
	        this._$gL = 0;
	        this._$B0 = 1;
	        this._$z0 = 1;
	        this._$qT = 0;
	        this.reflectX = false;
	        this.reflectY = false;
	    }
	    X.prototype.init = function (aH) {
	        this._$fL = aH._$fL;
	        this._$gL = aH._$gL;
	        this._$B0 = aH._$B0;
	        this._$z0 = aH._$z0;
	        this._$qT = aH._$qT;
	        this.reflectX = aH.reflectX;
	        this.reflectY = aH.reflectY;
	    };
	    X.prototype._$F0 = function (aH) {
	        this._$fL = aH._$_T();
	        this._$gL = aH._$_T();
	        this._$B0 = aH._$_T();
	        this._$z0 = aH._$_T();
	        this._$qT = aH._$_T();
	        if (aH.getFormatVersion() >= ay.LIVE2D_FORMAT_VERSION_V2_10_SDK2) {
	            this.reflectX = aH._$po();
	            this.reflectY = aH._$po();
	        }
	    };
	    X.prototype._$e = function () {};
	    var ad = function ad() {};
	    ad._$ni = function (aL, aJ, aR, aQ, aK, aI, aH, aS, aN) {
	        var aM = aH * aI - aS * aK;
	        if (aM == 0) {
	            return null;
	        } else {
	            var aO = ((aL - aR) * aI - (aJ - aQ) * aK) / aM;
	            var aP = void 0;
	            if (aK != 0) {
	                aP = (aL - aR - aO * aH) / aK;
	            } else {
	                aP = (aJ - aQ - aO * aS) / aI;
	            }
	            if (isNaN(aP)) {
	                aP = (aL - aR - aO * aH) / aK;
	                if (isNaN(aP)) {
	                    aP = (aJ - aQ - aO * aS) / aI;
	                }
	                if (isNaN(aP)) {
	                    console.log('a is NaN @UtVector#_$ni() ');
	                    console.log('v1x : ' + aK);
	                    console.log('v1x != 0 ? ' + (aK != 0));
	                }
	            }
	            if (aN == null) {
	                return new Array(aP, aO);
	            } else {
	                aN[0] = aP;
	                aN[1] = aO;
	                return aN;
	            }
	        }
	    };

	    function av() {
	        if (j) {
	            return;
	        }this.x = null;
	        this.y = null;
	        this.width = null;
	        this.height = null;
	    }
	    av.prototype._$8P = function () {
	        return this.x + 0.5 * this.width;
	    };
	    av.prototype._$6P = function () {
	        return this.y + 0.5 * this.height;
	    };
	    av.prototype._$EL = function () {
	        return this.x + this.width;
	    };
	    av.prototype._$5T = function () {
	        return this.y + this.height;
	    };
	    av.prototype._$jL = function (aI, aK, aJ, aH) {
	        this.x = aI;
	        this.y = aK;
	        this.width = aJ;
	        this.height = aH;
	    };
	    av.prototype._$jL = function (aH) {
	        this.x = aH.x;
	        this.y = aH.y;
	        this.width = aH.width;
	        this.height = aH.height;
	    };
	    av.prototype.contains = function (aH, aI) {
	        return this.x <= this.x && this.y <= this.y && this.x <= this.x + this.width && this.y <= this.y + this.height;
	    };
	    av.prototype.expand = function (aH, aI) {
	        this.x -= aH;
	        this.y -= aI;
	        this.width += aH * 2;
	        this.height += aI * 2;
	    };

	    function aG() {}aG._$Z2 = function (bb, bo, bp, a2) {
	        var a1 = bo._$Q2(bb, bp);
	        var a3 = bb._$vs();
	        var ba = bb._$Tr();
	        bo._$zr(a3, ba, a1);
	        if (a1 <= 0) {
	            return a2[a3[0]];
	        } else {
	            if (a1 == 1) {
	                var bj = a2[a3[0]];var bi = a2[a3[1]];var a9 = ba[0];return bj + (bi - bj) * a9 | 0;
	            } else {
	                if (a1 == 2) {
	                    var bj = a2[a3[0]];var bi = a2[a3[1]];var a0 = a2[a3[2]];var aZ = a2[a3[3]];var a9 = ba[0];var a8 = ba[1];var br = bj + (bi - bj) * a9 | 0;var bq = a0 + (aZ - a0) * a9 | 0;return br + (bq - br) * a8 | 0;
	                } else {
	                    if (a1 == 3) {
	                        var aP = a2[a3[0]];var aO = a2[a3[1]];var bn = a2[a3[2]];var bm = a2[a3[3]];var aK = a2[a3[4]];var aJ = a2[a3[5]];var bg = a2[a3[6]];var bf = a2[a3[7]];var a9 = ba[0];var a8 = ba[1];var a6 = ba[2];var bj = aP + (aO - aP) * a9 | 0;var bi = bn + (bm - bn) * a9 | 0;var a0 = aK + (aJ - aK) * a9 | 0;var aZ = bg + (bf - bg) * a9 | 0;var br = bj + (bi - bj) * a8 | 0;var bq = a0 + (aZ - a0) * a8 | 0;return br + (bq - br) * a6 | 0;
	                    } else {
	                        if (a1 == 4) {
	                            var aT = a2[a3[0]];var aS = a2[a3[1]];var bu = a2[a3[2]];var bt = a2[a3[3]];var aN = a2[a3[4]];var aM = a2[a3[5]];var bl = a2[a3[6]];var bk = a2[a3[7]];var be = a2[a3[8]];var bc = a2[a3[9]];var aX = a2[a3[10]];var aW = a2[a3[11]];var a7 = a2[a3[12]];var a5 = a2[a3[13]];var aR = a2[a3[14]];var aQ = a2[a3[15]];var a9 = ba[0];var a8 = ba[1];var a6 = ba[2];var a4 = ba[3];var aP = aT + (aS - aT) * a9 | 0;var aO = bu + (bt - bu) * a9 | 0;var bn = aN + (aM - aN) * a9 | 0;var bm = bl + (bk - bl) * a9 | 0;var aK = be + (bc - be) * a9 | 0;var aJ = aX + (aW - aX) * a9 | 0;var bg = a7 + (a5 - a7) * a9 | 0;var bf = aR + (aQ - aR) * a9 | 0;var bj = aP + (aO - aP) * a8 | 0;var bi = bn + (bm - bn) * a8 | 0;var a0 = aK + (aJ - aK) * a8 | 0;var aZ = bg + (bf - bg) * a8 | 0;var br = bj + (bi - bj) * a6 | 0;var bq = a0 + (aZ - a0) * a6 | 0;return br + (bq - br) * a4 | 0;
	                        } else {
	                            var aV = 1 << a1;
	                            var aY = new Float32Array(aV);
	                            for (var bh = 0; bh < aV; bh++) {
	                                var aI = bh;
	                                var aH = 1;
	                                for (var aL = 0; aL < a1; aL++) {
	                                    aH *= aI % 2 == 0 ? 1 - ba[aL] : ba[aL];
	                                    aI /= 2;
	                                }
	                                aY[bh] = aH;
	                            }
	                            var bs = new Float32Array(aV);
	                            for (var aU = 0; aU < aV; aU++) {
	                                bs[aU] = a2[a3[aU]];
	                            }
	                            var bd = 0;
	                            for (var aU = 0; aU < aV; aU++) {
	                                bd += aY[aU] * bs[aU];
	                            }
	                            return bd + 0.5 | 0;
	                        }
	                    }
	                }
	            }
	        }
	    };
	    aG._$br = function (ba, bo, bp, bg) {
	        var a1 = bo._$Q2(ba, bp);
	        var a2 = ba._$vs();
	        var a9 = ba._$Tr();
	        bo._$zr(a2, a9, a1);
	        if (a1 <= 0) {
	            return bg[a2[0]];
	        } else {
	            if (a1 == 1) {
	                var bj = bg[a2[0]];var bi = bg[a2[1]];var a8 = a9[0];return bj + (bi - bj) * a8;
	            } else {
	                if (a1 == 2) {
	                    var bj = bg[a2[0]];var bi = bg[a2[1]];var a0 = bg[a2[2]];var aZ = bg[a2[3]];var a8 = a9[0];var a7 = a9[1];return (1 - a7) * (bj + (bi - bj) * a8) + a7 * (a0 + (aZ - a0) * a8);
	                } else {
	                    if (a1 == 3) {
	                        var aP = bg[a2[0]];var aO = bg[a2[1]];var bn = bg[a2[2]];var bm = bg[a2[3]];var aK = bg[a2[4]];var aJ = bg[a2[5]];var bf = bg[a2[6]];var be = bg[a2[7]];var a8 = a9[0];var a7 = a9[1];var a5 = a9[2];return (1 - a5) * ((1 - a7) * (aP + (aO - aP) * a8) + a7 * (bn + (bm - bn) * a8)) + a5 * ((1 - a7) * (aK + (aJ - aK) * a8) + a7 * (bf + (be - bf) * a8));
	                    } else {
	                        if (a1 == 4) {
	                            var aT = bg[a2[0]];var aS = bg[a2[1]];var bs = bg[a2[2]];var br = bg[a2[3]];var aN = bg[a2[4]];var aM = bg[a2[5]];var bl = bg[a2[6]];var bk = bg[a2[7]];var bd = bg[a2[8]];var bb = bg[a2[9]];var aX = bg[a2[10]];var aW = bg[a2[11]];var a6 = bg[a2[12]];var a4 = bg[a2[13]];var aR = bg[a2[14]];var aQ = bg[a2[15]];var a8 = a9[0];var a7 = a9[1];var a5 = a9[2];var a3 = a9[3];return (1 - a3) * ((1 - a5) * ((1 - a7) * (aT + (aS - aT) * a8) + a7 * (bs + (br - bs) * a8)) + a5 * ((1 - a7) * (aN + (aM - aN) * a8) + a7 * (bl + (bk - bl) * a8))) + a3 * ((1 - a5) * ((1 - a7) * (bd + (bb - bd) * a8) + a7 * (aX + (aW - aX) * a8)) + a5 * ((1 - a7) * (a6 + (a4 - a6) * a8) + a7 * (aR + (aQ - aR) * a8)));
	                        } else {
	                            var aV = 1 << a1;
	                            var aY = new Float32Array(aV);
	                            for (var bh = 0; bh < aV; bh++) {
	                                var aI = bh;
	                                var aH = 1;
	                                for (var aL = 0; aL < a1; aL++) {
	                                    aH *= aI % 2 == 0 ? 1 - a9[aL] : a9[aL];
	                                    aI /= 2;
	                                }
	                                aY[bh] = aH;
	                            }
	                            var bq = new Float32Array(aV);
	                            for (var aU = 0; aU < aV; aU++) {
	                                bq[aU] = bg[a2[aU]];
	                            }
	                            var bc = 0;
	                            for (var aU = 0; aU < aV; aU++) {
	                                bc += aY[aU] * bq[aU];
	                            }
	                            return bc;
	                        }
	                    }
	                }
	            }
	        }
	    };
	    aG._$Vr = function (bV, bW, a5, aI, bC, a3, bX, bH) {
	        var aN = bW._$Q2(bV, a5);
	        var bw = bV._$vs();
	        var a2 = bV._$Tr();
	        bW._$zr(bw, a2, aN);
	        var aJ = aI * 2;
	        var aQ = bX;
	        if (aN <= 0) {
	            var bI = bw[0];
	            var bq = bC[bI];
	            if (bH == 2 && bX == 0) {
	                P._$jT(bq, 0, a3, 0, aJ);
	            } else {
	                for (var bt = 0; bt < aJ;) {
	                    a3[aQ] = bq[bt++];
	                    a3[aQ + 1] = bq[bt++];
	                    aQ += bH;
	                }
	            }
	        } else {
	            if (aN == 1) {
	                var bq = bC[bw[0]];
	                var bp = bC[bw[1]];
	                var b3 = a2[0];
	                var bT = 1 - b3;
	                for (var bt = 0; bt < aJ;) {
	                    a3[aQ] = bq[bt] * bT + bp[bt] * b3;
	                    ++bt;
	                    a3[aQ + 1] = bq[bt] * bT + bp[bt] * b3;
	                    ++bt;
	                    aQ += bH;
	                }
	            } else {
	                if (aN == 2) {
	                    var bq = bC[bw[0]];
	                    var bp = bC[bw[1]];
	                    var aZ = bC[bw[2]];
	                    var aY = bC[bw[3]];
	                    var b3 = a2[0];
	                    var b1 = a2[1];
	                    var bT = 1 - b3;
	                    var bP = 1 - b1;
	                    var b2 = bP * bT;
	                    var b0 = bP * b3;
	                    var bM = b1 * bT;
	                    var bL = b1 * b3;
	                    for (var bt = 0; bt < aJ;) {
	                        a3[aQ] = b2 * bq[bt] + b0 * bp[bt] + bM * aZ[bt] + bL * aY[bt];
	                        ++bt;
	                        a3[aQ + 1] = b2 * bq[bt] + b0 * bp[bt] + bM * aZ[bt] + bL * aY[bt];
	                        ++bt;
	                        aQ += bH;
	                    }
	                } else {
	                    if (aN == 3) {
	                        var ba = bC[bw[0]];
	                        var a9 = bC[bw[1]];
	                        var aP = bC[bw[2]];
	                        var aO = bC[bw[3]];
	                        var a6 = bC[bw[4]];
	                        var a4 = bC[bw[5]];
	                        var aL = bC[bw[6]];
	                        var aK = bC[bw[7]];
	                        var b3 = a2[0];
	                        var b1 = a2[1];
	                        var bZ = a2[2];
	                        var bT = 1 - b3;
	                        var bP = 1 - b1;
	                        var bN = 1 - bZ;
	                        var b8 = bN * bP * bT;
	                        var b7 = bN * bP * b3;
	                        var bU = bN * b1 * bT;
	                        var bS = bN * b1 * b3;
	                        var b6 = bZ * bP * bT;
	                        var b5 = bZ * bP * b3;
	                        var bQ = bZ * b1 * bT;
	                        var bO = bZ * b1 * b3;
	                        for (var bt = 0; bt < aJ;) {
	                            a3[aQ] = b8 * ba[bt] + b7 * a9[bt] + bU * aP[bt] + bS * aO[bt] + b6 * a6[bt] + b5 * a4[bt] + bQ * aL[bt] + bO * aK[bt];
	                            ++bt;
	                            a3[aQ + 1] = b8 * ba[bt] + b7 * a9[bt] + bU * aP[bt] + bS * aO[bt] + b6 * a6[bt] + b5 * a4[bt] + bQ * aL[bt] + bO * aK[bt];
	                            ++bt;
	                            aQ += bH;
	                        }
	                    } else {
	                        if (aN == 4) {
	                            var bD = bC[bw[0]];
	                            var bB = bC[bw[1]];
	                            var bo = bC[bw[2]];
	                            var bm = bC[bw[3]];
	                            var by = bC[bw[4]];
	                            var bx = bC[bw[5]];
	                            var be = bC[bw[6]];
	                            var bd = bC[bw[7]];
	                            var bG = bC[bw[8]];
	                            var bE = bC[bw[9]];
	                            var bv = bC[bw[10]];
	                            var bu = bC[bw[11]];
	                            var bA = bC[bw[12]];
	                            var bz = bC[bw[13]];
	                            var bn = bC[bw[14]];
	                            var bl = bC[bw[15]];
	                            var b3 = a2[0];
	                            var b1 = a2[1];
	                            var bZ = a2[2];
	                            var bY = a2[3];
	                            var bT = 1 - b3;
	                            var bP = 1 - b1;
	                            var bN = 1 - bZ;
	                            var bK = 1 - bY;
	                            var bk = bK * bN * bP * bT;
	                            var bi = bK * bN * bP * b3;
	                            var aW = bK * bN * b1 * bT;
	                            var aV = bK * bN * b1 * b3;
	                            var bc = bK * bZ * bP * bT;
	                            var bb = bK * bZ * bP * b3;
	                            var aS = bK * bZ * b1 * bT;
	                            var aR = bK * bZ * b1 * b3;
	                            var bs = bY * bN * bP * bT;
	                            var br = bY * bN * bP * b3;
	                            var a1 = bY * bN * b1 * bT;
	                            var a0 = bY * bN * b1 * b3;
	                            var bh = bY * bZ * bP * bT;
	                            var bf = bY * bZ * bP * b3;
	                            var aU = bY * bZ * b1 * bT;
	                            var aT = bY * bZ * b1 * b3;
	                            for (var bt = 0; bt < aJ;) {
	                                a3[aQ] = bk * bD[bt] + bi * bB[bt] + aW * bo[bt] + aV * bm[bt] + bc * by[bt] + bb * bx[bt] + aS * be[bt] + aR * bd[bt] + bs * bG[bt] + br * bE[bt] + a1 * bv[bt] + a0 * bu[bt] + bh * bA[bt] + bf * bz[bt] + aU * bn[bt] + aT * bl[bt];
	                                ++bt;
	                                a3[aQ + 1] = bk * bD[bt] + bi * bB[bt] + aW * bo[bt] + aV * bm[bt] + bc * by[bt] + bb * bx[bt] + aS * be[bt] + aR * bd[bt] + bs * bG[bt] + br * bE[bt] + a1 * bv[bt] + a0 * bu[bt] + bh * bA[bt] + bf * bz[bt] + aU * bn[bt] + aT * bl[bt];
	                                ++bt;
	                                aQ += bH;
	                            }
	                        } else {
	                            var b4 = 1 << aN;
	                            var bJ = new Float32Array(b4);
	                            for (var bj = 0; bj < b4; bj++) {
	                                var aH = bj;
	                                var aM = 1;
	                                for (var bF = 0; bF < aN; bF++) {
	                                    aM *= aH % 2 == 0 ? 1 - a2[bF] : a2[bF];
	                                    aH /= 2;
	                                }
	                                bJ[bj] = aM;
	                            }
	                            var bg = new Float32Array(b4);
	                            for (var aX = 0; aX < b4; aX++) {
	                                bg[aX] = bC[bw[aX]];
	                            }
	                            for (var bt = 0; bt < aJ;) {
	                                var a8 = 0,
	                                    a7 = 0;
	                                var bR = bt + 1;
	                                for (var aX = 0; aX < b4; aX++) {
	                                    a8 += bJ[aX] * bg[aX][bt];
	                                    a7 += bJ[aX] * bg[aX][bR];
	                                }
	                                bt += 2;
	                                a3[aQ] = a8;
	                                a3[aQ + 1] = a7;
	                                aQ += bH;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    };

	    function e() {
	        if (j) {
	            return;
	        }this.x = null;
	        this.y = null;
	    }
	    e.prototype._$HT = function (aH, aI) {
	        this.x = aH;
	        this.y = aI;
	    };
	    e.prototype._$HT = function (aH) {
	        this.x = aH.x;
	        this.y = aH.y;
	    };

	    function ae() {
	        if (j) {
	            return;
	        }this._$gP = null;
	        this._$dr = null;
	        this._$GS = null;
	        this._$qb = null;
	        this._$Lb = null;
	        this._$mS = null;
	        this.clipID = null;
	        this.clipIDList = new Array();
	    }
	    ae._$ur = -2;
	    ae._$ES = 500;
	    ae._$wb = 2;
	    ae._$8S = 3;
	    ae._$52 = ae._$ES;
	    ae._$R2 = ae._$ES;
	    ae._$or = function () {
	        return ae._$52;
	    };
	    ae._$Pr = function () {
	        return ae._$R2;
	    };
	    ae.prototype.convertClipIDForV2_11 = function (aI) {
	        var aH = [];if (aI == null) {
	            return null;
	        }if (aI.length == 0) {
	            return null;
	        }if (!/,/.test(aI)) {
	            aH.push(aI.id);return aH;
	        }aH = aI.id.split(',');return aH;
	    };
	    ae.prototype._$F0 = function (aH) {
	        this._$gP = aH._$nP();
	        this._$dr = aH._$nP();
	        this._$GS = aH._$nP();
	        this._$qb = aH._$6L();
	        this._$Lb = aH._$cS();
	        this._$mS = aH._$Tb();
	        if (aH.getFormatVersion() >= ay._$T7) {
	            this.clipID = aH._$nP();
	            this.clipIDList = this.convertClipIDForV2_11(this.clipID);
	        } else {
	            this.clipIDList = [];
	        }this._$MS(this._$Lb);
	    };
	    ae.prototype.getClipIDList = function () {
	        return this.clipIDList;
	    };
	    ae.prototype.init = function (aH) {};
	    ae.prototype._$Nr = function (aH, aI) {
	        aI._$IS[0] = false;
	        aI._$Us = aG._$Z2(aH, this._$GS, aI._$IS, this._$Lb);
	        if (Q._$Zs) ; else {
	            if (aI._$IS[0]) {
	                return;
	            }
	        }aI._$7s = aG._$br(aH, this._$GS, aI._$IS, this._$mS);
	    };
	    ae.prototype._$2b = function (aH, aI) {};
	    ae.prototype.getDrawDataID = function () {
	        return this._$gP;
	    };
	    ae.prototype._$j2 = function (aH) {
	        this._$gP = aH;
	    };
	    ae.prototype.getOpacity = function (aH, aI) {
	        return aI._$7s;
	    };
	    ae.prototype._$zS = function (aH, aI) {
	        return aI._$Us;
	    };
	    ae.prototype._$MS = function (aJ) {
	        for (var aI = aJ.length - 1; aI >= 0; --aI) {
	            var aH = aJ[aI];if (aH < ae._$52) {
	                ae._$52 = aH;
	            } else {
	                if (aH > ae._$R2) {
	                    ae._$R2 = aH;
	                }
	            }
	        }
	    };
	    ae.prototype.getTargetBaseDataID = function () {
	        return this._$dr;
	    };
	    ae.prototype._$gs = function (aH) {
	        this._$dr = aH;
	    };
	    ae.prototype._$32 = function () {
	        return this._$dr != null && this._$dr != n._$2o();
	    };
	    ae.prototype.preDraw = function (aJ, aH, aI) {};
	    ae.prototype.draw = function (aJ, aH, aI) {};
	    ae.prototype.getType = function () {};
	    ae.prototype._$B2 = function (aI, aH, aJ) {};

	    function ax() {
	        if (j) {
	            return;
	        }this._$Eb = ax._$ps;
	        this._$lT = 1;
	        this._$C0 = 1;
	        this._$tT = 1;
	        this._$WL = 1;
	        this.culling = false;
	        this.matrix4x4 = new Float32Array(16);
	        this.premultipliedAlpha = false;
	        this.anisotropy = 0;
	        this.clippingProcess = ax.CLIPPING_PROCESS_NONE;
	        this.clipBufPre_clipContextMask = null;
	        this.clipBufPre_clipContextDraw = null;
	        this.CHANNEL_COLORS = new Array();
	    }
	    ax._$ps = 32;
	    ax.CLIPPING_PROCESS_NONE = 0;
	    ax.CLIPPING_PROCESS_OVERWRITE_ALPHA = 1;
	    ax.CLIPPING_PROCESS_MULTIPLY_ALPHA = 2;
	    ax.CLIPPING_PROCESS_DRAW = 3;
	    ax.CLIPPING_PROCESS_CLEAR_ALPHA = 4;
	    ax.prototype.setChannelFlagAsColor = function (aH, aI) {
	        this.CHANNEL_COLORS[aH] = aI;
	    };
	    ax.prototype.getChannelFlagAsColor = function (aH) {
	        return this.CHANNEL_COLORS[aH];
	    };
	    ax.prototype._$ZT = function () {};
	    ax.prototype._$Uo = function (aM, aK, aJ, aL, aN, aI, aH) {};
	    ax.prototype._$Rs = function () {
	        return -1;
	    };
	    ax.prototype._$Ds = function (aH) {};
	    ax.prototype.setBaseColor = function (aK, aJ, aI, aH) {
	        if (aK < 0) {
	            aK = 0;
	        } else {
	            if (aK > 1) {
	                aK = 1;
	            }
	        }
	        if (aJ < 0) {
	            aJ = 0;
	        } else {
	            if (aJ > 1) {
	                aJ = 1;
	            }
	        }
	        if (aI < 0) {
	            aI = 0;
	        } else {
	            if (aI > 1) {
	                aI = 1;
	            }
	        }
	        if (aH < 0) {
	            aH = 0;
	        } else {
	            if (aH > 1) {
	                aH = 1;
	            }
	        }this._$lT = aK;
	        this._$C0 = aJ;
	        this._$tT = aI;
	        this._$WL = aH;
	    };
	    ax.prototype._$WP = function (aH) {
	        this.culling = aH;
	    };
	    ax.prototype.setMatrix = function (aH) {
	        for (var aI = 0; aI < 16; aI++) {
	            this.matrix4x4[aI] = aH[aI];
	        }
	    };
	    ax.prototype._$IT = function () {
	        return this.matrix4x4;
	    };
	    ax.prototype.setPremultipliedAlpha = function (aH) {
	        this.premultipliedAlpha = aH;
	    };
	    ax.prototype.isPremultipliedAlpha = function () {
	        return this.premultipliedAlpha;
	    };
	    ax.prototype.setAnisotropy = function (aH) {
	        this.anisotropy = aH;
	    };
	    ax.prototype.getAnisotropy = function () {
	        return this.anisotropy;
	    };
	    ax.prototype.getClippingProcess = function () {
	        return this.clippingProcess;
	    };
	    ax.prototype.setClippingProcess = function (aH) {
	        this.clippingProcess = aH;
	    };
	    ax.prototype.setClipBufPre_clipContextForMask = function (aH) {
	        this.clipBufPre_clipContextMask = aH;
	    };
	    ax.prototype.getClipBufPre_clipContextMask = function () {
	        return this.clipBufPre_clipContextMask;
	    };
	    ax.prototype.setClipBufPre_clipContextForDraw = function (aH) {
	        this.clipBufPre_clipContextDraw = aH;
	    };
	    ax.prototype.getClipBufPre_clipContextDraw = function () {
	        return this.clipBufPre_clipContextDraw;
	    };

	    function o() {
	        if (j) {
	            return;
	        }this.a = 1;
	        this.r = 1;
	        this.g = 1;
	        this.b = 1;
	        this.scale = 1;
	        this._$ho = 1;
	        this.blendMode = Q.L2D_COLOR_BLEND_MODE_MULT;
	    }

	    function c() {
	        if (j) {
	            return;
	        }this._$kP = null;
	        this._$dr = null;
	        this._$Ai = true;
	        this._$mS = null;
	    }
	    c._$ur = -2;
	    c._$c2 = 1;
	    c._$_b = 2;
	    c.prototype._$F0 = function (aH) {
	        this._$kP = aH._$nP();
	        this._$dr = aH._$nP();
	    };
	    c.prototype.readV2_opacity = function (aH) {
	        if (aH.getFormatVersion() >= ay.LIVE2D_FORMAT_VERSION_V2_10_SDK2) {
	            this._$mS = aH._$Tb();
	        }
	    };
	    c.prototype.init = function (aH) {};
	    c.prototype._$Nr = function (aI, aH) {};
	    c.prototype.interpolateOpacity = function (aJ, aK, aI, aH) {
	        if (this._$mS == null) {
	            aI.setInterpolatedOpacity(1);
	        } else {
	            aI.setInterpolatedOpacity(aG._$br(aJ, aK, aH, this._$mS));
	        }
	    };
	    c.prototype._$2b = function (aI, aH) {};
	    c.prototype._$nb = function (aL, aK, aM, aH, aI, aJ, aN) {};
	    c.prototype.getType = function () {};
	    c.prototype._$gs = function (aH) {
	        this._$dr = aH;
	    };
	    c.prototype._$a2 = function (aH) {
	        this._$kP = aH;
	    };
	    c.prototype.getTargetBaseDataID = function () {
	        return this._$dr;
	    };
	    c.prototype.getBaseDataID = function () {
	        return this._$kP;
	    };
	    c.prototype._$32 = function () {
	        return this._$dr != null && this._$dr != n._$2o();
	    };

	    function P() {}P._$W2 = 0;
	    P._$CS = P._$W2;
	    P._$Mo = function () {
	        return true;
	    };
	    P._$XP = function (aI) {
	        try {
	            var aJ = getTimeMSec();while (getTimeMSec() - aJ < aI) {}
	        } catch (aH) {
	            aH._$Rb();
	        }
	    };
	    P.getUserTimeMSec = function () {
	        return P._$CS == P._$W2 ? P.getSystemTimeMSec() : P._$CS;
	    };
	    P.setUserTimeMSec = function (aH) {
	        P._$CS = aH;
	    };
	    P.updateUserTimeMSec = function () {
	        return P._$CS = P.getSystemTimeMSec();
	    };
	    P.getTimeMSec = function () {
	        return new Date().getTime();
	    };
	    P.getSystemTimeMSec = function () {
	        return new Date().getTime();
	    };
	    P._$Q = function (aH) {};
	    P._$jT = function (aM, aJ, aI, aL, aH) {
	        for (var aK = 0; aK < aH; aK++) {
	            aI[aL + aK] = aM[aJ + aK];
	        }
	    };

	    function aA() {
	        if (j) {
	            return;
	        }this._$VP = 0;
	        this._$wL = null;
	        this._$GP = null;
	        this._$8o = aA._$ds;
	        this._$2r = -1;
	        this._$O2 = 0;
	        this._$ri = 0;
	    }
	    aA._$ds = -2;
	    aA.prototype._$F0 = function (aH) {
	        this._$wL = aH._$nP();
	        this._$VP = aH._$6L();
	        this._$GP = aH._$nP();
	    };
	    aA.prototype.getParamIndex = function (aH) {
	        if (this._$2r != aH) {
	            this._$8o = aA._$ds;
	        }return this._$8o;
	    };
	    aA.prototype._$Pb = function (aI, aH) {
	        this._$8o = aI;
	        this._$2r = aH;
	    };
	    aA.prototype.getParamID = function () {
	        return this._$wL;
	    };
	    aA.prototype._$yP = function (aH) {
	        this._$wL = aH;
	    };
	    aA.prototype._$N2 = function () {
	        return this._$VP;
	    };
	    aA.prototype._$d2 = function () {
	        return this._$GP;
	    };
	    aA.prototype._$t2 = function (aI, aH) {
	        this._$VP = aI;
	        this._$GP = aH;
	    };
	    aA.prototype._$Lr = function () {
	        return this._$O2;
	    };
	    aA.prototype._$wr = function (aH) {
	        this._$O2 = aH;
	    };
	    aA.prototype._$SL = function () {
	        return this._$ri;
	    };
	    aA.prototype._$AL = function (aH) {
	        this._$ri = aH;
	    };

	    function G() {}G.startsWith = function (aJ, aL, aK) {
	        var aH = aL + aK.length;if (aH >= aJ.length) {
	            return false;
	        }for (var aI = aL; aI < aH; aI++) {
	            if (G.getChar(aJ, aI) != aK.charAt(aI - aL)) {
	                return false;
	            }
	        }return true;
	    };
	    G.getChar = function (aI, aH) {
	        return String.fromCharCode(aI.getUint8(aH));
	    };
	    G.createString = function (aM, aL, aJ) {
	        var aH = new ArrayBuffer(aJ * 2);var aK = new Uint16Array(aH);for (var aI = 0; aI < aJ; aI++) {
	            aK[aI] = aM.getUint8(aL + aI);
	        }return String.fromCharCode.apply(null, aK);
	    };
	    G._$LS = function (aP, aM, aR, aK) {
	        if (aP instanceof ArrayBuffer) {
	            aP = new DataView(aP);
	        }
	        var aL = aR;
	        var aJ = false;
	        var aQ = false;
	        var aS = 0;
	        var aO = G.getChar(aP, aL);
	        if (aO == '-') {
	            aJ = true;
	            aL++;
	        }
	        var aN = false;
	        for (; aL < aM; aL++) {
	            aO = G.getChar(aP, aL);
	            switch (aO) {
	                case '0':
	                    aS = aS * 10;
	                    break;
	                case '1':
	                    aS = aS * 10 + 1;
	                    break;
	                case '2':
	                    aS = aS * 10 + 2;
	                    break;
	                case '3':
	                    aS = aS * 10 + 3;
	                    break;
	                case '4':
	                    aS = aS * 10 + 4;
	                    break;
	                case '5':
	                    aS = aS * 10 + 5;
	                    break;
	                case '6':
	                    aS = aS * 10 + 6;
	                    break;
	                case '7':
	                    aS = aS * 10 + 7;
	                    break;
	                case '8':
	                    aS = aS * 10 + 8;
	                    break;
	                case '9':
	                    aS = aS * 10 + 9;
	                    break;
	                case '.':
	                    aQ = true;
	                    aL++;
	                    aN = true;
	                    break;
	                default:
	                    aN = true;
	                    break;
	            }
	            if (aN) {
	                break;
	            }
	        }
	        if (aQ) {
	            var aI = 0.1;
	            var aH = false;
	            for (; aL < aM; aL++) {
	                aO = G.getChar(aP, aL);
	                switch (aO) {
	                    case '0':
	                        break;
	                    case '1':
	                        aS += aI * 1;
	                        break;
	                    case '2':
	                        aS += aI * 2;
	                        break;
	                    case '3':
	                        aS += aI * 3;
	                        break;
	                    case '4':
	                        aS += aI * 4;
	                        break;
	                    case '5':
	                        aS += aI * 5;
	                        break;
	                    case '6':
	                        aS += aI * 6;
	                        break;
	                    case '7':
	                        aS += aI * 7;
	                        break;
	                    case '8':
	                        aS += aI * 8;
	                        break;
	                    case '9':
	                        aS += aI * 9;
	                        break;
	                    default:
	                        aH = true;
	                        break;
	                }
	                aI *= 0.1;
	                if (aH) {
	                    break;
	                }
	            }
	        }
	        if (aJ) {
	            aS = -aS;
	        }aK[0] = aL;
	        return aS;
	    };

	    function g() {
	        if (j) {
	            return;
	        }this._$Ob = null;
	    }g.prototype._$zP = function () {
	        this._$Ob = new Array();
	    };
	    g.prototype._$F0 = function (aH) {
	        this._$Ob = aH._$nP();
	    };
	    g.prototype._$Ur = function (aK) {
	        if (aK._$WS()) {
	            return true;
	        }var aH = aK._$v2();for (var aJ = this._$Ob.length - 1; aJ >= 0; --aJ) {
	            var aI = this._$Ob[aJ].getParamIndex(aH);if (aI == aA._$ds) {
	                aI = aK.getParamIndex(this._$Ob[aJ].getParamID());
	            }if (aK._$Xb(aI)) {
	                return true;
	            }
	        }return false;
	    };
	    g.prototype._$Q2 = function (aL, aV) {
	        var aX = this._$Ob.length;
	        var aJ = aL._$v2();
	        var aN = 0;
	        var aI = void 0;
	        var aQ = void 0;
	        for (var aK = 0; aK < aX; aK++) {
	            var aH = this._$Ob[aK];
	            aI = aH.getParamIndex(aJ);
	            if (aI == aA._$ds) {
	                aI = aL.getParamIndex(aH.getParamID());
	                aH._$Pb(aI, aJ);
	            }
	            if (aI < 0) {
	                throw new Exception('err 23242 : ' + aH.getParamID());
	            }
	            var aU = aI < 0 ? 0 : aL.getParamFloat(aI);
	            aQ = aH._$N2();
	            var aM = aH._$d2();
	            var aP = -1;
	            var aT = 0;
	            var aS;
	            var aR;
	            if (aQ < 1) ; else {
	                if (aQ == 1) {
	                    aS = aM[0];
	                    if (aS - aw._$J < aU && aU < aS + aw._$J) {
	                        aP = 0;
	                        aT = 0;
	                    } else {
	                        aP = 0;
	                        aV[0] = true;
	                    }
	                } else {
	                    aS = aM[0];
	                    if (aU < aS - aw._$J) {
	                        aP = 0;
	                        aV[0] = true;
	                    } else {
	                        if (aU < aS + aw._$J) {
	                            aP = 0;
	                        } else {
	                            var aW = false;
	                            for (var aO = 1; aO < aQ; ++aO) {
	                                aR = aM[aO];
	                                if (aU < aR + aw._$J) {
	                                    if (aR - aw._$J < aU) {
	                                        aP = aO;
	                                    } else {
	                                        aP = aO - 1;
	                                        aT = (aU - aS) / (aR - aS);
	                                        aN++;
	                                    }
	                                    aW = true;
	                                    break;
	                                }
	                                aS = aR;
	                            }
	                            if (!aW) {
	                                aP = aQ - 1;
	                                aT = 0;
	                                aV[0] = true;
	                            }
	                        }
	                    }
	                }
	            }
	            aH._$wr(aP);
	            aH._$AL(aT);
	        }
	        return aN;
	    };
	    g.prototype._$zr = function (aN, aT, aP) {
	        var aR = 1 << aP;
	        if (aR + 1 > aw._$Qb) {
	            console.log('err 23245\n');
	        }
	        var aS = this._$Ob.length;
	        var aK = 1;
	        var aH = 1;
	        var aJ = 0;
	        for (var aQ = 0; aQ < aR; ++aQ) {
	            aN[aQ] = 0;
	        }
	        for (var aL = 0; aL < aS; ++aL) {
	            var aI = this._$Ob[aL];
	            if (aI._$SL() == 0) {
	                var aO = aI._$Lr() * aK;if (aO < 0 && Q._$3T) {
	                    throw new Exception('err 23246');
	                }for (var aQ = 0; aQ < aR; ++aQ) {
	                    aN[aQ] += aO;
	                }
	            } else {
	                var aO = aK * aI._$Lr();
	                var aM = aK * (aI._$Lr() + 1);
	                for (var aQ = 0; aQ < aR; ++aQ) {
	                    aN[aQ] += (aQ / aH | 0) % 2 == 0 ? aO : aM;
	                }aT[aJ++] = aI._$SL();
	                aH *= 2;
	            }
	            aK *= aI._$N2();
	        }
	        aN[aR] = 65535;
	        aT[aJ] = -1;
	    };
	    g.prototype._$h2 = function (aJ, aH, aK) {
	        var aM = new Float32Array(aH);
	        for (var aL = 0; aL < aH; ++aL) {
	            aM[aL] = aK[aL];
	        }
	        var aI = new aA();
	        aI._$yP(aJ);
	        aI._$t2(aH, aM);
	        this._$Ob.push(aI);
	    };
	    g.prototype._$J2 = function (aO) {
	        var aN = aO;
	        var aM = this._$Ob.length;
	        for (var aK = 0; aK < aM; ++aK) {
	            var aI = this._$Ob[aK];
	            var aH = aI._$N2();
	            var aJ = aN % aI._$N2();
	            var aL = aI._$d2()[aJ];
	            console.log('%s[%d]=%7.2f / ', aI.getParamID(), aJ, aL);
	            aN /= aH;
	        }
	        console.log('\n');
	    };
	    g.prototype.getParamCount = function () {
	        return this._$Ob.length;
	    };
	    g.prototype._$zs = function () {
	        return this._$Ob;
	    };

	    function ac() {
	        this.m = new Float32Array(16);
	        this.identity();
	    }
	    ac.prototype.identity = function () {
	        for (var aH = 0; aH < 16; aH++) {
	            this.m[aH] = aH % 5 == 0 ? 1 : 0;
	        }
	    };
	    ac.prototype.getArray = function () {
	        return this.m;
	    };
	    ac.prototype.getCopyMatrix = function () {
	        return new Float32Array(this.m);
	    };
	    ac.prototype.setMatrix = function (aI) {
	        if (aI == null || aI.length != 16) {
	            return;
	        }for (var aH = 0; aH < 16; aH++) {
	            this.m[aH] = aI[aH];
	        }
	    };
	    ac.prototype.mult = function (aH, aJ, aI) {
	        if (aJ == null) {
	            return null;
	        }if (this == aJ) {
	            this.mult_safe(this.m, aH.m, aJ.m, aI);
	        } else {
	            this.mult_fast(this.m, aH.m, aJ.m, aI);
	        }return aJ;
	    };
	    ac.prototype.mult_safe = function (aI, aH, aM, aJ) {
	        if (aI == aM) {
	            var aL = new Array(16);
	            this.mult_fast(aI, aH, aL, aJ);
	            for (var aK = 15; aK >= 0; --aK) {
	                aM[aK] = aL[aK];
	            }
	        } else {
	            this.mult_fast(aI, aH, aM, aJ);
	        }
	    };
	    ac.prototype.mult_fast = function (aI, aH, aK, aJ) {
	        if (aJ) {
	            aK[0] = aI[0] * aH[0] + aI[4] * aH[1] + aI[8] * aH[2];
	            aK[4] = aI[0] * aH[4] + aI[4] * aH[5] + aI[8] * aH[6];
	            aK[8] = aI[0] * aH[8] + aI[4] * aH[9] + aI[8] * aH[10];
	            aK[12] = aI[0] * aH[12] + aI[4] * aH[13] + aI[8] * aH[14] + aI[12];
	            aK[1] = aI[1] * aH[0] + aI[5] * aH[1] + aI[9] * aH[2];
	            aK[5] = aI[1] * aH[4] + aI[5] * aH[5] + aI[9] * aH[6];
	            aK[9] = aI[1] * aH[8] + aI[5] * aH[9] + aI[9] * aH[10];
	            aK[13] = aI[1] * aH[12] + aI[5] * aH[13] + aI[9] * aH[14] + aI[13];
	            aK[2] = aI[2] * aH[0] + aI[6] * aH[1] + aI[10] * aH[2];
	            aK[6] = aI[2] * aH[4] + aI[6] * aH[5] + aI[10] * aH[6];
	            aK[10] = aI[2] * aH[8] + aI[6] * aH[9] + aI[10] * aH[10];
	            aK[14] = aI[2] * aH[12] + aI[6] * aH[13] + aI[10] * aH[14] + aI[14];
	            aK[3] = aK[7] = aK[11] = 0;
	            aK[15] = 1;
	        } else {
	            aK[0] = aI[0] * aH[0] + aI[4] * aH[1] + aI[8] * aH[2] + aI[12] * aH[3];
	            aK[4] = aI[0] * aH[4] + aI[4] * aH[5] + aI[8] * aH[6] + aI[12] * aH[7];
	            aK[8] = aI[0] * aH[8] + aI[4] * aH[9] + aI[8] * aH[10] + aI[12] * aH[11];
	            aK[12] = aI[0] * aH[12] + aI[4] * aH[13] + aI[8] * aH[14] + aI[12] * aH[15];
	            aK[1] = aI[1] * aH[0] + aI[5] * aH[1] + aI[9] * aH[2] + aI[13] * aH[3];
	            aK[5] = aI[1] * aH[4] + aI[5] * aH[5] + aI[9] * aH[6] + aI[13] * aH[7];
	            aK[9] = aI[1] * aH[8] + aI[5] * aH[9] + aI[9] * aH[10] + aI[13] * aH[11];
	            aK[13] = aI[1] * aH[12] + aI[5] * aH[13] + aI[9] * aH[14] + aI[13] * aH[15];
	            aK[2] = aI[2] * aH[0] + aI[6] * aH[1] + aI[10] * aH[2] + aI[14] * aH[3];
	            aK[6] = aI[2] * aH[4] + aI[6] * aH[5] + aI[10] * aH[6] + aI[14] * aH[7];
	            aK[10] = aI[2] * aH[8] + aI[6] * aH[9] + aI[10] * aH[10] + aI[14] * aH[11];
	            aK[14] = aI[2] * aH[12] + aI[6] * aH[13] + aI[10] * aH[14] + aI[14] * aH[15];
	            aK[3] = aI[3] * aH[0] + aI[7] * aH[1] + aI[11] * aH[2] + aI[15] * aH[3];
	            aK[7] = aI[3] * aH[4] + aI[7] * aH[5] + aI[11] * aH[6] + aI[15] * aH[7];
	            aK[11] = aI[3] * aH[8] + aI[7] * aH[9] + aI[11] * aH[10] + aI[15] * aH[11];
	            aK[15] = aI[3] * aH[12] + aI[7] * aH[13] + aI[11] * aH[14] + aI[15] * aH[15];
	        }
	    };
	    ac.prototype.translate = function (aH, aJ, aI) {
	        this.m[12] = this.m[0] * aH + this.m[4] * aJ + this.m[8] * aI + this.m[12];
	        this.m[13] = this.m[1] * aH + this.m[5] * aJ + this.m[9] * aI + this.m[13];
	        this.m[14] = this.m[2] * aH + this.m[6] * aJ + this.m[10] * aI + this.m[14];
	        this.m[15] = this.m[3] * aH + this.m[7] * aJ + this.m[11] * aI + this.m[15];
	    };
	    ac.prototype.scale = function (aJ, aI, aH) {
	        this.m[0] *= aJ;
	        this.m[4] *= aI;
	        this.m[8] *= aH;
	        this.m[1] *= aJ;
	        this.m[5] *= aI;
	        this.m[9] *= aH;
	        this.m[2] *= aJ;
	        this.m[6] *= aI;
	        this.m[10] *= aH;
	        this.m[3] *= aJ;
	        this.m[7] *= aI;
	        this.m[11] *= aH;
	    };
	    ac.prototype.rotateX = function (aH) {
	        var aK = aC.fcos(aH);
	        var aJ = aC._$9(aH);
	        var aI = this.m[4];
	        this.m[4] = aI * aK + this.m[8] * aJ;
	        this.m[8] = aI * -aJ + this.m[8] * aK;
	        aI = this.m[5];
	        this.m[5] = aI * aK + this.m[9] * aJ;
	        this.m[9] = aI * -aJ + this.m[9] * aK;
	        aI = this.m[6];
	        this.m[6] = aI * aK + this.m[10] * aJ;
	        this.m[10] = aI * -aJ + this.m[10] * aK;
	        aI = this.m[7];
	        this.m[7] = aI * aK + this.m[11] * aJ;
	        this.m[11] = aI * -aJ + this.m[11] * aK;
	    };
	    ac.prototype.rotateY = function (aH) {
	        var aK = aC.fcos(aH);
	        var aJ = aC._$9(aH);
	        var aI = this.m[0];
	        this.m[0] = aI * aK + this.m[8] * -aJ;
	        this.m[8] = aI * aJ + this.m[8] * aK;
	        aI = this.m[1];
	        this.m[1] = aI * aK + this.m[9] * -aJ;
	        this.m[9] = aI * aJ + this.m[9] * aK;
	        aI = m[2];
	        this.m[2] = aI * aK + this.m[10] * -aJ;
	        this.m[10] = aI * aJ + this.m[10] * aK;
	        aI = m[3];
	        this.m[3] = aI * aK + this.m[11] * -aJ;
	        this.m[11] = aI * aJ + this.m[11] * aK;
	    };
	    ac.prototype.rotateZ = function (aH) {
	        var aK = aC.fcos(aH);
	        var aJ = aC._$9(aH);
	        var aI = this.m[0];
	        this.m[0] = aI * aK + this.m[4] * aJ;
	        this.m[4] = aI * -aJ + this.m[4] * aK;
	        aI = this.m[1];
	        this.m[1] = aI * aK + this.m[5] * aJ;
	        this.m[5] = aI * -aJ + this.m[5] * aK;
	        aI = this.m[2];
	        this.m[2] = aI * aK + this.m[6] * aJ;
	        this.m[6] = aI * -aJ + this.m[6] * aK;
	        aI = this.m[3];
	        this.m[3] = aI * aK + this.m[7] * aJ;
	        this.m[7] = aI * -aJ + this.m[7] * aK;
	    };

	    function Z(aH) {
	        if (j) {
	            return;
	        }ak.prototype.constructor.call(this, aH);
	    }Z.prototype = new ak();
	    Z._$tP = new Object();
	    Z._$27 = function () {
	        Z._$tP.clear();
	    };
	    Z.getID = function (aH) {
	        var aI = Z._$tP[aH];
	        if (aI == null) {
	            aI = new Z(aH);
	            Z._$tP[aH] = aI;
	        }
	        return aI;
	    };
	    Z.prototype._$3s = function () {
	        return new Z();
	    };

	    function aD() {
	        if (j) {
	            return;
	        }this._$7 = 1;
	        this._$f = 0;
	        this._$H = 0;
	        this._$g = 1;
	        this._$k = 0;
	        this._$w = 0;
	        this._$hi = STATE_IDENTITY;
	        this._$Z = _$pS;
	    }
	    aD._$kS = -1;
	    aD._$pS = 0;
	    aD._$hb = 1;
	    aD.STATE_IDENTITY = 0;
	    aD._$gb = 1;
	    aD._$fo = 2;
	    aD._$go = 4;
	    aD.prototype.transform = function (aK, aI, aH) {
	        var aT = void 0,
	            aS = void 0,
	            aR = void 0,
	            aM = void 0,
	            aL = void 0,
	            aJ = void 0;
	        var aQ = 0;
	        var aN = 0;
	        switch (this._$hi) {
	            default:
	                return;
	            case aD._$go | aD._$fo | aD._$gb:
	                aT = this._$7;
	                aS = this._$H;
	                aR = this._$k;
	                aM = this._$f;
	                aL = this._$g;
	                aJ = this._$w;
	                while (--aH >= 0) {
	                    var aP = aK[aQ++];
	                    var aO = aK[aQ++];
	                    aI[aN++] = aT * aP + aS * aO + aR;
	                    aI[aN++] = aM * aP + aL * aO + aJ;
	                }
	                return;
	            case aD._$go | aD._$fo:
	                aT = this._$7;
	                aS = this._$H;
	                aM = this._$f;
	                aL = this._$g;
	                while (--aH >= 0) {
	                    var aP = aK[aQ++];
	                    var aO = aK[aQ++];
	                    aI[aN++] = aT * aP + aS * aO;
	                    aI[aN++] = aM * aP + aL * aO;
	                }
	                return;
	            case aD._$go | aD._$gb:
	                aS = this._$H;
	                aR = this._$k;
	                aM = this._$f;
	                aJ = this._$w;
	                while (--aH >= 0) {
	                    var aP = aK[aQ++];
	                    aI[aN++] = aS * aK[aQ++] + aR;
	                    aI[aN++] = aM * aP + aJ;
	                }
	                return;
	            case aD._$go:
	                aS = this._$H;
	                aM = this._$f;
	                while (--aH >= 0) {
	                    var aP = aK[aQ++];
	                    aI[aN++] = aS * aK[aQ++];
	                    aI[aN++] = aM * aP;
	                }
	                return;
	            case aD._$fo | aD._$gb:
	                aT = this._$7;
	                aR = this._$k;
	                aL = this._$g;
	                aJ = this._$w;
	                while (--aH >= 0) {
	                    aI[aN++] = aT * aK[aQ++] + aR;
	                    aI[aN++] = aL * aK[aQ++] + aJ;
	                }
	                return;
	            case aD._$fo:
	                aT = this._$7;
	                aL = this._$g;
	                while (--aH >= 0) {
	                    aI[aN++] = aT * aK[aQ++];
	                    aI[aN++] = aL * aK[aQ++];
	                }
	                return;
	            case aD._$gb:
	                aR = this._$k;
	                aJ = this._$w;
	                while (--aH >= 0) {
	                    aI[aN++] = aK[aQ++] + aR;
	                    aI[aN++] = aK[aQ++] + aJ;
	                }
	                return;
	            case aD.STATE_IDENTITY:
	                if (aK != aI || aQ != aN) {
	                    P._$jT(aK, aQ, aI, aN, aH * 2);
	                }
	        }
	    };
	    aD.prototype.update = function () {
	        if (this._$H == 0 && this._$f == 0) {
	            if (this._$7 == 1 && this._$g == 1) {
	                if (this._$k == 0 && this._$w == 0) {
	                    this._$hi = aD.STATE_IDENTITY;
	                    this._$Z = aD._$pS;
	                } else {
	                    this._$hi = aD._$gb;
	                    this._$Z = aD._$hb;
	                }
	            } else {
	                if (this._$k == 0 && this._$w == 0) {
	                    this._$hi = aD._$fo;
	                    this._$Z = aD._$kS;
	                } else {
	                    this._$hi = aD._$fo | aD._$gb;
	                    this._$Z = aD._$kS;
	                }
	            }
	        } else {
	            if (this._$7 == 0 && this._$g == 0) {
	                if (this._$k == 0 && this._$w == 0) {
	                    this._$hi = aD._$go;
	                    this._$Z = aD._$kS;
	                } else {
	                    this._$hi = aD._$go | aD._$gb;
	                    this._$Z = aD._$kS;
	                }
	            } else {
	                if (this._$k == 0 && this._$w == 0) {
	                    this._$hi = aD._$go | aD._$fo;
	                    this._$Z = aD._$kS;
	                } else {
	                    this._$hi = aD._$go | aD._$fo | aD._$gb;
	                    this._$Z = aD._$kS;
	                }
	            }
	        }
	    };
	    aD.prototype._$RT = function (aK) {
	        this._$IT(aK);
	        var aJ = aK[0];
	        var aH = aK[2];
	        var aN = aK[1];
	        var aM = aK[3];
	        var aI = Math.sqrt(aJ * aJ + aN * aN);
	        var aL = aJ * aM - aH * aN;
	        if (aI == 0) {
	            if (Q._$so) {
	                console.log('affine._$RT() / rt==0');
	            }
	        } else {
	            aK[0] = aI;
	            aK[1] = aL / aI;
	            aK[2] = (aN * aM + aJ * aH) / aL;
	            aK[3] = Math.atan2(aN, aJ);
	        }
	    };
	    aD.prototype._$ho = function (aN, aM, aI, aH) {
	        var aL = new Float32Array(6);
	        var aK = new Float32Array(6);
	        aN._$RT(aL);
	        aM._$RT(aK);
	        var aJ = new Float32Array(6);
	        aJ[0] = aL[0] + (aK[0] - aL[0]) * aI;
	        aJ[1] = aL[1] + (aK[1] - aL[1]) * aI;
	        aJ[2] = aL[2] + (aK[2] - aL[2]) * aI;
	        aJ[3] = aL[3] + (aK[3] - aL[3]) * aI;
	        aJ[4] = aL[4] + (aK[4] - aL[4]) * aI;
	        aJ[5] = aL[5] + (aK[5] - aL[5]) * aI;
	        aH._$CT(aJ);
	    };
	    aD.prototype._$CT = function (aJ) {
	        var aI = Math.cos(aJ[3]);
	        var aH = Math.sin(aJ[3]);
	        this._$7 = aJ[0] * aI;
	        this._$f = aJ[0] * aH;
	        this._$H = aJ[1] * (aJ[2] * aI - aH);
	        this._$g = aJ[1] * (aJ[2] * aH + aI);
	        this._$k = aJ[4];
	        this._$w = aJ[5];
	        this.update();
	    };
	    aD.prototype._$IT = function (aH) {
	        aH[0] = this._$7;
	        aH[1] = this._$f;
	        aH[2] = this._$H;
	        aH[3] = this._$g;
	        aH[4] = this._$k;
	        aH[5] = this._$w;
	    };

	    function Y() {
	        if (j) {
	            return;
	        }ah.prototype.constructor.call(this);
	        this.motions = new Array();
	        this._$7r = null;
	        this._$7r = Y._$Co++;
	        this._$D0 = 30;
	        this._$yT = 0;
	        this._$E = true;
	        this.loopFadeIn = true;
	        this._$AS = -1;
	        _$a0();
	    }
	    Y.prototype = new ah();
	    Y._$cs = 'VISIBLE:';
	    Y._$ar = 'LAYOUT:';
	    Y._$Co = 0;
	    Y._$D2 = [];
	    Y._$1T = 1;
	    Y.loadMotion = function (aR) {
	        var aM = new Y();
	        var aI = [0];
	        var aP = aR.length;
	        aM._$yT = 0;
	        for (var aJ = 0; aJ < aP; ++aJ) {
	            var aQ = aR[aJ] & 255;
	            if (aQ == '\n' || aQ == '\r') {
	                continue;
	            }
	            if (aQ == '#') {
	                for (; aJ < aP; ++aJ) {
	                    if (aR[aJ] == '\n' || aR[aJ] == '\r') {
	                        break;
	                    }
	                }continue;
	            }
	            if (aQ == '$') {
	                var aT = aJ;var aK = -1;for (; aJ < aP; ++aJ) {
	                    aQ = aR[aJ] & 255;if (aQ == '\r' || aQ == '\n') {
	                        break;
	                    }if (aQ == '=') {
	                        aK = aJ;break;
	                    }
	                }var aO = false;if (aK >= 0) {
	                    if (aK == aT + 4 && aR[aT + 1] == 'f' && aR[aT + 2] == 'p' && aR[aT + 3] == 's') {
	                        aO = true;
	                    }for (aJ = aK + 1; aJ < aP; ++aJ) {
	                        aQ = aR[aJ] & 255;if (aQ == '\r' || aQ == '\n') {
	                            break;
	                        }if (aQ == ',' || aQ == ' ' || aQ == '\t') {
	                            continue;
	                        }var aL = G._$LS(aR, aP, aJ, aI);if (aI[0] > 0) {
	                            if (aO && aL > 5 && aL < 121) {
	                                aM._$D0 = aL;
	                            }
	                        }aJ = aI[0];
	                    }
	                }for (; aJ < aP; ++aJ) {
	                    if (aR[aJ] == '\n' || aR[aJ] == '\r') {
	                        break;
	                    }
	                }continue;
	            }
	            if (aQ >= 'a' && aQ <= 'z' || aQ >= 'A' && aQ <= 'Z' || aQ == '_') {
	                var aT = aJ;
	                var aK = -1;
	                for (; aJ < aP; ++aJ) {
	                    aQ = aR[aJ] & 255;if (aQ == '\r' || aQ == '\n') {
	                        break;
	                    }if (aQ == '=') {
	                        aK = aJ;break;
	                    }
	                }
	                if (aK >= 0) {
	                    var aN = new t();
	                    if (G.startsWith(aR, aT, Y._$cs)) {
	                        aN._$RP = t._$hs;
	                        aN._$4P = new String(aR, aT, aK - aT);
	                    } else {
	                        if (G.startsWith(aR, aT, Y._$ar)) {
	                            aN._$4P = new String(aR, aT + 7, aK - aT - 7);if (G.startsWith(aR, aT + 7, 'ANCHOR_X')) {
	                                aN._$RP = t._$xs;
	                            } else {
	                                if (G.startsWith(aR, aT + 7, 'ANCHOR_Y')) {
	                                    aN._$RP = t._$us;
	                                } else {
	                                    if (G.startsWith(aR, aT + 7, 'SCALE_X')) {
	                                        aN._$RP = t._$qs;
	                                    } else {
	                                        if (G.startsWith(aR, aT + 7, 'SCALE_Y')) {
	                                            aN._$RP = t._$Ys;
	                                        } else {
	                                            if (G.startsWith(aR, aT + 7, 'X')) {
	                                                aN._$RP = t._$ws;
	                                            } else {
	                                                if (G.startsWith(aR, aT + 7, 'Y')) {
	                                                    aN._$RP = t._$Ns;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        } else {
	                            aN._$RP = t._$Fr;
	                            aN._$4P = new String(aR, aT, aK - aT);
	                        }
	                    }
	                    aM.motions.push(aN);
	                    var aS = 0;
	                    Y._$D2.clear();
	                    for (aJ = aK + 1; aJ < aP; ++aJ) {
	                        aQ = aR[aJ] & 255;
	                        if (aQ == '\r' || aQ == '\n') {
	                            break;
	                        }
	                        if (aQ == ',' || aQ == ' ' || aQ == '\t') {
	                            continue;
	                        }
	                        var aL = G._$LS(aR, aP, aJ, aI);
	                        if (aI[0] > 0) {
	                            Y._$D2.push(aL);
	                            aS++;
	                            var aH = aI[0];
	                            if (aH < aJ) {
	                                console.log('_$n0 _$hi . @Live2DMotion loadMotion()\n');break;
	                            }aJ = aH;
	                        }
	                    }
	                    aN._$I0 = Y._$D2._$BL();
	                    if (aS > aM._$yT) {
	                        aM._$yT = aS;
	                    }
	                }
	            }
	        }
	        aM._$AS = 1000 * aM._$yT / aM._$D0 | 0;
	        return aM;
	    };
	    Y.prototype.getDurationMSec = function () {
	        return this._$AS;
	    };
	    Y.prototype.dump = function () {
	        for (var aJ = 0; aJ < this.motions.length; aJ++) {
	            var aH = this.motions[aJ];
	            console.log('_$wL[%s] [%d]. ', aH._$4P, aH._$I0.length);
	            for (var aI = 0; aI < aH._$I0.length && aI < 10; aI++) {
	                console.log('%5.2f ,', aH._$I0[aI]);
	            }console.log('\n');
	        }
	    };
	    Y.prototype.updateParamExe = function (aH, aL, aO, aX) {
	        var aM = aL - aX._$z2;
	        var aV = aM * this._$D0 / 1000;
	        var aJ = aV | 0;
	        var aP = aV - aJ;
	        for (var aU = 0; aU < this.motions.length; aU++) {
	            var aS = this.motions[aU];
	            var aK = aS._$I0.length;
	            var aQ = aS._$4P;
	            if (aS._$RP == t._$hs) {
	                var aT = aS._$I0[aJ >= aK ? aK - 1 : aJ];
	                aH.setParamFloat(aQ, aT);
	            } else {
	                if (t._$ws <= aS._$RP && aS._$RP <= t._$Ys) ; else {
	                    var aR = aH.getParamFloat(aQ);
	                    var aY = aS._$I0[aJ >= aK ? aK - 1 : aJ];
	                    var aW = aS._$I0[aJ + 1 >= aK ? aK - 1 : aJ + 1];
	                    var aI = aY + (aW - aY) * aP;
	                    var aN = aR + (aI - aR) * aO;
	                    aH.setParamFloat(aQ, aN);
	                }
	            }
	        }
	        if (aJ >= this._$yT) {
	            if (this._$E) {
	                aX._$z2 = aL;if (this.loopFadeIn) {
	                    aX._$bs = aL;
	                }
	            } else {
	                aX._$9L = true;
	            }
	        }
	    };
	    Y.prototype._$r0 = function () {
	        return this._$E;
	    };
	    Y.prototype._$aL = function (aH) {
	        this._$E = aH;
	    };
	    Y.prototype.isLoopFadeIn = function () {
	        return this.loopFadeIn;
	    };
	    Y.prototype.setLoopFadeIn = function (aH) {
	        this.loopFadeIn = aH;
	    };

	    function aE() {
	        this._$P = new Float32Array(100);
	        this.size = 0;
	    }
	    aE.prototype.clear = function () {
	        this.size = 0;
	    };
	    aE.prototype.add = function (aI) {
	        if (this._$P.length <= this.size) {
	            var aH = new Float32Array(this.size * 2);
	            P._$jT(this._$P, 0, aH, 0, this.size);
	            this._$P = aH;
	        }
	        this._$P[this.size++] = aI;
	    };
	    aE.prototype._$BL = function () {
	        var aH = new Float32Array(this.size);
	        P._$jT(this._$P, 0, aH, 0, this.size);
	        return aH;
	    };

	    function t() {
	        this._$4P = null;
	        this._$I0 = null;
	        this._$RP = null;
	    }
	    t._$Fr = 0;
	    t._$hs = 1;
	    t._$ws = 100;
	    t._$Ns = 101;
	    t._$xs = 102;
	    t._$us = 103;
	    t._$qs = 104;
	    t._$Ys = 105;

	    function aw() {}aw._$Ms = 1;
	    aw._$Qs = 2;
	    aw._$i2 = 0;
	    aw._$No = 2;
	    aw._$do = aw._$Ms;
	    aw._$Ls = true;
	    aw._$1r = 5;
	    aw._$Qb = 65;
	    aw._$J = 0.0001;
	    aw._$FT = 0.001;
	    aw._$Ss = 3;

	    function ay() {}ay._$o7 = 6;
	    ay._$S7 = 7;
	    ay._$s7 = 8;
	    ay._$77 = 9;
	    ay.LIVE2D_FORMAT_VERSION_V2_10_SDK2 = 10;
	    ay.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1 = 11;
	    ay._$T7 = ay.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1;
	    ay._$Is = -2004318072;
	    ay._$h0 = 0;
	    ay._$4L = 23;
	    ay._$7P = 33;
	    ay._$uT = function (aH) {
	        console.log('_$bo :: _$6 _$mo _$E0 : %d\n', aH);
	    };
	    ay._$9o = function (aH) {
	        if (aH < 40) {
	            ay._$uT(aH);return null;
	        } else {
	            if (aH < 50) {
	                ay._$uT(aH);return null;
	            } else {
	                if (aH < 60) {
	                    ay._$uT(aH);return null;
	                } else {
	                    if (aH < 100) {
	                        switch (aH) {
	                            case 65:
	                                return new E();
	                            case 66:
	                                return new g();
	                            case 67:
	                                return new aA();
	                            case 68:
	                                return new ab();
	                            case 69:
	                                return new X();
	                            case 70:
	                                return new b();
	                            default:
	                                ay._$uT(aH);
	                                return null;
	                        }
	                    } else {
	                        if (aH < 150) {
	                            switch (aH) {
	                                case 131:
	                                    return new f();
	                                case 133:
	                                    return new s();
	                                case 136:
	                                    return new w();
	                                case 137:
	                                    return new an();
	                                case 142:
	                                    return new aq();
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        ay._$uT(aH);
	        return null;
	    };

	    function y(aH) {
	        if (j) {
	            return;
	        }this._$QT = true;
	        this._$co = -1;
	        this._$qo = 0;
	        this._$pb = new Array(y._$is);
	        this._$_2 = new Float32Array(y._$is);
	        this._$vr = new Float32Array(y._$is);
	        this._$Rr = new Float32Array(y._$is);
	        this._$Or = new Float32Array(y._$is);
	        this._$fs = new Float32Array(y._$is);
	        this._$Js = new Array(y._$is);
	        this._$3S = new Array();
	        this._$aS = new Array();
	        this._$Bo = null;
	        this._$F2 = new Array();
	        this._$db = new Array();
	        this._$8b = new Array();
	        this._$Hr = new Array();
	        this._$Ws = null;
	        this._$Vs = null;
	        this._$Er = null;
	        this._$Es = new Int16Array(aw._$Qb);
	        this._$ZP = new Float32Array(aw._$1r * 2);
	        this._$Ri = aH;
	        this._$b0 = y._$HP++;
	        this.clipManager = null;
	        this.dp_webgl = null;
	    }
	    y._$HP = 0;
	    y._$_0 = true;
	    y._$V2 = -1;
	    y._$W0 = -1;
	    y._$jr = false;
	    y._$ZS = true;
	    y._$tr = -1000000;
	    y._$lr = 1000000;
	    y._$is = 32;
	    y._$e = false;
	    y.prototype.getDrawDataIndex = function (aI) {
	        for (var aH = this._$aS.length - 1; aH >= 0; --aH) {
	            if (this._$aS[aH] != null && this._$aS[aH].getDrawDataID() == aI) {
	                return aH;
	            }
	        }return -1;
	    };
	    y.prototype.getDrawData = function (aH) {
	        if (aH instanceof Z) {
	            if (this._$Bo == null) {
	                this._$Bo = new Object();var aJ = this._$aS.length;for (var aI = 0; aI < aJ; aI++) {
	                    var aL = this._$aS[aI];var aK = aL.getDrawDataID();if (aK == null) {
	                        continue;
	                    }this._$Bo[aK] = aL;
	                }
	            }return this._$Bo[id];
	        } else {
	            if (aH < this._$aS.length) {
	                return this._$aS[aH];
	            } else {
	                return null;
	            }
	        }
	    };
	    y.prototype.release = function () {
	        this._$3S.clear();
	        this._$aS.clear();
	        this._$F2.clear();
	        if (this._$Bo != null) {
	            this._$Bo.clear();
	        }this._$db.clear();
	        this._$8b.clear();
	        this._$Hr.clear();
	    };
	    y.prototype.init = function () {
	        this._$co++;
	        if (this._$F2.length > 0) {
	            this.release();
	        }
	        var aO = this._$Ri.getModelImpl();
	        var aT = aO._$Xr();
	        var aS = aT.length;
	        var aH = new Array();
	        var a3 = new Array();
	        for (var aV = 0; aV < aS; ++aV) {
	            var a4 = aT[aV];
	            this._$F2.push(a4);
	            this._$Hr.push(a4.init(this));
	            var aK = a4.getBaseData();
	            var aR = aK.length;
	            for (var aU = 0; aU < aR; ++aU) {
	                aH.push(aK[aU]);
	            }
	            for (var aU = 0; aU < aR; ++aU) {
	                var aM = aK[aU].init(this);
	                aM._$l2(aV);
	                a3.push(aM);
	            }
	            var a1 = a4.getDrawData();
	            var aP = a1.length;
	            for (var aU = 0; aU < aP; ++aU) {
	                var aZ = a1[aU];
	                var a0 = aZ.init(this);
	                a0._$IP = aV;
	                this._$aS.push(aZ);
	                this._$8b.push(a0);
	            }
	        }
	        var aY = aH.length;
	        var aN = n._$2o();
	        while (true) {
	            var aX = false;
	            for (var aV = 0; aV < aY; ++aV) {
	                var aL = aH[aV];
	                if (aL == null) {
	                    continue;
	                }
	                var a2 = aL.getTargetBaseDataID();
	                if (a2 == null || a2 == aN || this.getBaseDataIndex(a2) >= 0) {
	                    this._$3S.push(aL);
	                    this._$db.push(a3[aV]);
	                    aH[aV] = null;
	                    aX = true;
	                }
	            }
	            if (!aX) {
	                break;
	            }
	        }
	        var aI = aO._$E2();
	        if (aI != null) {
	            var aJ = aI._$1s();if (aJ != null) {
	                var aW = aJ.length;for (var aV = 0; aV < aW; ++aV) {
	                    var aQ = aJ[aV];if (aQ == null) {
	                        continue;
	                    }this._$02(aQ.getParamID(), aQ.getDefaultValue(), aQ.getMinValue(), aQ.getMaxValue());
	                }
	            }
	        }this.clipManager = new W(this.dp_webgl);
	        this.clipManager.init(this, this._$aS, this._$8b);
	        this._$QT = true;
	    };
	    y.prototype.update = function () {
	        if (y._$e) {
	            q.start('_$zL');
	        }
	        var aK = this._$_2.length;
	        for (var aW = 0; aW < aK; aW++) {
	            if (this._$_2[aW] != this._$vr[aW]) {
	                this._$Js[aW] = y._$ZS;
	                this._$vr[aW] = this._$_2[aW];
	            }
	        }
	        var aX = false;
	        var aQ = this._$3S.length;
	        var aN = this._$aS.length;
	        var aS = a._$or();
	        var aZ = a._$Pr();
	        var aU = aZ - aS + 1;
	        if (this._$Ws == null || this._$Ws.length < aU) {
	            this._$Ws = new Int16Array(aU);
	            this._$Vs = new Int16Array(aU);
	        }
	        for (var aW = 0; aW < aU; aW++) {
	            this._$Ws[aW] = y._$V2;
	            this._$Vs[aW] = y._$V2;
	        }
	        if (this._$Er == null || this._$Er.length < aN) {
	            this._$Er = new Int16Array(aN);
	        }
	        for (var aW = 0; aW < aN; aW++) {
	            this._$Er[aW] = y._$W0;
	        }
	        if (y._$e) {
	            q.dump('_$zL');
	        }
	        if (y._$e) {
	            q.start('_$UL');
	        }
	        var aL = null;
	        for (var aV = 0; aV < aQ; ++aV) {
	            var aJ = this._$3S[aV];
	            var aH = this._$db[aV];
	            try {
	                aJ._$Nr(this, aH);
	                aJ._$2b(this, aH);
	            } catch (aY) {
	                if (aL == null) {
	                    aL = aY;
	                }
	            }
	        }
	        if (aL != null) {
	            if (y._$_0) {
	                q._$Rb(aL);
	            }
	        }
	        if (y._$e) {
	            q.dump('_$UL');
	        }
	        if (y._$e) {
	            q.start('_$DL');
	        }
	        var aR = null;
	        for (var aO = 0; aO < aN; ++aO) {
	            var aM = this._$aS[aO];
	            var aI = this._$8b[aO];
	            try {
	                aM._$Nr(this, aI);
	                if (aI._$u2()) {
	                    continue;
	                }aM._$2b(this, aI);
	                var aT = Math.floor(aM._$zS(this, aI) - aS);
	                var aP;
	                try {
	                    aP = this._$Vs[aT];
	                } catch (aY) {
	                    console.log('_$li :: %s / %s 				@@_$fS\n', aY.toString(), aM.getDrawDataID().toString());
	                    aT = Math.floor(aM._$zS(this, aI) - aS);
	                    continue;
	                }
	                if (aP == y._$V2) {
	                    this._$Ws[aT] = aO;
	                } else {
	                    this._$Er[aP] = aO;
	                }this._$Vs[aT] = aO;
	            } catch (aY) {
	                if (aR == null) {
	                    aR = aY;
	                    Q._$sT(Q._$H7);
	                }
	            }
	        }
	        if (aR != null) {
	            if (y._$_0) {
	                q._$Rb(aR);
	            }
	        }
	        if (y._$e) {
	            q.dump('_$DL');
	        }
	        if (y._$e) {
	            q.start('_$eL');
	        }
	        for (var aW = this._$Js.length - 1; aW >= 0; aW--) {
	            this._$Js[aW] = y._$jr;
	        }this._$QT = false;
	        if (y._$e) {
	            q.dump('_$eL');
	        }
	        return aX;
	    };
	    y.prototype.preDraw = function (aH) {
	        if (this.clipManager != null) {
	            aH._$ZT();
	            this.clipManager.setupClip(this, aH);
	        }
	    };
	    y.prototype.draw = function (aM) {
	        if (this._$Ws == null) {
	            q._$li('call _$Ri.update() before _$Ri.draw() ');return;
	        }
	        var aP = this._$Ws.length;
	        aM._$ZT();
	        for (var aK = 0; aK < aP; ++aK) {
	            var aN = this._$Ws[aK];
	            if (aN == y._$V2) {
	                continue;
	            }do {
	                var aH = this._$aS[aN];
	                var aI = this._$8b[aN];
	                if (aI._$yo()) {
	                    var aJ = aI._$IP;
	                    var aL = this._$Hr[aJ];
	                    aI._$VS = aL.getPartsOpacity();
	                    aH.draw(aM, this, aI);
	                }
	                var aO = this._$Er[aN];
	                if (aO <= aN || aO == y._$W0) {
	                    break;
	                }aN = aO;
	            } while (true);
	        }
	    };
	    y.prototype.getParamIndex = function (aH) {
	        for (var aI = this._$pb.length - 1; aI >= 0; --aI) {
	            if (this._$pb[aI] == aH) {
	                return aI;
	            }
	        }return this._$02(aH, 0, y._$tr, y._$lr);
	    };
	    y.prototype._$BS = function (aH) {
	        return this.getBaseDataIndex(aH);
	    };
	    y.prototype.getBaseDataIndex = function (aH) {
	        for (var aI = this._$3S.length - 1; aI >= 0; --aI) {
	            if (this._$3S[aI] != null && this._$3S[aI].getBaseDataID() == aH) {
	                return aI;
	            }
	        }return -1;
	    };
	    y.prototype._$UT = function (aJ, aH) {
	        var aI = new Float32Array(aH);
	        P._$jT(aJ, 0, aI, 0, aJ.length);
	        return aI;
	    };
	    y.prototype._$02 = function (aN, aM, aL, aH) {
	        if (this._$qo >= this._$pb.length) {
	            var aK = this._$pb.length;
	            var aJ = new Array(aK * 2);
	            P._$jT(this._$pb, 0, aJ, 0, aK);
	            this._$pb = aJ;
	            this._$_2 = this._$UT(this._$_2, aK * 2);
	            this._$vr = this._$UT(this._$vr, aK * 2);
	            this._$Rr = this._$UT(this._$Rr, aK * 2);
	            this._$Or = this._$UT(this._$Or, aK * 2);
	            var aI = new Array();
	            P._$jT(this._$Js, 0, aI, 0, aK);
	            this._$Js = aI;
	        }
	        this._$pb[this._$qo] = aN;
	        this._$_2[this._$qo] = aM;
	        this._$vr[this._$qo] = aM;
	        this._$Rr[this._$qo] = aL;
	        this._$Or[this._$qo] = aH;
	        this._$Js[this._$qo] = y._$ZS;
	        return this._$qo++;
	    };
	    y.prototype._$Zo = function (aI, aH) {
	        this._$3S[aI] = aH;
	    };
	    y.prototype.setParamFloat = function (aH, aI) {
	        if (aI < this._$Rr[aH]) {
	            aI = this._$Rr[aH];
	        }if (aI > this._$Or[aH]) {
	            aI = this._$Or[aH];
	        }this._$_2[aH] = aI;
	    };
	    y.prototype.loadParam = function () {
	        var aH = this._$_2.length;if (aH > this._$fs.length) {
	            aH = this._$fs.length;
	        }P._$jT(this._$fs, 0, this._$_2, 0, aH);
	    };
	    y.prototype.saveParam = function () {
	        var aH = this._$_2.length;if (aH > this._$fs.length) {
	            this._$fs = new Float32Array(aH);
	        }P._$jT(this._$_2, 0, this._$fs, 0, aH);
	    };
	    y.prototype._$v2 = function () {
	        return this._$co;
	    };
	    y.prototype._$WS = function () {
	        return this._$QT;
	    };
	    y.prototype._$Xb = function (aH) {
	        return this._$Js[aH] == y._$ZS;
	    };
	    y.prototype._$vs = function () {
	        return this._$Es;
	    };
	    y.prototype._$Tr = function () {
	        return this._$ZP;
	    };
	    y.prototype.getBaseData = function (aH) {
	        return this._$3S[aH];
	    };
	    y.prototype.getParamFloat = function (aH) {
	        return this._$_2[aH];
	    };
	    y.prototype.getParamMax = function (aH) {
	        return this._$Or[aH];
	    };
	    y.prototype.getParamMin = function (aH) {
	        return this._$Rr[aH];
	    };
	    y.prototype.setPartsOpacity = function (aJ, aH) {
	        var aI = this._$Hr[aJ];
	        aI.setPartsOpacity(aH);
	    };
	    y.prototype.getPartsOpacity = function (aI) {
	        var aH = this._$Hr[aI];return aH.getPartsOpacity();
	    };
	    y.prototype.getPartsDataIndex = function (aI) {
	        for (var aH = this._$F2.length - 1; aH >= 0; --aH) {
	            if (this._$F2[aH] != null && this._$F2[aH]._$p2() == aI) {
	                return aH;
	            }
	        }return -1;
	    };
	    y.prototype._$q2 = function (aH) {
	        return this._$db[aH];
	    };
	    y.prototype._$C2 = function (aH) {
	        return this._$8b[aH];
	    };
	    y.prototype._$Bb = function (aH) {
	        return this._$Hr[aH];
	    };
	    y.prototype._$5s = function (aO, aK) {
	        var aJ = this._$Ws.length;
	        var aN = aO;
	        for (var aL = 0; aL < aJ; ++aL) {
	            var aI = this._$Ws[aL];
	            if (aI == y._$V2) {
	                continue;
	            }do {
	                var aM = this._$8b[aI];
	                if (aM._$yo()) {
	                    aM._$GT()._$B2(this, aM, aN);
	                    aN += aK;
	                }
	                var aH = this._$Er[aI];
	                if (aH <= aI || aH == y._$W0) {
	                    break;
	                }aI = aH;
	            } while (true);
	        }
	    };
	    y.prototype.setDrawParam = function (aH) {
	        this.dp_webgl = aH;
	    };
	    y.prototype.getDrawParam = function () {
	        return this.dp_webgl;
	    };

	    function ap() {}ap._$0T = function (aH) {
	        return ap._$0T(new _$5(aH));
	    };
	    ap._$0T = function (aJ) {
	        if (!aJ.exists()) {
	            throw new _$ls(aJ._$3b());
	        }var aH = aJ.length();var aI = new Int8Array(aH);var aM = new _$Xs(new _$kb(aJ), 8192);var aK = void 0;var aL = 0;while ((aK = aM.read(aI, aL, aH - aL)) > 0) {
	            aL += aK;
	        }return aI;
	    };
	    ap._$C = function (aJ) {
	        var aI = null;
	        var aL = null;
	        try {
	            aI = aJ instanceof Array ? aJ : new _$Xs(aJ, 8192);
	            aL = new _$js();
	            var aM = 1000;
	            var aK = void 0;
	            var aH = new Int8Array(aM);
	            while ((aK = aI.read(aH)) > 0) {
	                aL.write(aH, 0, aK);
	            }
	            return aL._$TS();
	        } finally {
	            if (aJ != null) {
	                aJ.close();
	            }
	            if (aL != null) {
	                aL.flush();
	                aL.close();
	            }
	        }
	    };

	    function x() {
	        if (j) {
	            return;
	        }ax.prototype.constructor.call(this);
	        this._$sb = new Int32Array(x._$As);
	        this._$U2 = new Array();
	        this.transform = null;
	        this.gl = null;
	        if (x._$NT == null) {
	            x._$NT = x._$9r(256);
	            x._$vS = x._$9r(256);
	            x._$no = x._$vb(256);
	        }
	    }
	    x.prototype = new ax();
	    x._$As = 32;
	    x._$Gr = false;
	    x._$NT = null;
	    x._$vS = null;
	    x._$no = null;
	    x._$9r = function (aH) {
	        var aI = new Float32Array(aH);return aI;
	    };
	    x._$vb = function (aH) {
	        var aI = new Int16Array(aH);return aI;
	    };
	    x._$cr = function (aI, aH) {
	        if (aI == null || aI._$yL() < aH.length) {
	            aI = x._$9r(aH.length * 2);
	            aI.put(aH);
	            aI._$oT(0);
	        } else {
	            aI.clear();
	            aI.put(aH);
	            aI._$oT(0);
	        }
	        return aI;
	    };
	    x._$mb = function (aI, aH) {
	        if (aI == null || aI._$yL() < aH.length) {
	            aI = x._$vb(aH.length * 2);
	            aI.put(aH);
	            aI._$oT(0);
	        } else {
	            aI.clear();
	            aI.put(aH);
	            aI._$oT(0);
	        }
	        return aI;
	    };
	    x._$Hs = function () {
	        return x._$Gr;
	    };
	    x._$as = function (aH) {
	        x._$Gr = aH;
	    };
	    x.prototype.setGL = function (aH) {
	        this.gl = aH;
	    };
	    x.prototype.setTransform = function (aH) {
	        this.transform = aH;
	    };
	    x.prototype._$ZT = function () {};
	    x.prototype._$Uo = function (aO, aH, aP, aI, aQ, aM, aK, aJ) {
	        if (aM < 0.01) {
	            return;
	        }
	        var aL = this._$U2[aO];
	        var aN = aM > 0.9 ? Q.EXPAND_W : 0;
	        this.gl.drawElements(aL, aP, aI, aQ, aM, aN, this.transform, aJ);
	    };
	    x.prototype._$Rs = function () {
	        throw new Error('_$Rs');
	    };
	    x.prototype._$Ds = function (aH) {
	        throw new Error('_$Ds');
	    };
	    x.prototype._$K2 = function () {
	        for (var aH = 0; aH < this._$sb.length; aH++) {
	            var aI = this._$sb[aH];
	            if (aI != 0) {
	                this.gl._$Sr(1, this._$sb, aH);
	                this._$sb[aH] = 0;
	            }
	        }
	    };
	    x.prototype.setTexture = function (aI, aH) {
	        if (this._$sb.length < aI + 1) {
	            this._$nS(aI);
	        }this._$sb[aI] = aH;
	    };
	    x.prototype.setTexture = function (aH, aI) {
	        if (this._$sb.length < aH + 1) {
	            this._$nS(aH);
	        }this._$U2[aH] = aI;
	    };
	    x.prototype._$nS = function (aH) {
	        var aK = Math.max(this._$sb.length * 2, aH + 1 + 10);
	        var aI = new Int32Array(aK);
	        P._$jT(this._$sb, 0, aI, 0, this._$sb.length);
	        this._$sb = aI;
	        var aJ = new Array();
	        P._$jT(this._$U2, 0, aJ, 0, this._$U2.length);
	        this._$U2 = aJ;
	    };

	    function ab() {
	        if (j) {
	            return;
	        }c.prototype.constructor.call(this);
	        this._$GS = null;
	        this._$Y0 = null;
	    }
	    ab.prototype = new c();
	    ab._$Xo = new Float32Array(2);
	    ab._$io = new Float32Array(2);
	    ab._$0o = new Float32Array(2);
	    ab._$Lo = new Float32Array(2);
	    ab._$To = new Float32Array(2);
	    ab._$Po = new Float32Array(2);
	    ab._$gT = new Array();
	    ab.prototype._$zP = function () {
	        this._$GS = new g();
	        this._$GS._$zP();
	        this._$Y0 = new Array();
	    };
	    ab.prototype.getType = function () {
	        return c._$c2;
	    };
	    ab.prototype._$F0 = function (aH) {
	        c.prototype._$F0.call(this, aH);
	        this._$GS = aH._$nP();
	        this._$Y0 = aH._$nP();
	        c.prototype.readV2_opacity.call(this, aH);
	    };
	    ab.prototype.init = function (aH) {
	        var aI = new al(this);
	        aI._$Yr = new X();
	        if (this._$32()) {
	            aI._$Wr = new X();
	        }
	        return aI;
	    };
	    ab.prototype._$Nr = function (bf, bx) {
	        if (!(this == bx._$GT())) {
	            console.log('### assert!! ### ');
	        }
	        var bm = bx;
	        if (!this._$GS._$Ur(bf)) {
	            return;
	        }
	        var bw = ab._$gT;
	        bw[0] = false;
	        var a2 = this._$GS._$Q2(bf, bw);
	        bx._$Ib(bw[0]);
	        this.interpolateOpacity(bf, this._$GS, bx, bw);
	        var a3 = bf._$vs();
	        var ba = bf._$Tr();
	        this._$GS._$zr(a3, ba, a2);
	        if (a2 <= 0) {
	            var bn = this._$Y0[a3[0]];
	            bm._$Yr.init(bn);
	        } else {
	            if (a2 == 1) {
	                var bn = this._$Y0[a3[0]];
	                var bl = this._$Y0[a3[1]];
	                var a9 = ba[0];
	                bm._$Yr._$fL = bn._$fL + (bl._$fL - bn._$fL) * a9;
	                bm._$Yr._$gL = bn._$gL + (bl._$gL - bn._$gL) * a9;
	                bm._$Yr._$B0 = bn._$B0 + (bl._$B0 - bn._$B0) * a9;
	                bm._$Yr._$z0 = bn._$z0 + (bl._$z0 - bn._$z0) * a9;
	                bm._$Yr._$qT = bn._$qT + (bl._$qT - bn._$qT) * a9;
	            } else {
	                if (a2 == 2) {
	                    var bn = this._$Y0[a3[0]];
	                    var bl = this._$Y0[a3[1]];
	                    var a1 = this._$Y0[a3[2]];
	                    var a0 = this._$Y0[a3[3]];
	                    var a9 = ba[0];
	                    var a8 = ba[1];
	                    var bC = bn._$fL + (bl._$fL - bn._$fL) * a9;
	                    var bB = a1._$fL + (a0._$fL - a1._$fL) * a9;
	                    bm._$Yr._$fL = bC + (bB - bC) * a8;
	                    bC = bn._$gL + (bl._$gL - bn._$gL) * a9;
	                    bB = a1._$gL + (a0._$gL - a1._$gL) * a9;
	                    bm._$Yr._$gL = bC + (bB - bC) * a8;
	                    bC = bn._$B0 + (bl._$B0 - bn._$B0) * a9;
	                    bB = a1._$B0 + (a0._$B0 - a1._$B0) * a9;
	                    bm._$Yr._$B0 = bC + (bB - bC) * a8;
	                    bC = bn._$z0 + (bl._$z0 - bn._$z0) * a9;
	                    bB = a1._$z0 + (a0._$z0 - a1._$z0) * a9;
	                    bm._$Yr._$z0 = bC + (bB - bC) * a8;
	                    bC = bn._$qT + (bl._$qT - bn._$qT) * a9;
	                    bB = a1._$qT + (a0._$qT - a1._$qT) * a9;
	                    bm._$Yr._$qT = bC + (bB - bC) * a8;
	                } else {
	                    if (a2 == 3) {
	                        var aP = this._$Y0[a3[0]];
	                        var aO = this._$Y0[a3[1]];
	                        var bu = this._$Y0[a3[2]];
	                        var bs = this._$Y0[a3[3]];
	                        var aK = this._$Y0[a3[4]];
	                        var aJ = this._$Y0[a3[5]];
	                        var bj = this._$Y0[a3[6]];
	                        var bi = this._$Y0[a3[7]];
	                        var a9 = ba[0];
	                        var a8 = ba[1];
	                        var a6 = ba[2];
	                        var bC = aP._$fL + (aO._$fL - aP._$fL) * a9;
	                        var bB = bu._$fL + (bs._$fL - bu._$fL) * a9;
	                        var bz = aK._$fL + (aJ._$fL - aK._$fL) * a9;
	                        var by = bj._$fL + (bi._$fL - bj._$fL) * a9;
	                        bm._$Yr._$fL = (1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8);
	                        bC = aP._$gL + (aO._$gL - aP._$gL) * a9;
	                        bB = bu._$gL + (bs._$gL - bu._$gL) * a9;
	                        bz = aK._$gL + (aJ._$gL - aK._$gL) * a9;
	                        by = bj._$gL + (bi._$gL - bj._$gL) * a9;
	                        bm._$Yr._$gL = (1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8);
	                        bC = aP._$B0 + (aO._$B0 - aP._$B0) * a9;
	                        bB = bu._$B0 + (bs._$B0 - bu._$B0) * a9;
	                        bz = aK._$B0 + (aJ._$B0 - aK._$B0) * a9;
	                        by = bj._$B0 + (bi._$B0 - bj._$B0) * a9;
	                        bm._$Yr._$B0 = (1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8);
	                        bC = aP._$z0 + (aO._$z0 - aP._$z0) * a9;
	                        bB = bu._$z0 + (bs._$z0 - bu._$z0) * a9;
	                        bz = aK._$z0 + (aJ._$z0 - aK._$z0) * a9;
	                        by = bj._$z0 + (bi._$z0 - bj._$z0) * a9;
	                        bm._$Yr._$z0 = (1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8);
	                        bC = aP._$qT + (aO._$qT - aP._$qT) * a9;
	                        bB = bu._$qT + (bs._$qT - bu._$qT) * a9;
	                        bz = aK._$qT + (aJ._$qT - aK._$qT) * a9;
	                        by = bj._$qT + (bi._$qT - bj._$qT) * a9;
	                        bm._$Yr._$qT = (1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8);
	                    } else {
	                        if (a2 == 4) {
	                            var aT = this._$Y0[a3[0]];
	                            var aS = this._$Y0[a3[1]];
	                            var bE = this._$Y0[a3[2]];
	                            var bD = this._$Y0[a3[3]];
	                            var aN = this._$Y0[a3[4]];
	                            var aM = this._$Y0[a3[5]];
	                            var bp = this._$Y0[a3[6]];
	                            var bo = this._$Y0[a3[7]];
	                            var bh = this._$Y0[a3[8]];
	                            var bg = this._$Y0[a3[9]];
	                            var aY = this._$Y0[a3[10]];
	                            var aW = this._$Y0[a3[11]];
	                            var a7 = this._$Y0[a3[12]];
	                            var a5 = this._$Y0[a3[13]];
	                            var aR = this._$Y0[a3[14]];
	                            var aQ = this._$Y0[a3[15]];
	                            var a9 = ba[0];
	                            var a8 = ba[1];
	                            var a6 = ba[2];
	                            var a4 = ba[3];
	                            var bC = aT._$fL + (aS._$fL - aT._$fL) * a9;
	                            var bB = bE._$fL + (bD._$fL - bE._$fL) * a9;
	                            var bz = aN._$fL + (aM._$fL - aN._$fL) * a9;
	                            var by = bp._$fL + (bo._$fL - bp._$fL) * a9;
	                            var bv = bh._$fL + (bg._$fL - bh._$fL) * a9;
	                            var bt = aY._$fL + (aW._$fL - aY._$fL) * a9;
	                            var br = a7._$fL + (a5._$fL - a7._$fL) * a9;
	                            var bq = aR._$fL + (aQ._$fL - aR._$fL) * a9;
	                            bm._$Yr._$fL = (1 - a4) * ((1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8)) + a4 * ((1 - a6) * (bv + (bt - bv) * a8) + a6 * (br + (bq - br) * a8));
	                            bC = aT._$gL + (aS._$gL - aT._$gL) * a9;
	                            bB = bE._$gL + (bD._$gL - bE._$gL) * a9;
	                            bz = aN._$gL + (aM._$gL - aN._$gL) * a9;
	                            by = bp._$gL + (bo._$gL - bp._$gL) * a9;
	                            bv = bh._$gL + (bg._$gL - bh._$gL) * a9;
	                            bt = aY._$gL + (aW._$gL - aY._$gL) * a9;
	                            br = a7._$gL + (a5._$gL - a7._$gL) * a9;
	                            bq = aR._$gL + (aQ._$gL - aR._$gL) * a9;
	                            bm._$Yr._$gL = (1 - a4) * ((1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8)) + a4 * ((1 - a6) * (bv + (bt - bv) * a8) + a6 * (br + (bq - br) * a8));
	                            bC = aT._$B0 + (aS._$B0 - aT._$B0) * a9;
	                            bB = bE._$B0 + (bD._$B0 - bE._$B0) * a9;
	                            bz = aN._$B0 + (aM._$B0 - aN._$B0) * a9;
	                            by = bp._$B0 + (bo._$B0 - bp._$B0) * a9;
	                            bv = bh._$B0 + (bg._$B0 - bh._$B0) * a9;
	                            bt = aY._$B0 + (aW._$B0 - aY._$B0) * a9;
	                            br = a7._$B0 + (a5._$B0 - a7._$B0) * a9;
	                            bq = aR._$B0 + (aQ._$B0 - aR._$B0) * a9;
	                            bm._$Yr._$B0 = (1 - a4) * ((1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8)) + a4 * ((1 - a6) * (bv + (bt - bv) * a8) + a6 * (br + (bq - br) * a8));
	                            bC = aT._$z0 + (aS._$z0 - aT._$z0) * a9;
	                            bB = bE._$z0 + (bD._$z0 - bE._$z0) * a9;
	                            bz = aN._$z0 + (aM._$z0 - aN._$z0) * a9;
	                            by = bp._$z0 + (bo._$z0 - bp._$z0) * a9;
	                            bv = bh._$z0 + (bg._$z0 - bh._$z0) * a9;
	                            bt = aY._$z0 + (aW._$z0 - aY._$z0) * a9;
	                            br = a7._$z0 + (a5._$z0 - a7._$z0) * a9;
	                            bq = aR._$z0 + (aQ._$z0 - aR._$z0) * a9;
	                            bm._$Yr._$z0 = (1 - a4) * ((1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8)) + a4 * ((1 - a6) * (bv + (bt - bv) * a8) + a6 * (br + (bq - br) * a8));
	                            bC = aT._$qT + (aS._$qT - aT._$qT) * a9;
	                            bB = bE._$qT + (bD._$qT - bE._$qT) * a9;
	                            bz = aN._$qT + (aM._$qT - aN._$qT) * a9;
	                            by = bp._$qT + (bo._$qT - bp._$qT) * a9;
	                            bv = bh._$qT + (bg._$qT - bh._$qT) * a9;
	                            bt = aY._$qT + (aW._$qT - aY._$qT) * a9;
	                            br = a7._$qT + (a5._$qT - a7._$qT) * a9;
	                            bq = aR._$qT + (aQ._$qT - aR._$qT) * a9;
	                            bm._$Yr._$qT = (1 - a4) * ((1 - a6) * (bC + (bB - bC) * a8) + a6 * (bz + (by - bz) * a8)) + a4 * ((1 - a6) * (bv + (bt - bv) * a8) + a6 * (br + (bq - br) * a8));
	                        } else {
	                            var aV = Math.pow(2, a2) | 0;
	                            var aZ = new Float32Array(aV);
	                            for (var bk = 0; bk < aV; bk++) {
	                                var aI = bk;
	                                var aH = 1;
	                                for (var aL = 0; aL < a2; aL++) {
	                                    aH *= aI % 2 == 0 ? 1 - ba[aL] : ba[aL];
	                                    aI /= 2;
	                                }
	                                aZ[bk] = aH;
	                            }
	                            var bA = new Array();
	                            for (var aU = 0; aU < aV; aU++) {
	                                bA[aU] = this._$Y0[a3[aU]];
	                            }
	                            var be = 0,
	                                bc = 0,
	                                bd = 0,
	                                bb = 0,
	                                aX = 0;
	                            for (var aU = 0; aU < aV; aU++) {
	                                be += aZ[aU] * bA[aU]._$fL;
	                                bc += aZ[aU] * bA[aU]._$gL;
	                                bd += aZ[aU] * bA[aU]._$B0;
	                                bb += aZ[aU] * bA[aU]._$z0;
	                                aX += aZ[aU] * bA[aU]._$qT;
	                            }
	                            bm._$Yr._$fL = be;
	                            bm._$Yr._$gL = bc;
	                            bm._$Yr._$B0 = bd;
	                            bm._$Yr._$z0 = bb;
	                            bm._$Yr._$qT = aX;
	                        }
	                    }
	                }
	            }
	        }
	        var bn = this._$Y0[a3[0]];
	        bm._$Yr.reflectX = bn.reflectX;
	        bm._$Yr.reflectY = bn.reflectY;
	    };
	    ab.prototype._$2b = function (aM, aH) {
	        if (!(this == aH._$GT())) {
	            console.log('### assert!! ### ');
	        }
	        var aR = aH;
	        aR._$hS(true);
	        if (!this._$32()) {
	            aR.setTotalScale_notForClient(aR._$Yr._$B0);
	            aR.setTotalOpacity(aR.getInterpolatedOpacity());
	        } else {
	            var aT = this.getTargetBaseDataID();
	            if (aR._$8r == c._$ur) {
	                aR._$8r = aM.getBaseDataIndex(aT);
	            }
	            if (aR._$8r < 0) {
	                if (Q._$so) {
	                    q._$li('_$L _$0P _$G :: %s', aT);
	                }aR._$hS(false);
	            } else {
	                var aI = aM.getBaseData(aR._$8r);
	                if (aI != null) {
	                    var aL = aM._$q2(aR._$8r);
	                    var aS = ab._$Xo;
	                    aS[0] = aR._$Yr._$fL;
	                    aS[1] = aR._$Yr._$gL;
	                    var aJ = ab._$io;
	                    aJ[0] = 0;
	                    aJ[1] = -0.1;
	                    var aO = aL._$GT().getType();
	                    if (aO == c._$c2) {
	                        aJ[1] = -10;
	                    } else {
	                        aJ[1] = -0.1;
	                    }
	                    var aQ = ab._$0o;
	                    this._$Jr(aM, aI, aL, aS, aJ, aQ);
	                    var aP = aC._$92(aJ, aQ);
	                    aI._$nb(aM, aL, aS, aS, 1, 0, 2);
	                    aR._$Wr._$fL = aS[0];
	                    aR._$Wr._$gL = aS[1];
	                    aR._$Wr._$B0 = aR._$Yr._$B0;
	                    aR._$Wr._$z0 = aR._$Yr._$z0;
	                    aR._$Wr._$qT = aR._$Yr._$qT - aP * aC._$NS;
	                    var aK = aL.getTotalScale();
	                    aR.setTotalScale_notForClient(aK * aR._$Wr._$B0);
	                    var aN = aL.getTotalOpacity();
	                    aR.setTotalOpacity(aN * aR.getInterpolatedOpacity());
	                    aR._$Wr.reflectX = aR._$Yr.reflectX;
	                    aR._$Wr.reflectY = aR._$Yr.reflectY;
	                    aR._$hS(aL._$yo());
	                } else {
	                    aR._$hS(false);
	                }
	            }
	        }
	    };
	    ab.prototype._$nb = function (aJ, aR, aL, a4, aT, aO, a2) {
	        if (!(this == aR._$GT())) {
	            console.log('### assert!! ### ');
	        }
	        var aH = aR;
	        var aU = aH._$Wr != null ? aH._$Wr : aH._$Yr;
	        var a0 = Math.sin(aC._$bS * aU._$qT);
	        var aP = Math.cos(aC._$bS * aU._$qT);
	        var a3 = aH.getTotalScale();
	        var aW = aU.reflectX ? -1 : 1;
	        var aV = aU.reflectY ? -1 : 1;
	        var aS = aP * a3 * aW;
	        var aQ = -a0 * a3 * aV;
	        var a1 = a0 * a3 * aW;
	        var aZ = aP * a3 * aV;
	        var aY = aU._$fL;
	        var aX = aU._$gL;
	        var aN = void 0,
	            aM = void 0;
	        var aI = aT * a2;
	        for (var aK = aO; aK < aI; aK += a2) {
	            aN = aL[aK];
	            aM = aL[aK + 1];
	            a4[aK] = aS * aN + aQ * aM + aY;
	            a4[aK + 1] = a1 * aN + aZ * aM + aX;
	        }
	    };
	    ab.prototype._$Jr = function (aP, aK, aI, aR, aQ, aH) {
	        if (!(aK == aI._$GT())) {
	            console.log('### assert!! ### ');
	        }
	        var aO = ab._$Lo;
	        ab._$Lo[0] = aR[0];
	        ab._$Lo[1] = aR[1];
	        aK._$nb(aP, aI, aO, aO, 1, 0, 2);
	        var aL = ab._$To;
	        var aS = ab._$Po;
	        var aN = 10;
	        var aJ = 1;
	        for (var aM = 0; aM < aN; aM++) {
	            aS[0] = aR[0] + aJ * aQ[0];
	            aS[1] = aR[1] + aJ * aQ[1];
	            aK._$nb(aP, aI, aS, aL, 1, 0, 2);
	            aL[0] -= aO[0];
	            aL[1] -= aO[1];
	            if (aL[0] != 0 || aL[1] != 0) {
	                aH[0] = aL[0];
	                aH[1] = aL[1];
	                return;
	            }
	            aS[0] = aR[0] - aJ * aQ[0];
	            aS[1] = aR[1] - aJ * aQ[1];
	            aK._$nb(aP, aI, aS, aL, 1, 0, 2);
	            aL[0] -= aO[0];
	            aL[1] -= aO[1];
	            if (aL[0] != 0 || aL[1] != 0) {
	                aL[0] = -aL[0];
	                aL[0] = -aL[0];
	                aH[0] = aL[0];
	                aH[1] = aL[1];
	                return;
	            }
	            aJ *= 0.1;
	        }
	        if (Q._$so) {
	            console.log('_$L0 to transform _$SP\n');
	        }
	    };

	    function al(aH) {
	        B.prototype.constructor.call(this, aH);
	        this._$8r = c._$ur;
	        this._$Yr = null;
	        this._$Wr = null;
	    }
	    al.prototype = new B();

	    function a() {
	        if (j) {
	            return;
	        }ae.prototype.constructor.call(this);
	        this._$gP = null;
	        this._$dr = null;
	        this._$GS = null;
	        this._$qb = null;
	        this._$Lb = null;
	        this._$mS = null;
	    }
	    a.prototype = new ae();
	    a._$ur = -2;
	    a._$ES = 500;
	    a._$wb = 2;
	    a._$8S = 3;
	    a._$os = 4;
	    a._$52 = a._$ES;
	    a._$R2 = a._$ES;
	    a._$Sb = function (aJ) {
	        for (var aI = aJ.length - 1; aI >= 0; --aI) {
	            var aH = aJ[aI];if (aH < a._$52) {
	                a._$52 = aH;
	            } else {
	                if (aH > a._$R2) {
	                    a._$R2 = aH;
	                }
	            }
	        }
	    };
	    a._$or = function () {
	        return a._$52;
	    };
	    a._$Pr = function () {
	        return a._$R2;
	    };
	    a.prototype._$F0 = function (aH) {
	        this._$gP = aH._$nP();
	        this._$dr = aH._$nP();
	        this._$GS = aH._$nP();
	        this._$qb = aH._$6L();
	        this._$Lb = aH._$cS();
	        this._$mS = aH._$Tb();
	        if (aH.getFormatVersion() >= ay._$T7) {
	            this.clipID = aH._$nP();
	            this.clipIDList = this.convertClipIDForV2_11(this.clipID);
	        } else {
	            this.clipIDList = null;
	        }a._$Sb(this._$Lb);
	    };
	    a.prototype.getClipIDList = function () {
	        return this.clipIDList;
	    };
	    a.prototype._$Nr = function (aI, aH) {
	        aH._$IS[0] = false;
	        aH._$Us = aG._$Z2(aI, this._$GS, aH._$IS, this._$Lb);
	        if (Q._$Zs) ; else {
	            if (aH._$IS[0]) {
	                return;
	            }
	        }aH._$7s = aG._$br(aI, this._$GS, aH._$IS, this._$mS);
	    };
	    a.prototype._$2b = function (aH) {};
	    a.prototype.getDrawDataID = function () {
	        return this._$gP;
	    };
	    a.prototype._$j2 = function (aH) {
	        this._$gP = aH;
	    };
	    a.prototype.getOpacity = function (aH, aI) {
	        return aI._$7s;
	    };
	    a.prototype._$zS = function (aH, aI) {
	        return aI._$Us;
	    };
	    a.prototype.getTargetBaseDataID = function () {
	        return this._$dr;
	    };
	    a.prototype._$gs = function (aH) {
	        this._$dr = aH;
	    };
	    a.prototype._$32 = function () {
	        return this._$dr != null && this._$dr != n._$2o();
	    };
	    a.prototype.getType = function () {};

	    function aq() {
	        if (j) {
	            return;
	        }this._$NL = null;
	        this._$3S = null;
	        this._$aS = null;
	        aq._$42++;
	    }
	    aq._$42 = 0;
	    aq.prototype._$1b = function () {
	        return this._$3S;
	    };
	    aq.prototype.getDrawDataList = function () {
	        return this._$aS;
	    };
	    aq.prototype._$F0 = function (aH) {
	        this._$NL = aH._$nP();
	        this._$aS = aH._$nP();
	        this._$3S = aH._$nP();
	    };
	    aq.prototype._$kr = function (aH) {
	        aH._$Zo(this._$3S);
	        aH._$xo(this._$aS);
	        this._$3S = null;
	        this._$aS = null;
	    };

	    function v() {
	        if (j) {
	            return;
	        }aa.prototype.constructor.call(this);
	        this._$zo = new x();
	    }
	    v.prototype = new aa();
	    v.loadModel = function (aI) {
	        var aH = new v();
	        aa._$62(aH, aI);
	        return aH;
	    };
	    v.loadModel = function (aI) {
	        var aH = new v();
	        aa._$62(aH, aI);
	        return aH;
	    };
	    v._$to = function () {
	        var aH = new v();return aH;
	    };
	    v._$er = function (aM) {
	        var aJ = new _$5('../_$_r/_$t0/_$Ri/_$_P._$d');if (aJ.exists() == false) {
	            throw new _$ls('_$t0 _$_ _$6 _$Ui :: ' + aJ._$PL());
	        }var aH = ['../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1', '../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1', '../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1', '../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1'];var aK = v.loadModel(aJ._$3b());for (var aI = 0; aI < aH.length; aI++) {
	            var aL = new _$5(aH[aI]);if (aL.exists() == false) {
	                throw new _$ls('_$t0 _$_ _$6 _$Ui :: ' + aL._$PL());
	            }aK.setTexture(aI, _$nL._$_o(aM, aL._$3b()));
	        }return aK;
	    };
	    v.prototype.setGL = function (aH) {
	        this._$zo.setGL(aH);
	    };
	    v.prototype.setTransform = function (aH) {
	        this._$zo.setTransform(aH);
	    };
	    v.prototype.draw = function () {
	        this._$5S.draw(this._$zo);
	    };
	    v.prototype._$K2 = function () {
	        this._$zo._$K2();
	    };
	    v.prototype.setTexture = function (aI, aH) {
	        if (this._$zo == null) {
	            q._$li('_$Yi for QT _$ki / _$XS() is _$6 _$ui!!');
	        }this._$zo.setTexture(aI, aH);
	    };
	    v.prototype.setTexture = function (aI, aH) {
	        if (this._$zo == null) {
	            q._$li('_$Yi for QT _$ki / _$XS() is _$6 _$ui!!');
	        }this._$zo.setTexture(aI, aH);
	    };
	    v.prototype._$Rs = function () {
	        return this._$zo._$Rs();
	    };
	    v.prototype._$Ds = function (aH) {
	        this._$zo._$Ds(aH);
	    };
	    v.prototype.getDrawParam = function () {
	        return this._$zo;
	    };

	    function ao() {
	        if (j) {
	            return;
	        }ah.prototype.constructor.call(this);
	        this.motions = new Array();
	        this._$o2 = null;
	        this._$7r = ao._$Co++;
	        this._$D0 = 30;
	        this._$yT = 0;
	        this._$E = false;
	        this.loopFadeIn = true;
	        this._$rr = -1;
	        this._$eP = 0;
	    }
	    ao.prototype = new ah();
	    ao._$cs = 'VISIBLE:';
	    ao._$ar = 'LAYOUT:';
	    ao.MTN_PREFIX_FADEIN = 'FADEIN:';
	    ao.MTN_PREFIX_FADEOUT = 'FADEOUT:';
	    ao._$Co = 0;
	    ao._$1T = 1;
	    ao.loadMotion = function (aJ) {
	        var aI = ap._$C(aJ);var aH = ao.loadMotion(aI);return aH;
	    };

	    function p(aI, aH) {
	        return String.fromCharCode(aI.getUint8(aH));
	    }ao.loadMotion = function (aT) {
	        if (aT instanceof ArrayBuffer) {
	            aT = new DataView(aT);
	        }
	        var aN = new ao();
	        var aI = [0];
	        var aQ = aT.byteLength;
	        aN._$yT = 0;
	        for (var aJ = 0; aJ < aQ; ++aJ) {
	            var aS = p(aT, aJ);
	            var aL = aS.charCodeAt(0);
	            if (aS == '\n' || aS == '\r') {
	                continue;
	            }
	            if (aS == '#') {
	                for (; aJ < aQ; ++aJ) {
	                    if (p(aT, aJ) == '\n' || p(aT, aJ) == '\r') {
	                        break;
	                    }
	                }continue;
	            }
	            if (aS == '$') {
	                var aV = aJ;var aK = -1;for (; aJ < aQ; ++aJ) {
	                    aS = p(aT, aJ);if (aS == '\r' || aS == '\n') {
	                        break;
	                    }if (aS == '=') {
	                        aK = aJ;break;
	                    }
	                }var aP = false;if (aK >= 0) {
	                    if (aK == aV + 4 && p(aT, aV + 1) == 'f' && p(aT, aV + 2) == 'p' && p(aT, aV + 3) == 's') {
	                        aP = true;
	                    }for (aJ = aK + 1; aJ < aQ; ++aJ) {
	                        aS = p(aT, aJ);if (aS == '\r' || aS == '\n') {
	                            break;
	                        }if (aS == ',' || aS == ' ' || aS == '\t') {
	                            continue;
	                        }var aM = G._$LS(aT, aQ, aJ, aI);if (aI[0] > 0) {
	                            if (aP && aM > 5 && aM < 121) {
	                                aN._$D0 = aM;
	                            }
	                        }aJ = aI[0];
	                    }
	                }for (; aJ < aQ; ++aJ) {
	                    if (p(aT, aJ) == '\n' || p(aT, aJ) == '\r') {
	                        break;
	                    }
	                }continue;
	            }
	            if (aL >= 97 && aL <= 122 || aL >= 65 && aL <= 90 || aS == '_') {
	                var aV = aJ;
	                var aK = -1;
	                for (; aJ < aQ; ++aJ) {
	                    aS = p(aT, aJ);if (aS == '\r' || aS == '\n') {
	                        break;
	                    }if (aS == '=') {
	                        aK = aJ;break;
	                    }
	                }
	                if (aK >= 0) {
	                    var aO = new t();
	                    if (G.startsWith(aT, aV, ao._$cs)) {
	                        aO._$RP = t._$hs;
	                        aO._$4P = G.createString(aT, aV, aK - aV);
	                    } else {
	                        if (G.startsWith(aT, aV, ao._$ar)) {
	                            aO._$4P = G.createString(aT, aV + 7, aK - aV - 7);if (G.startsWith(aT, aV + 7, 'ANCHOR_X')) {
	                                aO._$RP = t._$xs;
	                            } else {
	                                if (G.startsWith(aT, aV + 7, 'ANCHOR_Y')) {
	                                    aO._$RP = t._$us;
	                                } else {
	                                    if (G.startsWith(aT, aV + 7, 'SCALE_X')) {
	                                        aO._$RP = t._$qs;
	                                    } else {
	                                        if (G.startsWith(aT, aV + 7, 'SCALE_Y')) {
	                                            aO._$RP = t._$Ys;
	                                        } else {
	                                            if (G.startsWith(aT, aV + 7, 'X')) {
	                                                aO._$RP = t._$ws;
	                                            } else {
	                                                if (G.startsWith(aT, aV + 7, 'Y')) {
	                                                    aO._$RP = t._$Ns;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        } else {
	                            aO._$RP = t._$Fr;
	                            aO._$4P = G.createString(aT, aV, aK - aV);
	                        }
	                    }
	                    aN.motions.push(aO);
	                    var aU = 0;
	                    var aR = [];
	                    for (aJ = aK + 1; aJ < aQ; ++aJ) {
	                        aS = p(aT, aJ);
	                        if (aS == '\r' || aS == '\n') {
	                            break;
	                        }
	                        if (aS == ',' || aS == ' ' || aS == '\t') {
	                            continue;
	                        }
	                        var aM = G._$LS(aT, aQ, aJ, aI);
	                        if (aI[0] > 0) {
	                            aR.push(aM);
	                            aU++;
	                            var aH = aI[0];
	                            if (aH < aJ) {
	                                console.log('_$n0 _$hi . @Live2DMotion loadMotion()\n');break;
	                            }aJ = aH - 1;
	                        }
	                    }
	                    aO._$I0 = new Float32Array(aR);
	                    if (aU > aN._$yT) {
	                        aN._$yT = aU;
	                    }
	                }
	            }
	        }
	        aN._$rr = 1000 * aN._$yT / aN._$D0 | 0;
	        return aN;
	    };
	    ao.prototype.getDurationMSec = function () {
	        return this._$E ? -1 : this._$rr;
	    };
	    ao.prototype.getLoopDurationMSec = function () {
	        return this._$rr;
	    };
	    ao.prototype.dump = function () {
	        for (var aJ = 0; aJ < this.motions.length; aJ++) {
	            var aH = this.motions[aJ];
	            console.log('_$wL[%s] [%d]. ', aH._$4P, aH._$I0.length);
	            for (var aI = 0; aI < aH._$I0.length && aI < 10; aI++) {
	                console.log('%5.2f ,', aH._$I0[aI]);
	            }console.log('\n');
	        }
	    };
	    ao.prototype.updateParamExe = function (aJ, aN, aQ, a3) {
	        var aO = aN - a3._$z2;
	        var a0 = aO * this._$D0 / 1000;
	        var aK = a0 | 0;
	        var aR = a0 - aK;
	        for (var aZ = 0; aZ < this.motions.length; aZ++) {
	            var aV = this.motions[aZ];
	            var aL = aV._$I0.length;
	            var aT = aV._$4P;
	            if (aV._$RP == t._$hs) {
	                var aX = aV._$I0[aK >= aL ? aL - 1 : aK];
	                aJ.setParamFloat(aT, aX);
	            } else {
	                if (t._$ws <= aV._$RP && aV._$RP <= t._$Ys) ; else {
	                    var aH = aJ.getParamIndex(aT);
	                    var a4 = aJ.getModelContext();
	                    var aY = a4.getParamMax(aH);
	                    var aW = a4.getParamMin(aH);
	                    var aM = 0.4;
	                    var aS = aM * (aY - aW);
	                    var aU = a4.getParamFloat(aH);
	                    var a2 = aV._$I0[aK >= aL ? aL - 1 : aK];
	                    var a1 = aV._$I0[aK + 1 >= aL ? aL - 1 : aK + 1];
	                    var aI;
	                    if (a2 < a1 && a1 - a2 > aS || a2 > a1 && a2 - a1 > aS) {
	                        aI = a2;
	                    } else {
	                        aI = a2 + (a1 - a2) * aR;
	                    }
	                    var aP = aU + (aI - aU) * aQ;
	                    aJ.setParamFloat(aT, aP);
	                }
	            }
	        }
	        if (aK >= this._$yT) {
	            if (this._$E) {
	                a3._$z2 = aN;if (this.loopFadeIn) {
	                    a3._$bs = aN;
	                }
	            } else {
	                a3._$9L = true;
	            }
	        }this._$eP = aQ;
	    };
	    ao.prototype._$r0 = function () {
	        return this._$E;
	    };
	    ao.prototype._$aL = function (aH) {
	        this._$E = aH;
	    };
	    ao.prototype._$S0 = function () {
	        return this._$D0;
	    };
	    ao.prototype._$U0 = function (aH) {
	        this._$D0 = aH;
	    };
	    ao.prototype.isLoopFadeIn = function () {
	        return this.loopFadeIn;
	    };
	    ao.prototype.setLoopFadeIn = function (aH) {
	        this.loopFadeIn = aH;
	    };

	    function aE() {
	        this._$P = new Float32Array(100);
	        this.size = 0;
	    }
	    aE.prototype.clear = function () {
	        this.size = 0;
	    };
	    aE.prototype.add = function (aI) {
	        if (this._$P.length <= this.size) {
	            var aH = new Float32Array(this.size * 2);
	            P._$jT(this._$P, 0, aH, 0, this.size);
	            this._$P = aH;
	        }
	        this._$P[this.size++] = aI;
	    };
	    aE.prototype._$BL = function () {
	        var aH = new Float32Array(this.size);
	        P._$jT(this._$P, 0, aH, 0, this.size);
	        return aH;
	    };

	    function t() {
	        this._$4P = null;
	        this._$I0 = null;
	        this._$RP = null;
	    }
	    t._$Fr = 0;
	    t._$hs = 1;
	    t._$ws = 100;
	    t._$Ns = 101;
	    t._$xs = 102;
	    t._$us = 103;
	    t._$qs = 104;
	    t._$Ys = 105;

	    function E() {
	        if (j) {
	            return;
	        }c.prototype.constructor.call(this);
	        this._$o = 0;
	        this._$A = 0;
	        this._$GS = null;
	        this._$Eo = null;
	    }
	    E.prototype = new c();
	    E._$gT = new Array();
	    E.prototype._$zP = function () {
	        this._$GS = new g();
	        this._$GS._$zP();
	    };
	    E.prototype._$F0 = function (aH) {
	        c.prototype._$F0.call(this, aH);
	        this._$A = aH._$6L();
	        this._$o = aH._$6L();
	        this._$GS = aH._$nP();
	        this._$Eo = aH._$nP();
	        c.prototype.readV2_opacity.call(this, aH);
	    };
	    E.prototype.init = function (aH) {
	        var aI = new H(this);var aJ = (this._$o + 1) * (this._$A + 1);if (aI._$Cr != null) {
	            aI._$Cr = null;
	        }aI._$Cr = new Float32Array(aJ * 2);if (aI._$hr != null) {
	            aI._$hr = null;
	        }if (this._$32()) {
	            aI._$hr = new Float32Array(aJ * 2);
	        } else {
	            aI._$hr = null;
	        }return aI;
	    };
	    E.prototype._$Nr = function (aJ, aI) {
	        var aK = aI;
	        if (!this._$GS._$Ur(aJ)) {
	            return;
	        }
	        var aL = this._$VT();
	        var aH = E._$gT;
	        aH[0] = false;
	        aG._$Vr(aJ, this._$GS, aH, aL, this._$Eo, aK._$Cr, 0, 2);
	        aI._$Ib(aH[0]);
	        this.interpolateOpacity(aJ, this._$GS, aI, aH);
	    };
	    E.prototype._$2b = function (aK, aJ) {
	        var aL = aJ;
	        aL._$hS(true);
	        if (!this._$32()) {
	            aL.setTotalOpacity(aL.getInterpolatedOpacity());
	        } else {
	            var aH = this.getTargetBaseDataID();
	            if (aL._$8r == c._$ur) {
	                aL._$8r = aK.getBaseDataIndex(aH);
	            }
	            if (aL._$8r < 0) {
	                if (Q._$so) {
	                    q._$li('_$L _$0P _$G :: %s', aH);
	                }aL._$hS(false);
	            } else {
	                var aN = aK.getBaseData(aL._$8r);
	                var aI = aK._$q2(aL._$8r);
	                if (aN != null && aI._$yo()) {
	                    var aM = aI.getTotalScale();
	                    aL.setTotalScale_notForClient(aM);
	                    var aO = aI.getTotalOpacity();
	                    aL.setTotalOpacity(aO * aL.getInterpolatedOpacity());
	                    aN._$nb(aK, aI, aL._$Cr, aL._$hr, this._$VT(), 0, 2);
	                    aL._$hS(true);
	                } else {
	                    aL._$hS(false);
	                }
	            }
	        }
	    };
	    E.prototype._$nb = function (aL, aI, aH, aM, aO, aK, aJ) {
	        {
	            var aN = aI;
	            var aP = aN._$hr != null ? aN._$hr : aN._$Cr;
	            E.transformPoints_sdk2(aH, aM, aO, aK, aJ, aP, this._$o, this._$A);
	        }
	    };
	    E.transformPoints_sdk2 = function (a0, bc, a5, aP, aI, aR, aQ, aU) {
	        var aW = a5 * aI;
	        var aV = void 0;
	        var bn = void 0,
	            bm = void 0;
	        var aT = 0;
	        var aS = 0;
	        var bl = 0;
	        var bk = 0;
	        var bf = 0;
	        var be = 0;
	        var aZ = false;
	        for (var ba = aP; ba < aW; ba += aI) {
	            var bd, a7, a4, aX;
	            a4 = a0[ba];
	            aX = a0[ba + 1];
	            bd = a4 * aQ;
	            a7 = aX * aU;
	            if (bd < 0 || a7 < 0 || aQ <= bd || aU <= a7) {
	                var a1 = aQ + 1;
	                if (!aZ) {
	                    aZ = true;
	                    aT = 0.25 * (aR[(0 + 0 * a1) * 2] + aR[(aQ + 0 * a1) * 2] + aR[(0 + aU * a1) * 2] + aR[(aQ + aU * a1) * 2]);
	                    aS = 0.25 * (aR[(0 + 0 * a1) * 2 + 1] + aR[(aQ + 0 * a1) * 2 + 1] + aR[(0 + aU * a1) * 2 + 1] + aR[(aQ + aU * a1) * 2 + 1]);
	                    var aM = aR[(aQ + aU * a1) * 2] - aR[(0 + 0 * a1) * 2];
	                    var aL = aR[(aQ + aU * a1) * 2 + 1] - aR[(0 + 0 * a1) * 2 + 1];
	                    var bh = aR[(aQ + 0 * a1) * 2] - aR[(0 + aU * a1) * 2];
	                    var bg = aR[(aQ + 0 * a1) * 2 + 1] - aR[(0 + aU * a1) * 2 + 1];
	                    bl = (aM + bh) * 0.5;
	                    bk = (aL + bg) * 0.5;
	                    bf = (aM - bh) * 0.5;
	                    be = (aL - bg) * 0.5;
	aT -= 0.5 * (bl + bf);
	                    aS -= 0.5 * (bk + be);
	                }
	                if (a4 > -2 && a4 < 3 && aX > -2 && aX < 3) {
	                    if (a4 <= 0) {
	                        if (aX <= 0) {
	                            var a3 = aR[(0 + 0 * a1) * 2];
	                            var a2 = aR[(0 + 0 * a1) * 2 + 1];
	                            var a8 = aT - 2 * bl;
	                            var a6 = aS - 2 * bk;
	                            var aK = aT - 2 * bf;
	                            var aJ = aS - 2 * be;
	                            var aO = aT - 2 * bl - 2 * bf;
	                            var aN = aS - 2 * bk - 2 * be;
	                            var bj = 0.5 * (a4 - -2);
	                            var bi = 0.5 * (aX - -2);
	                            if (bj + bi <= 1) {
	                                bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                            } else {
	                                bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                            }
	                        } else {
	                            if (aX >= 1) {
	                                var aK = aR[(0 + aU * a1) * 2];
	                                var aJ = aR[(0 + aU * a1) * 2 + 1];
	                                var aO = aT - 2 * bl + 1 * bf;
	                                var aN = aS - 2 * bk + 1 * be;
	                                var a3 = aT + 3 * bf;
	                                var a2 = aS + 3 * be;
	                                var a8 = aT - 2 * bl + 3 * bf;
	                                var a6 = aS - 2 * bk + 3 * be;
	                                var bj = 0.5 * (a4 - -2);
	                                var bi = 0.5 * (aX - 1);
	                                if (bj + bi <= 1) {
	                                    bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                    bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                } else {
	                                    bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                    bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                }
	                            } else {
	                                var aH = a7 | 0;
	                                if (aH == aU) {
	                                    aH = aU - 1;
	                                }
	                                var bj = 0.5 * (a4 - -2);
	                                var bi = a7 - aH;
	                                var bb = aH / aU;
	                                var a9 = (aH + 1) / aU;
	                                var aK = aR[(0 + aH * a1) * 2];
	                                var aJ = aR[(0 + aH * a1) * 2 + 1];
	                                var a3 = aR[(0 + (aH + 1) * a1) * 2];
	                                var a2 = aR[(0 + (aH + 1) * a1) * 2 + 1];
	                                var aO = aT - 2 * bl + bb * bf;
	                                var aN = aS - 2 * bk + bb * be;
	                                var a8 = aT - 2 * bl + a9 * bf;
	                                var a6 = aS - 2 * bk + a9 * be;
	                                if (bj + bi <= 1) {
	                                    bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                    bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                } else {
	                                    bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                    bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                }
	                            }
	                        }
	                    } else {
	                        if (a4 >= 1) {
	                            if (aX <= 0) {
	                                var a8 = aR[(aQ + 0 * a1) * 2];
	                                var a6 = aR[(aQ + 0 * a1) * 2 + 1];
	                                var a3 = aT + 3 * bl;
	                                var a2 = aS + 3 * bk;
	                                var aO = aT + 1 * bl - 2 * bf;
	                                var aN = aS + 1 * bk - 2 * be;
	                                var aK = aT + 3 * bl - 2 * bf;
	                                var aJ = aS + 3 * bk - 2 * be;
	                                var bj = 0.5 * (a4 - 1);
	                                var bi = 0.5 * (aX - -2);
	                                if (bj + bi <= 1) {
	                                    bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                    bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                } else {
	                                    bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                    bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                }
	                            } else {
	                                if (aX >= 1) {
	                                    var aO = aR[(aQ + aU * a1) * 2];
	                                    var aN = aR[(aQ + aU * a1) * 2 + 1];
	                                    var aK = aT + 3 * bl + 1 * bf;
	                                    var aJ = aS + 3 * bk + 1 * be;
	                                    var a8 = aT + 1 * bl + 3 * bf;
	                                    var a6 = aS + 1 * bk + 3 * be;
	                                    var a3 = aT + 3 * bl + 3 * bf;
	                                    var a2 = aS + 3 * bk + 3 * be;
	                                    var bj = 0.5 * (a4 - 1);
	                                    var bi = 0.5 * (aX - 1);
	                                    if (bj + bi <= 1) {
	                                        bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                        bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                    } else {
	                                        bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                        bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                    }
	                                } else {
	                                    var aH = a7 | 0;
	                                    if (aH == aU) {
	                                        aH = aU - 1;
	                                    }
	                                    var bj = 0.5 * (a4 - 1);
	                                    var bi = a7 - aH;
	                                    var bb = aH / aU;
	                                    var a9 = (aH + 1) / aU;
	                                    var aO = aR[(aQ + aH * a1) * 2];
	                                    var aN = aR[(aQ + aH * a1) * 2 + 1];
	                                    var a8 = aR[(aQ + (aH + 1) * a1) * 2];
	                                    var a6 = aR[(aQ + (aH + 1) * a1) * 2 + 1];
	                                    var aK = aT + 3 * bl + bb * bf;
	                                    var aJ = aS + 3 * bk + bb * be;
	                                    var a3 = aT + 3 * bl + a9 * bf;
	                                    var a2 = aS + 3 * bk + a9 * be;
	                                    if (bj + bi <= 1) {
	                                        bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                        bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                    } else {
	                                        bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                        bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                    }
	                                }
	                            }
	                        } else {
	                            if (aX <= 0) {
	                                var aY = bd | 0;
	                                if (aY == aQ) {
	                                    aY = aQ - 1;
	                                }
	                                var bj = bd - aY;
	                                var bi = 0.5 * (aX - -2);
	                                var bp = aY / aQ;
	                                var bo = (aY + 1) / aQ;
	                                var a8 = aR[(aY + 0 * a1) * 2];
	                                var a6 = aR[(aY + 0 * a1) * 2 + 1];
	                                var a3 = aR[(aY + 1 + 0 * a1) * 2];
	                                var a2 = aR[(aY + 1 + 0 * a1) * 2 + 1];
	                                var aO = aT + bp * bl - 2 * bf;
	                                var aN = aS + bp * bk - 2 * be;
	                                var aK = aT + bo * bl - 2 * bf;
	                                var aJ = aS + bo * bk - 2 * be;
	                                if (bj + bi <= 1) {
	                                    bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                    bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                } else {
	                                    bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                    bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                }
	                            } else {
	                                if (aX >= 1) {
	                                    var aY = bd | 0;
	                                    if (aY == aQ) {
	                                        aY = aQ - 1;
	                                    }
	                                    var bj = bd - aY;
	                                    var bi = 0.5 * (aX - 1);
	                                    var bp = aY / aQ;
	                                    var bo = (aY + 1) / aQ;
	                                    var aO = aR[(aY + aU * a1) * 2];
	                                    var aN = aR[(aY + aU * a1) * 2 + 1];
	                                    var aK = aR[(aY + 1 + aU * a1) * 2];
	                                    var aJ = aR[(aY + 1 + aU * a1) * 2 + 1];
	                                    var a8 = aT + bp * bl + 3 * bf;
	                                    var a6 = aS + bp * bk + 3 * be;
	                                    var a3 = aT + bo * bl + 3 * bf;
	                                    var a2 = aS + bo * bk + 3 * be;
	                                    if (bj + bi <= 1) {
	                                        bc[ba] = aO + (aK - aO) * bj + (a8 - aO) * bi;
	                                        bc[ba + 1] = aN + (aJ - aN) * bj + (a6 - aN) * bi;
	                                    } else {
	                                        bc[ba] = a3 + (a8 - a3) * (1 - bj) + (aK - a3) * (1 - bi);
	                                        bc[ba + 1] = a2 + (a6 - a2) * (1 - bj) + (aJ - a2) * (1 - bi);
	                                    }
	                                } else {
	                                    System.err.printf('_$li calc : %.4f , %.4f					@@BDBoxGrid\n', a4, aX);
	                                }
	                            }
	                        }
	                    }
	                } else {
	                    bc[ba] = aT + a4 * bl + aX * bf;
	                    bc[ba + 1] = aS + a4 * bk + aX * be;
	                }
	            } else {
	                bn = bd - (bd | 0);
	                bm = a7 - (a7 | 0);
	                aV = 2 * ((bd | 0) + (a7 | 0) * (aQ + 1));
	                if (bn + bm < 1) {
	                    bc[ba] = aR[aV] * (1 - bn - bm) + aR[aV + 2] * bn + aR[aV + 2 * (aQ + 1)] * bm;
	                    bc[ba + 1] = aR[aV + 1] * (1 - bn - bm) + aR[aV + 3] * bn + aR[aV + 2 * (aQ + 1) + 1] * bm;
	                } else {
	                    bc[ba] = aR[aV + 2 * (aQ + 1) + 2] * (bn - 1 + bm) + aR[aV + 2 * (aQ + 1)] * (1 - bn) + aR[aV + 2] * (1 - bm);
	                    bc[ba + 1] = aR[aV + 2 * (aQ + 1) + 3] * (bn - 1 + bm) + aR[aV + 2 * (aQ + 1) + 1] * (1 - bn) + aR[aV + 3] * (1 - bm);
	                }
	            }
	        }
	    };
	    E.prototype.transformPoints_sdk1 = function (aJ, aR, aL, a0, aU, aP, aZ) {
	        var aH = aR;
	        var aO = void 0,
	            aN = void 0;
	        var aM = this._$o;
	        var aQ = this._$A;
	        var aI = aU * aZ;
	        var aS = void 0,
	            aY = void 0;
	        var aV = void 0;
	        var aX = void 0,
	            aW = void 0;
	        var aT = aH._$hr != null ? aH._$hr : aH._$Cr;
	        for (var aK = aP; aK < aI; aK += aZ) {
	            if (Q._$ts) {
	                aO = aL[aK];
	                aN = aL[aK + 1];
	                if (aO < 0) {
	                    aO = 0;
	                } else {
	                    if (aO > 1) {
	                        aO = 1;
	                    }
	                }
	                if (aN < 0) {
	                    aN = 0;
	                } else {
	                    if (aN > 1) {
	                        aN = 1;
	                    }
	                }aO *= aM;
	                aN *= aQ;
	                aS = aO | 0;
	                aY = aN | 0;
	                if (aS > aM - 1) {
	                    aS = aM - 1;
	                }
	                if (aY > aQ - 1) {
	                    aY = aQ - 1;
	                }aX = aO - aS;
	                aW = aN - aY;
	                aV = 2 * (aS + aY * (aM + 1));
	            } else {
	                aO = aL[aK] * aM;
	                aN = aL[aK + 1] * aQ;
	                aX = aO - (aO | 0);
	                aW = aN - (aN | 0);
	                aV = 2 * ((aO | 0) + (aN | 0) * (aM + 1));
	            }
	            if (aX + aW < 1) {
	                a0[aK] = aT[aV] * (1 - aX - aW) + aT[aV + 2] * aX + aT[aV + 2 * (aM + 1)] * aW;
	                a0[aK + 1] = aT[aV + 1] * (1 - aX - aW) + aT[aV + 3] * aX + aT[aV + 2 * (aM + 1) + 1] * aW;
	            } else {
	                a0[aK] = aT[aV + 2 * (aM + 1) + 2] * (aX - 1 + aW) + aT[aV + 2 * (aM + 1)] * (1 - aX) + aT[aV + 2] * (1 - aW);
	                a0[aK + 1] = aT[aV + 2 * (aM + 1) + 3] * (aX - 1 + aW) + aT[aV + 2 * (aM + 1) + 1] * (1 - aX) + aT[aV + 3] * (1 - aW);
	            }
	        }
	    };
	    E.prototype._$VT = function () {
	        return (this._$o + 1) * (this._$A + 1);
	    };
	    E.prototype.getType = function () {
	        return c._$_b;
	    };

	    function H(aH) {
	        B.prototype.constructor.call(this, aH);
	        this._$8r = c._$ur;
	        this._$Cr = null;
	        this._$hr = null;
	    }
	    H.prototype = new B();

	    function s() {
	        if (j) {
	            return;
	        }this.visible = true;
	        this._$g0 = false;
	        this._$NL = null;
	        this._$3S = null;
	        this._$aS = null;
	        s._$42++;
	    }
	    s._$42 = 0;
	    s.prototype._$zP = function () {
	        this._$3S = new Array();
	        this._$aS = new Array();
	    };
	    s.prototype._$F0 = function (aH) {
	        this._$g0 = aH._$8L();
	        this.visible = aH._$8L();
	        this._$NL = aH._$nP();
	        this._$3S = aH._$nP();
	        this._$aS = aH._$nP();
	    };
	    s.prototype.init = function (aI) {
	        var aH = new aj(this);
	        aH.setPartsOpacity(this.isVisible() ? 1 : 0);
	        return aH;
	    };
	    s.prototype._$6o = function (aH) {
	        if (this._$3S == null) {
	            throw new Error('_$3S _$6 _$Wo@_$6o');
	        }this._$3S.push(aH);
	    };
	    s.prototype._$3o = function (aH) {
	        if (this._$aS == null) {
	            throw new Error('_$aS _$6 _$Wo@_$3o');
	        }this._$aS.push(aH);
	    };
	    s.prototype._$Zo = function (aH) {
	        this._$3S = aH;
	    };
	    s.prototype._$xo = function (aH) {
	        this._$aS = aH;
	    };
	    s.prototype.isVisible = function () {
	        return this.visible;
	    };
	    s.prototype._$uL = function () {
	        return this._$g0;
	    };
	    s.prototype._$KP = function (aH) {
	        this.visible = aH;
	    };
	    s.prototype._$ET = function (aH) {
	        this._$g0 = aH;
	    };
	    s.prototype.getBaseData = function () {
	        return this._$3S;
	    };
	    s.prototype.getDrawData = function () {
	        return this._$aS;
	    };
	    s.prototype._$p2 = function () {
	        return this._$NL;
	    };
	    s.prototype._$ob = function (aH) {
	        this._$NL = aH;
	    };
	    s.prototype.getPartsID = function () {
	        return this._$NL;
	    };
	    s.prototype._$MP = function (aH) {
	        this._$NL = aH;
	    };

	    function aj(aH) {
	        this._$VS = null;
	        this._$e0 = null;
	        this._$e0 = aH;
	    }
	    aj.prototype = new S();
	    aj.prototype.getPartsOpacity = function () {
	        return this._$VS;
	    };
	    aj.prototype.setPartsOpacity = function (aH) {
	        this._$VS = aH;
	    };

	    function ak(aH) {
	        if (j) {
	            return;
	        }this.id = aH;
	    }ak._$L7 = function () {
	        z._$27();
	        n._$27();
	        Z._$27();
	        i._$27();
	    };
	    ak.prototype.toString = function () {
	        return this.id;
	    };

	    function an() {
	        if (j) {
	            return;
	        }this._$4S = null;
	    }an.prototype._$1s = function () {
	        return this._$4S;
	    };
	    an.prototype._$zP = function () {
	        this._$4S = new Array();
	    };
	    an.prototype._$F0 = function (aH) {
	        this._$4S = aH._$nP();
	    };
	    an.prototype._$Ks = function (aH) {
	        this._$4S.push(aH);
	    };

	    function au(aH, aI) {
	        this.canvas = aH;
	        this.context = aI;
	        this.viewport = new Array(0, 0, aH.width, aH.height);
	        this._$6r = 1;
	        this._$xP = 0;
	        this._$3r = 1;
	        this._$uP = 0;
	        this._$Qo = -1;
	        this.cacheImages = {};
	    }
	    au.tr = new am();
	    au._$50 = new am();
	    au._$Ti = new Array(0, 0);
	    au._$Pi = new Array(0, 0);
	    au._$B = new Array(0, 0);
	    au.prototype._$lP = function (aI, aK, aJ, aH) {
	        this.viewport = new Array(aI, aK, aJ, aH);
	    };
	    au.prototype._$bL = function () {
	        this.context.save();
	        var aH = this.viewport;
	        if (aH != null) {
	            this.context.beginPath();
	            this.context._$Li(aH[0], aH[1], aH[2], aH[3]);
	            this.context.clip();
	        }
	    };
	    au.prototype._$ei = function () {
	        this.context.restore();
	    };
	    au.prototype.drawElements = function (bc, bm, aX, aJ, bA, aM, bl, bz) {
	        try {
	            if (bA != this._$Qo) {
	                this._$Qo = bA;
	                this.context.globalAlpha = bA;
	            }
	            var a2 = bm.length;
	            var aP = bc.width;
	            var a5 = bc.height;
	            var bE = this.context;
	            var a7 = this._$xP;
	            var a6 = this._$uP;
	            var a1 = this._$6r;
	            var aZ = this._$3r;
	            var bD = au.tr;
	            var aI = au._$Ti;
	            var aH = au._$Pi;
	            var bu = au._$B;
	            for (var by = 0; by < a2; by += 3) {
	                bE.save();
	                var aW = bm[by];
	                var aV = bm[by + 1];
	                var aT = bm[by + 2];
	                var aL = a7 + a1 * aX[aW * 2];
	                var aK = a6 + aZ * aX[aW * 2 + 1];
	                var br = a7 + a1 * aX[aV * 2];
	                var bp = a6 + aZ * aX[aV * 2 + 1];
	                var bh = a7 + a1 * aX[aT * 2];
	                var bf = a6 + aZ * aX[aT * 2 + 1];
	                if (bl) {
	                    bl._$PS(aL, aK, bu);
	                    aL = bu[0];
	                    aK = bu[1];
	                    bl._$PS(br, bp, bu);
	                    br = bu[0];
	                    bp = bu[1];
	                    bl._$PS(bh, bf, bu);
	                    bh = bu[0];
	                    bf = bu[1];
	                }
	                var aS = aP * aJ[aW * 2];
	                var aQ = a5 - a5 * aJ[aW * 2 + 1];
	                var bx = aP * aJ[aV * 2];
	                var bw = a5 - a5 * aJ[aV * 2 + 1];
	                var bk = aP * aJ[aT * 2];
	                var bj = a5 - a5 * aJ[aT * 2 + 1];
	                var a3 = Math.atan2(bw - aQ, bx - aS);
	                var a0 = Math.atan2(bp - aK, br - aL);
	                var aO = br - aL;
	                var aN = bp - aK;
	                var bi = Math.sqrt(aO * aO + aN * aN);
	                var aU = bx - aS;
	                var aR = bw - aQ;
	                var bt = Math.sqrt(aU * aU + aR * aR);
	                var bv = bi / bt;
	                ad._$ni(bk, bj, aS, aQ, bx - aS, bw - aQ, -(bw - aQ), bx - aS, aI);
	                ad._$ni(bh, bf, aL, aK, br - aL, bp - aK, -(bp - aK), br - aL, aH);
	                var aY = (aH[0] - aI[0]) / aI[1];
	                var bs = Math.min(aS, bx, bk);
	                var bg = Math.max(aS, bx, bk);
	                var bq = Math.min(aQ, bw, bj);
	                var be = Math.max(aQ, bw, bj);
	                var bo = Math.floor(bs);
	                var bb = Math.floor(bq);
	                var a4 = Math.ceil(bg);
	                var bC = Math.ceil(be);
	                bD.identity();
	                bD.translate(aL, aK);
	                bD.rotate(a0);
	                bD.scale(1, aH[1] / aI[1]);
	                bD.shear(aY, 0);
	                bD.scale(bv, bv);
	                bD.rotate(-a3);
	                bD.translate(-aS, -aQ);
	                bD.setContext(bE);
	                var a8 = true;
	                var a9 = 1.2;
	                if (!aM) {
	                    aM = a8 ? a9 : 0;
	                }
	                if (Q.IGNORE_EXPAND) {
	                    aM = 0;
	                }
	                if (Q.USE_CACHED_POLYGON_IMAGE) {
	                    var bd = bz._$e0;
	                    bd.gl_cacheImage = bd.gl_cacheImage || {};
	                    if (!bd.gl_cacheImage[by]) {
	                        var bn = au.createCanvas(a4 - bo, bC - bb);
	                        Q.DEBUG_DATA.LDGL_CANVAS_MB = Q.DEBUG_DATA.LDGL_CANVAS_MB || 0;
	                        Q.DEBUG_DATA.LDGL_CANVAS_MB += (a4 - bo) * (bC - bb) * 4;
	                        var ba = bn.getContext('2d');
	                        ba.translate(-bo, -bb);
	                        au.clip(ba, bD, aM, bi, aS, aQ, bx, bw, bk, bj, aL, aK, br, bp, bh, bf);
	                        ba.drawImage(bc, 0, 0);
	                        bd.gl_cacheImage[by] = { cacheCanvas: bn, cacheContext: ba };
	                    }
	                    bE.drawImage(bd.gl_cacheImage[by]['cacheCanvas'], bo, bb);
	                } else {
	                    if (!Q.IGNORE_CLIP) {
	                        au.clip(bE, bD, aM, bi, aS, aQ, bx, bw, bk, bj, aL, aK, br, bp, bh, bf);
	                    }
	                    if (Q.USE_ADJUST_TRANSLATION) {
	                        bs = 0;
	                        bg = aP;
	                        bq = 0;
	                        be = a5;
	                    }
	                    bE.drawImage(bc, bs, bq, bg - bs, be - bq, bs, bq, bg - bs, be - bq);
	                }
	                bE.restore();
	            }
	        } catch (bB) {
	            q._$Rb(bB);
	        }
	    };
	    au.clip = function (aK, aJ, aV, aI, aM, aL, aU, aT, aQ, aP, aO, aN, aH, aW, aS, aR) {
	        if (aV > 0.02) {
	            au.expandClip(aK, aJ, aV, aI, aO, aN, aH, aW, aS, aR);
	        } else {
	            au.clipWithTransform(aK, null, aM, aL, aU, aT, aQ, aP);
	        }
	    };
	    au.expandClip = function (aV, bg, aK, a3, aJ, aI, be, ba, aZ, aX) {
	        var aP = be - aJ;var aO = ba - aI;var bi = aZ - aJ;var bh = aX - aI;var bj = aP * bh - aO * bi > 0 ? aK : -aK;var aL = -aO;var aH = aP;var bc = aZ - be;var a8 = aX - ba;var a7 = -a8;var a6 = bc;var aQ = Math.sqrt(bc * bc + a8 * a8);var bf = -bh;var bb = bi;var a2 = Math.sqrt(bi * bi + bh * bh);var bd = aJ - bj * aL / a3;var a9 = aI - bj * aH / a3;var aY = be - bj * aL / a3;var aW = ba - bj * aH / a3;var a5 = be - bj * a7 / aQ;var a4 = ba - bj * a6 / aQ;var aS = aZ - bj * a7 / aQ;var aR = aX - bj * a6 / aQ;var aN = aJ + bj * bf / a2;var aM = aI + bj * bb / a2;var a1 = aZ + bj * bf / a2;var a0 = aX + bj * bb / a2;var aU = au._$50;var aT = bg._$P2(aU);if (aT == null) {
	            return false;
	        }au.clipWithTransform(aV, aU, bd, a9, aY, aW, a5, a4, aS, aR, a1, a0, aN, aM);return true;
	    };
	    au.clipWithTransform = function (aH, aI, aS, aN, aQ, aK, aP, aJ) {
	        if (arguments.length < 1 + 3 * 2) {
	            q._$li('err : @LDGL.clip()');return;
	        }
	        if (!(arguments[1] instanceof am)) {
	            q._$li('err : a[0] is _$6 LDTransform @LDGL.clip()');return;
	        }
	        var aM = au._$B;
	        var aO = aI;
	        var aR = arguments;
	        aH.beginPath();
	        if (aO) {
	            aO._$PS(aR[2], aR[3], aM);
	            aH.moveTo(aM[0], aM[1]);
	            for (var aL = 4; aL < aR.length; aL += 2) {
	                aO._$PS(aR[aL], aR[aL + 1], aM);
	                aH.lineTo(aM[0], aM[1]);
	            }
	        } else {
	            aH.moveTo(aR[2], aR[3]);for (var aL = 4; aL < aR.length; aL += 2) {
	                aH.lineTo(aR[aL], aR[aL + 1]);
	            }
	        }aH.clip();
	    };
	    au.createCanvas = function (aH, aJ) {
	        var aI = document.createElement('canvas');
	        aI.setAttribute('width', aH);
	        aI.setAttribute('height', aJ);
	        if (!aI) {
	            q._$li('err : ' + aI);
	        }
	        return aI;
	    };
	    au.dumpValues = function () {
	        var aI = '';for (var aH = 0; aH < arguments.length; aH++) {
	            aI += '[' + aH + ']= ' + arguments[aH].toFixed(3) + ' , ';
	        }console.log(aI);
	    };

	    function f() {
	        if (j) {
	            return;
	        }this._$TT = null;
	        this._$LT = null;
	        this._$FS = null;
	        this._$wL = null;
	    }
	    f.prototype._$F0 = function (aH) {
	        this._$TT = aH._$_T();
	        this._$LT = aH._$_T();
	        this._$FS = aH._$_T();
	        this._$wL = aH._$nP();
	    };
	    f.prototype.getMinValue = function () {
	        return this._$TT;
	    };
	    f.prototype.getMaxValue = function () {
	        return this._$LT;
	    };
	    f.prototype.getDefaultValue = function () {
	        return this._$FS;
	    };
	    f.prototype.getParamID = function () {
	        return this._$wL;
	    };

	    function B(aH) {
	        if (j) {
	            return;
	        }this._$e0 = null;
	        this._$IP = null;
	        this._$JS = false;
	        this._$AT = true;
	        this._$e0 = aH;
	        this.totalScale = 1;
	        this._$7s = 1;
	        this.totalOpacity = 1;
	    }
	    B.prototype._$yo = function () {
	        return this._$AT && !this._$JS;
	    };
	    B.prototype._$hS = function (aH) {
	        this._$AT = aH;
	    };
	    B.prototype._$GT = function () {
	        return this._$e0;
	    };
	    B.prototype._$l2 = function (aH) {
	        this._$IP = aH;
	    };
	    B.prototype.getPartsIndex = function () {
	        return this._$IP;
	    };
	    B.prototype._$x2 = function () {
	        return this._$JS;
	    };
	    B.prototype._$Ib = function (aH) {
	        this._$JS = aH;
	    };
	    B.prototype.getTotalScale = function () {
	        return this.totalScale;
	    };
	    B.prototype.setTotalScale_notForClient = function (aH) {
	        this.totalScale = aH;
	    };
	    B.prototype.getInterpolatedOpacity = function () {
	        return this._$7s;
	    };
	    B.prototype.setInterpolatedOpacity = function (aH) {
	        this._$7s = aH;
	    };
	    B.prototype.getTotalOpacity = function (aH) {
	        return this.totalOpacity;
	    };
	    B.prototype.setTotalOpacity = function (aH) {
	        this.totalOpacity = aH;
	    };

	    function Q() {}Q._$2s = '2.1.00_1';
	    Q._$Kr = 201001000;
	    Q._$sP = true;
	    Q._$so = true;
	    Q._$cb = false;
	    Q._$3T = true;
	    Q._$Ts = true;
	    Q._$fb = true;
	    Q._$ts = true;
	    Q.L2D_DEFORMER_EXTEND = true;
	    Q._$Wb = false;
	    Q._$yr = false;
	    Q._$Zs = false;
	    Q.L2D_NO_ERROR = 0;
	    Q._$i7 = 1000;
	    Q._$9s = 1001;
	    Q._$es = 1100;
	    Q._$r7 = 2000;
	    Q._$07 = 2001;
	    Q._$b7 = 2002;
	    Q._$H7 = 4000;
	    Q.L2D_COLOR_BLEND_MODE_MULT = 0;
	    Q.L2D_COLOR_BLEND_MODE_ADD = 1;
	    Q.L2D_COLOR_BLEND_MODE_INTERPOLATE = 2;
	    Q._$6b = true;
	    Q._$cT = 0;
	    Q.clippingMaskBufferSize = 256;
	    Q.glContext = new Array();
	    Q.frameBuffers = new Array();
	    Q.fTexture = new Array();
	    Q.IGNORE_CLIP = false;
	    Q.IGNORE_EXPAND = false;
	    Q.EXPAND_W = 2;
	    Q.USE_ADJUST_TRANSLATION = true;
	    Q.USE_CANVAS_TRANSFORM = true;
	    Q.USE_CACHED_POLYGON_IMAGE = false;
	    Q.DEBUG_DATA = {};
	    Q.PROFILE_IOS_SPEED = { PROFILE_NAME: 'iOS Speed', USE_ADJUST_TRANSLATION: true, USE_CACHED_POLYGON_IMAGE: true, EXPAND_W: 4 };
	    Q.PROFILE_IOS_QUALITY = { PROFILE_NAME: 'iOS HiQ', USE_ADJUST_TRANSLATION: true, USE_CACHED_POLYGON_IMAGE: false, EXPAND_W: 2 };
	    Q.PROFILE_IOS_DEFAULT = Q.PROFILE_IOS_QUALITY;
	    Q.PROFILE_ANDROID = { PROFILE_NAME: 'Android', USE_ADJUST_TRANSLATION: false, USE_CACHED_POLYGON_IMAGE: false, EXPAND_W: 2 };
	    Q.PROFILE_DESKTOP = { PROFILE_NAME: 'Desktop', USE_ADJUST_TRANSLATION: false, USE_CACHED_POLYGON_IMAGE: false, EXPAND_W: 2 };
	    Q.initProfile = function () {
	        if (r.isIOS()) {
	            Q.setupProfile(Q.PROFILE_IOS_DEFAULT);
	        } else {
	            if (r.isAndroid()) {
	                Q.setupProfile(Q.PROFILE_ANDROID);
	            } else {
	                Q.setupProfile(Q.PROFILE_DESKTOP);
	            }
	        }
	    };
	    Q.setupProfile = function (aI, aJ) {
	        if (typeof aI === 'number') {
	            switch (aI) {
	                case 9901:
	                    aI = Q.PROFILE_IOS_SPEED;
	                    break;
	                case 9902:
	                    aI = Q.PROFILE_IOS_QUALITY;
	                    break;
	                case 9903:
	                    aI = Q.PROFILE_IOS_DEFAULT;
	                    break;
	                case 9904:
	                    aI = Q.PROFILE_ANDROID;
	                    break;
	                case 9905:
	                    aI = Q.PROFILE_DESKTOP;
	                    break;
	                default:
	                    alert('profile _$6 _$Ui : ' + aI);
	                    break;
	            }
	        }
	        if (arguments.length < 2) {
	            aJ = true;
	        }
	        if (aJ) {
	            console.log('profile : ' + aI.PROFILE_NAME);
	        }
	        for (var aH in aI) {
	            Q[aH] = aI[aH];if (aJ) {
	                console.log('  [' + aH + '] = ' + aI[aH]);
	            }
	        }
	    };
	    Q.init = function () {
	        if (Q._$6b) {
	            console.log('Live2D %s', Q._$2s);
	            Q._$6b = false;
	            Q.initProfile();
	        }
	    };
	    Q.getVersionStr = function () {
	        return Q._$2s;
	    };
	    Q.getVersionNo = function () {
	        return Q._$Kr;
	    };
	    Q._$sT = function (aH) {
	        Q._$cT = aH;
	    };
	    Q.getError = function () {
	        var aH = Q._$cT;
	        Q._$cT = 0;
	        return aH;
	    };
	    Q.dispose = function () {
	        Q.glContext = [];
	        Q.frameBuffers = [];
	        Q.fTexture = [];
	    };
	    Q.setGL = function (aJ, aI) {
	        var aH = aI || 0;
	        Q.glContext[aH] = aJ;
	    };
	    Q.getGL = function (aH) {
	        return Q.glContext[aH];
	    };
	    Q.setClippingMaskBufferSize = function (aH) {
	        Q.clippingMaskBufferSize = aH;
	    };
	    Q.getClippingMaskBufferSize = function () {
	        return Q.clippingMaskBufferSize;
	    };
	    Q.deleteBuffer = function (aI) {
	        var aH = Q.getGL(aI);
	        aH.deleteFramebuffer(Q.frameBuffers[aI].framebuffer);
	        delete Q.frameBuffers[aI];
	        delete Q.glContext[aI];
	    };

	    function A() {}A._$r2 = function (aH) {
	        if (aH < 0) {
	            return 0;
	        } else {
	            if (aH > 1) {
	                return 1;
	            }
	        }return 0.5 - 0.5 * Math.cos(aH * aC.PI_F);
	    };

	    function J(aH) {
	        if (j) {
	            return;
	        }this._$ib = aH;
	    }J._$fr = -1;
	    J.prototype.toString = function () {
	        return this._$ib;
	    };

	    function b() {
	        if (j) {
	            return;
	        }a.prototype.constructor.call(this);
	        this._$LP = -1;
	        this._$d0 = 0;
	        this._$Yo = 0;
	        this._$JP = null;
	        this._$5P = null;
	        this._$BP = null;
	        this._$Eo = null;
	        this._$Qi = null;
	        this._$6s = b._$ms;
	        this.culling = true;
	        this.gl_cacheImage = null;
	        this.instanceNo = b._$42++;
	    }
	    b.prototype = new a();
	    b._$42 = 0;
	    b._$Os = 30;
	    b._$ms = 0;
	    b._$ns = 1;
	    b._$_s = 2;
	    b._$gT = new Array();
	    b.prototype._$_S = function (aH) {
	        this._$LP = aH;
	    };
	    b.prototype.getTextureNo = function () {
	        return this._$LP;
	    };
	    b.prototype._$ZL = function () {
	        return this._$Qi;
	    };
	    b.prototype._$H2 = function () {
	        return this._$JP;
	    };
	    b.prototype.getNumPoints = function () {
	        return this._$d0;
	    };
	    b.prototype.getType = function () {
	        return a._$wb;
	    };
	    b.prototype._$B2 = function (aL, aH, aO) {
	        var aM = aH;
	        var aN = aM._$hr != null ? aM._$hr : aM._$Cr;
	        var aK = aw._$do;
	        switch (aK) {
	            default:
	            case aw._$Ms:
	                throw new Error('_$L _$ro ');
	            case aw._$Qs:
	                for (var aJ = this._$d0 - 1; aJ >= 0; --aJ) {
	                    var aI = aJ * aw._$No;
	                    aN[aI + 4] = aO;
	                }
	                break;
	        }
	    };
	    b.prototype._$zP = function () {
	        this._$GS = new g();
	        this._$GS._$zP();
	    };
	    b.prototype._$F0 = function (aK) {
	        a.prototype._$F0.call(this, aK);
	        this._$LP = aK._$6L();
	        this._$d0 = aK._$6L();
	        this._$Yo = aK._$6L();
	        var aH = aK._$nP();
	        this._$BP = new Int16Array(this._$Yo * 3);
	        for (var aJ = this._$Yo * 3 - 1; aJ >= 0; --aJ) {
	            this._$BP[aJ] = aH[aJ];
	        }this._$Eo = aK._$nP();
	        this._$Qi = aK._$nP();
	        if (aK.getFormatVersion() >= ay._$s7) {
	            this._$JP = aK._$6L();if (this._$JP != 0) {
	                if ((this._$JP & 1) != 0) {
	                    var aI = aK._$6L();if (this._$5P == null) {
	                        this._$5P = new Object();
	                    }this._$5P._$Hb = parseInt(aI);
	                }if ((this._$JP & b._$Os) != 0) {
	                    this._$6s = (this._$JP & b._$Os) >> 1;
	                } else {
	                    this._$6s = b._$ms;
	                }if ((this._$JP & 32) != 0) {
	                    this.culling = false;
	                }
	            }
	        } else {
	            this._$JP = 0;
	        }
	    };
	    b.prototype.init = function (aL) {
	        var aN = new ag(this);
	        var aI = this._$d0 * aw._$No;
	        var aH = this._$32();
	        if (aN._$Cr != null) {
	            aN._$Cr = null;
	        }aN._$Cr = new Float32Array(aI);
	        if (aN._$hr != null) {
	            aN._$hr = null;
	        }aN._$hr = aH ? new Float32Array(aI) : null;
	        var aM = aw._$do;
	        switch (aM) {
	            default:
	            case aw._$Ms:
	                if (aw._$Ls) {
	                    for (var aJ = this._$d0 - 1; aJ >= 0; --aJ) {
	                        var aO = aJ << 1;
	                        this._$Qi[aO + 1] = 1 - this._$Qi[aO + 1];
	                    }
	                }
	                break;
	            case aw._$Qs:
	                for (var aJ = this._$d0 - 1; aJ >= 0; --aJ) {
	                    var aO = aJ << 1;
	                    var aK = aJ * aw._$No;
	                    var aQ = this._$Qi[aO];
	                    var aP = this._$Qi[aO + 1];
	                    aN._$Cr[aK] = aQ;
	                    aN._$Cr[aK + 1] = aP;
	                    aN._$Cr[aK + 4] = 0;
	                    if (aH) {
	                        aN._$hr[aK] = aQ;
	                        aN._$hr[aK + 1] = aP;
	                        aN._$hr[aK + 4] = 0;
	                    }
	                }
	                break;
	        }
	        return aN;
	    };
	    b.prototype._$Nr = function (aJ, aH) {
	        var aK = aH;
	        if (!(this == aK._$GT())) {
	            console.log('### assert!! ### ');
	        }
	        if (!this._$GS._$Ur(aJ)) {
	            return;
	        }a.prototype._$Nr.call(this, aJ, aK);
	        if (aK._$IS[0]) {
	            return;
	        }
	        var aI = b._$gT;
	        aI[0] = false;
	        aG._$Vr(aJ, this._$GS, aI, this._$d0, this._$Eo, aK._$Cr, aw._$i2, aw._$No);
	    };
	    b.prototype._$2b = function (aK, aI) {
	        try {
	            if (!(this == aI._$GT())) {
	                console.log('### assert!! ### ');
	            }
	            var aL = false;
	            if (aI._$IS[0]) {
	                aL = true;
	            }
	            var aM = aI;
	            if (!aL) {
	                a.prototype._$2b.call(this, aK);
	                if (this._$32()) {
	                    var aH = this.getTargetBaseDataID();
	                    if (aM._$8r == a._$ur) {
	                        aM._$8r = aK.getBaseDataIndex(aH);
	                    }
	                    if (aM._$8r < 0) {
	                        if (Q._$so) {
	                            q._$li('_$L _$0P _$G :: %s', aH);
	                        }
	                    } else {
	                        var aO = aK.getBaseData(aM._$8r);
	                        var aJ = aK._$q2(aM._$8r);
	                        if (aO != null && !aJ._$x2()) {
	                            aO._$nb(aK, aJ, aM._$Cr, aM._$hr, this._$d0, aw._$i2, aw._$No);
	                            aM._$AT = true;
	                        } else {
	                            aM._$AT = false;
	                        }aM.baseOpacity = aJ.getTotalOpacity();
	                    }
	                }
	            }
	        } catch (aN) {
	            throw aN;
	        }
	    };
	    b.prototype.draw = function (aN, aK, aI) {
	        if (!(this == aI._$GT())) {
	            console.log('### assert!! ### ');
	        }
	        if (aI._$IS[0]) {
	            return;
	        }
	        var aL = aI;
	        var aJ = this._$LP;
	        if (aJ < 0) {
	            aJ = 1;
	        }
	        var aH = this.getOpacity(aK, aL) * aI._$VS * aI.baseOpacity;
	        var aM = aL._$hr != null ? aL._$hr : aL._$Cr;
	        aN.setClipBufPre_clipContextForDraw(aI.clipBufPre_clipContext);
	        aN._$WP(this.culling);
	        aN._$Uo(aJ, 3 * this._$Yo, this._$BP, aM, this._$Qi, aH, this._$6s, aL);
	    };
	    b.prototype.dump = function () {
	        console.log('  _$yi( %d ) , _$d0( %d ) , _$Yo( %d ) \n', this._$LP, this._$d0, this._$Yo);
	        console.log('  _$Oi _$di = { ');
	        for (var aJ = 0; aJ < this._$BP.length; aJ++) {
	            console.log('%5d ,', this._$BP[aJ]);
	        }console.log('\n  _$5i _$30');
	        for (var aJ = 0; aJ < this._$Eo.length; aJ++) {
	            console.log('\n    _$30[%d] = ', aJ);var aH = this._$Eo[aJ];for (var aI = 0; aI < aH.length; aI++) {
	                console.log('%6.2f, ', aH[aI]);
	            }
	        }console.log('\n');
	    };
	    b.prototype._$72 = function (aH) {
	        if (this._$5P == null) {
	            return null;
	        }return this._$5P[aH];
	    };
	    b.prototype.getIndexArray = function () {
	        return this._$BP;
	    };

	    function ag(aH) {
	        aB.prototype.constructor.call(this, aH);
	        this._$8r = a._$ur;
	        this._$Cr = null;
	        this._$hr = null;
	    }
	    ag.prototype = new aB();
	    ag.prototype.getTransformedPoints = function () {
	        return this._$hr != null ? this._$hr : this._$Cr;
	    };

	    function k() {
	        if (j) {
	            return;
	        }this.x = null;
	        this.y = null;
	    }
	    k.prototype._$HT = function (aH) {
	        this.x = aH.x;
	        this.y = aH.y;
	    };
	    k.prototype._$HT = function (aH, aI) {
	        this.x = aH;
	        this.y = aI;
	    };

	    function l(aH) {
	        if (j) {
	            return;
	        }aa.prototype.constructor.call(this);
	        this.drawParamWebGL = new C(aH);
	        this.drawParamWebGL.setGL(Q.getGL(aH));
	    }
	    l.prototype = new aa();
	    l.loadModel = function (aI) {
	        var aH = new l();
	        aa._$62(aH, aI);
	        return aH;
	    };
	    l.loadModel = function (aI, aK) {
	        var aJ = aK || 0;
	        var aH = new l(aJ);
	        aa._$62(aH, aI);
	        return aH;
	    };
	    l._$to = function () {
	        var aH = new l();return aH;
	    };
	    l._$er = function (aM) {
	        var aJ = new _$5('../_$_r/_$t0/_$Ri/_$_P._$d');if (aJ.exists() == false) {
	            throw new _$ls('_$t0 _$_ _$6 _$Ui :: ' + aJ._$PL());
	        }var aH = ['../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1', '../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1', '../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1', '../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1'];var aK = l.loadModel(aJ._$3b());for (var aI = 0; aI < aH.length; aI++) {
	            var aL = new _$5(aH[aI]);if (aL.exists() == false) {
	                throw new _$ls('_$t0 _$_ _$6 _$Ui :: ' + aL._$PL());
	            }aK.setTexture(aI, _$nL._$_o(aM, aL._$3b()));
	        }return aK;
	    };
	    l.prototype.setGL = function (aH) {
	        Q.setGL(aH);
	    };
	    l.prototype.setTransform = function (aH) {
	        this.drawParamWebGL.setTransform(aH);
	    };
	    l.prototype.update = function () {
	        this._$5S.update();
	        this._$5S.preDraw(this.drawParamWebGL);
	    };
	    l.prototype.draw = function () {
	        this._$5S.draw(this.drawParamWebGL);
	    };
	    l.prototype._$K2 = function () {
	        this.drawParamWebGL._$K2();
	    };
	    l.prototype.setTexture = function (aI, aH) {
	        if (this.drawParamWebGL == null) {
	            q._$li('_$Yi for QT _$ki / _$XS() is _$6 _$ui!!');
	        }this.drawParamWebGL.setTexture(aI, aH);
	    };
	    l.prototype.setTexture = function (aI, aH) {
	        if (this.drawParamWebGL == null) {
	            q._$li('_$Yi for QT _$ki / _$XS() is _$6 _$ui!!');
	        }this.drawParamWebGL.setTexture(aI, aH);
	    };
	    l.prototype._$Rs = function () {
	        return this.drawParamWebGL._$Rs();
	    };
	    l.prototype._$Ds = function (aH) {
	        this.drawParamWebGL._$Ds(aH);
	    };
	    l.prototype.getDrawParam = function () {
	        return this.drawParamWebGL;
	    };
	    l.prototype.setMatrix = function (aH) {
	        this.drawParamWebGL.setMatrix(aH);
	    };
	    l.prototype.setPremultipliedAlpha = function (aH) {
	        this.drawParamWebGL.setPremultipliedAlpha(aH);
	    };
	    l.prototype.isPremultipliedAlpha = function () {
	        return this.drawParamWebGL.isPremultipliedAlpha();
	    };
	    l.prototype.setAnisotropy = function (aH) {
	        this.drawParamWebGL.setAnisotropy(aH);
	    };
	    l.prototype.getAnisotropy = function () {
	        return this.drawParamWebGL.getAnisotropy();
	    };

	    function V() {
	        if (j) {
	            return;
	        }this.motions = null;
	        this._$eb = false;
	        this.motions = new Array();
	    }
	    V.prototype._$tb = function () {
	        return this.motions;
	    };
	    V.prototype.startMotion = function (aJ, aI) {
	        var aL = null;
	        var aH = this.motions.length;
	        for (var aK = 0; aK < aH; ++aK) {
	            aL = this.motions[aK];if (aL == null) {
	                continue;
	            }aL._$qS(aL._$w0.getFadeOut());if (this._$eb) {
	                q._$Ji('MotionQueueManager[size:%2d]->startMotion() / start _$K _$3 (m%d)\n', aH, aL._$sr);
	            }
	        }
	        if (aJ == null) {
	            return -1;
	        }aL = new M();
	        aL._$w0 = aJ;
	        this.motions.push(aL);
	        var aN = aL._$sr;
	        if (this._$eb) {
	            q._$Ji('MotionQueueManager[size:%2d]->startMotion() / new _$w0 (m%d)\n', aH, aN);
	        }
	        return aN;
	    };
	    V.prototype.updateParam = function (aJ) {
	        try {
	            var aI = false;
	            for (var aK = 0; aK < this.motions.length; aK++) {
	                var aL = this.motions[aK];
	                if (aL == null) {
	                    this.motions.splice(aK, 1);
	                    aK--;
	                    continue;
	                }
	                var aH = aL._$w0;
	                if (aH == null) {
	                    this.motions = this.motions.splice(aK, 1);
	                    aK--;
	                    continue;
	                }
	                aH.updateParam(aJ, aL);
	                aI = true;
	                if (aL.isFinished()) {
	                    if (this._$eb) {
	                        q._$Ji('MotionQueueManager[size:%2d]->updateParam() / _$T0 _$w0 (m%d)\n', this.motions.length - 1, aL._$sr);
	                    }this.motions.splice(aK, 1);
	                    aK--;
	                }
	            }
	            return aI;
	        } catch (aM) {
	            q._$li(aM);return true;
	        }
	    };
	    V.prototype.isFinished = function (aK) {
	        if (arguments.length >= 1) {
	            for (var aI = 0; aI < this.motions.length; aI++) {
	                var aJ = this.motions[aI];if (aJ == null) {
	                    continue;
	                }if (aJ._$sr == aK && !aJ.isFinished()) {
	                    return false;
	                }
	            }return true;
	        } else {
	            for (var aI = 0; aI < this.motions.length; aI++) {
	                var aJ = this.motions[aI];
	                if (aJ == null) {
	                    this.motions.splice(aI, 1);
	                    aI--;
	                    continue;
	                }
	                var aH = aJ._$w0;
	                if (aH == null) {
	                    this.motions.splice(aI, 1);
	                    aI--;
	                    continue;
	                }
	                if (!aJ.isFinished()) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    };
	    V.prototype.stopAllMotions = function () {
	        for (var aI = 0; aI < this.motions.length; aI++) {
	            var aJ = this.motions[aI];
	            if (aJ == null) {
	                this.motions.splice(aI, 1);
	                aI--;
	                continue;
	            }
	            var aH = aJ._$w0;
	            if (aH == null) {
	                this.motions.splice(aI, 1);
	                aI--;
	                continue;
	            }
	            {
	                this.motions.splice(aI, 1);
	                aI--;
	            }
	        }
	    };
	    V.prototype._$Zr = function (aH) {
	        this._$eb = aH;
	    };
	    V.prototype._$e = function () {
	        console.log('-- _$R --\n');
	        for (var aH = 0; aH < this.motions.length; aH++) {
	            var aI = this.motions[aH];
	            var aJ = aI._$w0;
	            console.log('MotionQueueEnt[%d] :: %s\n', this.motions.length, aJ.toString());
	        }
	    };

	    function M() {
	        this._$w0 = null;
	        this._$AT = true;
	        this._$9L = false;
	        this._$z2 = -1;
	        this._$bs = -1;
	        this._$Do = -1;
	        this._$sr = null;
	        this._$sr = M._$Gs++;
	    }
	    M._$Gs = 0;
	    M.prototype.isFinished = function () {
	        return this._$9L;
	    };
	    M.prototype._$qS = function (aJ) {
	        var aI = P.getUserTimeMSec();var aH = aI + aJ;if (this._$Do < 0 || aH < this._$Do) {
	            this._$Do = aH;
	        }
	    };
	    M.prototype._$Bs = function () {
	        return this._$sr;
	    };

	    function am() {
	        this.m = new Array(1, 0, 0, 0, 1, 0, 0, 0, 1);
	    }am.prototype.setContext = function (aI) {
	        var aH = this.m;
	        aI.transform(aH[0], aH[1], aH[3], aH[4], aH[6], aH[7]);
	    };
	    am.prototype.toString = function () {
	        var aI = 'LDTransform { ';for (var aH = 0; aH < 9; aH++) {
	            aI += this.m[aH].toFixed(2) + ' ,';
	        }aI += ' }';return aI;
	    };
	    am.prototype.identity = function () {
	        var aH = this.m;
	        aH[0] = aH[4] = aH[8] = 1;
	        aH[1] = aH[2] = aH[3] = aH[5] = aH[6] = aH[7] = 0;
	    };
	    am.prototype._$PS = function (aI, aK, aJ) {
	        if (aJ == null) {
	            aJ = new Array(0, 0);
	        }
	        var aH = this.m;
	        aJ[0] = aH[0] * aI + aH[3] * aK + aH[6];
	        aJ[1] = aH[1] * aI + aH[4] * aK + aH[7];
	        return aJ;
	    };
	    am.prototype._$P2 = function (aK) {
	        if (!aK) {
	            aK = new am();
	        }
	        var aI = this.m;
	        var aT = aI[0];
	        var aS = aI[1];
	        var aR = aI[2];
	        var aQ = aI[3];
	        var aP = aI[4];
	        var aO = aI[5];
	        var aN = aI[6];
	        var aM = aI[7];
	        var aL = aI[8];
	        var aJ = aT * aP * aL + aS * aO * aN + aR * aQ * aM - aT * aO * aM - aR * aP * aN - aS * aQ * aL;
	        if (aJ == 0) {
	            return null;
	        } else {
	            var aH = 1 / aJ;
	            aK.m[0] = aH * (aP * aL - aM * aO);
	            aK.m[1] = aH * (aM * aR - aS * aL);
	            aK.m[2] = aH * (aS * aO - aP * aR);
	            aK.m[3] = aH * (aN * aO - aQ * aL);
	            aK.m[4] = aH * (aT * aL - aN * aR);
	            aK.m[5] = aH * (aQ * aR - aT * aO);
	            aK.m[6] = aH * (aQ * aM - aN * aP);
	            aK.m[7] = aH * (aN * aS - aT * aM);
	            aK.m[8] = aH * (aT * aP - aQ * aS);
	            return aK;
	        }
	    };
	    am.prototype.transform = function (aI, aK, aJ) {
	        if (aJ == null) {
	            aJ = new Array(0, 0);
	        }
	        var aH = this.m;
	        aJ[0] = aH[0] * aI + aH[3] * aK + aH[6];
	        aJ[1] = aH[1] * aI + aH[4] * aK + aH[7];
	        return aJ;
	    };
	    am.prototype.translate = function (aI, aJ) {
	        var aH = this.m;
	        aH[6] = aH[0] * aI + aH[3] * aJ + aH[6];
	        aH[7] = aH[1] * aI + aH[4] * aJ + aH[7];
	        aH[8] = aH[2] * aI + aH[5] * aJ + aH[8];
	    };
	    am.prototype.scale = function (aJ, aI) {
	        var aH = this.m;
	        aH[0] *= aJ;
	        aH[1] *= aJ;
	        aH[2] *= aJ;
	        aH[3] *= aI;
	        aH[4] *= aI;
	        aH[5] *= aI;
	    };
	    am.prototype.shear = function (aM, aL) {
	        var aH = this.m;
	        var aK = aH[0] + aH[3] * aL;
	        var aJ = aH[1] + aH[4] * aL;
	        var aI = aH[2] + aH[5] * aL;
	        aH[3] = aH[0] * aM + aH[3];
	        aH[4] = aH[1] * aM + aH[4];
	        aH[5] = aH[2] * aM + aH[5];
	        aH[0] = aK;
	        aH[1] = aJ;
	        aH[2] = aI;
	    };
	    am.prototype.rotate = function (aM) {
	        var aH = this.m;
	        var aN = Math.cos(aM);
	        var aL = Math.sin(aM);
	        var aK = aH[0] * aN + aH[3] * aL;
	        var aJ = aH[1] * aN + aH[4] * aL;
	        var aI = aH[2] * aN + aH[5] * aL;
	        aH[3] = -aH[0] * aL + aH[3] * aN;
	        aH[4] = -aH[1] * aL + aH[4] * aN;
	        aH[5] = -aH[2] * aL + aH[5] * aN;
	        aH[0] = aK;
	        aH[1] = aJ;
	        aH[2] = aI;
	    };
	    am.prototype.concatenate = function (aL) {
	        var aO = this.m;
	        var aM = aL.m;
	        var aS = aO[0] * aM[0] + aO[3] * aM[1] + aO[6] * aM[2];
	        var aR = aO[1] * aM[0] + aO[4] * aM[1] + aO[7] * aM[2];
	        var aQ = aO[2] * aM[0] + aO[5] * aM[1] + aO[8] * aM[2];
	        var aP = aO[0] * aM[3] + aO[3] * aM[4] + aO[6] * aM[5];
	        var aN = aO[1] * aM[3] + aO[4] * aM[4] + aO[7] * aM[5];
	        var aK = aO[2] * aM[3] + aO[5] * aM[4] + aO[8] * aM[5];
	        var aJ = aO[0] * aM[6] + aO[3] * aM[7] + aO[6] * aM[8];
	        var aI = aO[1] * aM[6] + aO[4] * aM[7] + aO[7] * aM[8];
	        var aH = aO[2] * aM[6] + aO[5] * aM[7] + aO[8] * aM[8];
	        m[0] = aS;
	        m[1] = aR;
	        m[2] = aQ;
	        m[3] = aP;
	        m[4] = aN;
	        m[5] = aK;
	        m[6] = aJ;
	        m[7] = aI;
	        m[8] = aH;
	    };

	    function n(aH) {
	        if (j) {
	            return;
	        }ak.prototype.constructor.call(this, aH);
	    }n.prototype = new ak();
	    n._$eT = null;
	    n._$tP = new Object();
	    n._$2o = function () {
	        if (n._$eT == null) {
	            n._$eT = n.getID('DST_BASE');
	        }return n._$eT;
	    };
	    n._$27 = function () {
	        n._$tP.clear();
	        n._$eT = null;
	    };
	    n.getID = function (aH) {
	        var aI = n._$tP[aH];
	        if (aI == null) {
	            aI = new n(aH);
	            n._$tP[aH] = aI;
	        }
	        return aI;
	    };
	    n.prototype._$3s = function () {
	        return new n();
	    };

	    function C(aH) {
	        if (j) {
	            return;
	        }ax.prototype.constructor.call(this);
	        this.textures = new Array();
	        this.transform = null;
	        this.gl = null;
	        this.glno = aH;
	        this.firstDraw = true;
	        this.anisotropyExt = null;
	        this.maxAnisotropy = 0;
	        this._$As = 32;
	        this._$Gr = false;
	        this._$NT = null;
	        this._$vS = null;
	        this._$no = null;
	        this.vertShader = null;
	        this.fragShader = null;
	        this.vertShaderOff = null;
	        this.fragShaderOff = null;
	    }
	    C.prototype = new ax();
	    C._$9r = function (aH) {
	        var aI = new Float32Array(aH);return aI;
	    };
	    C._$vb = function (aH) {
	        var aI = new Int16Array(aH);return aI;
	    };
	    C._$cr = function (aI, aH) {
	        if (aI == null || aI._$yL() < aH.length) {
	            aI = C._$9r(aH.length * 2);
	            aI.put(aH);
	            aI._$oT(0);
	        } else {
	            aI.clear();
	            aI.put(aH);
	            aI._$oT(0);
	        }
	        return aI;
	    };
	    C._$mb = function (aI, aH) {
	        if (aI == null || aI._$yL() < aH.length) {
	            aI = C._$vb(aH.length * 2);
	            aI.put(aH);
	            aI._$oT(0);
	        } else {
	            aI.clear();
	            aI.put(aH);
	            aI._$oT(0);
	        }
	        return aI;
	    };
	    C._$Hs = function () {
	        return this._$Gr;
	    };
	    C._$as = function (aH) {
	        this._$Gr = aH;
	    };
	    C.prototype.getGL = function () {
	        return this.gl;
	    };
	    C.prototype.setGL = function (aH) {
	        this.gl = aH;
	    };
	    C.prototype.setTransform = function (aH) {
	        this.transform = aH;
	    };
	    C.prototype._$ZT = function () {
	        var aH = this.gl;
	        if (this.firstDraw) {
	            this.initShader();
	            this.firstDraw = false;
	            this.anisotropyExt = aH.getExtension('EXT_texture_filter_anisotropic') || aH.getExtension('WEBKIT_EXT_texture_filter_anisotropic') || aH.getExtension('MOZ_EXT_texture_filter_anisotropic');
	            if (this.anisotropyExt) {
	                this.maxAnisotropy = aH.getParameter(this.anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
	            }
	        }
	        aH.disable(aH.SCISSOR_TEST);
	        aH.disable(aH.STENCIL_TEST);
	        aH.disable(aH.DEPTH_TEST);
	        aH.frontFace(aH.CW);
	        aH.enable(aH.BLEND);
	        aH.colorMask(1, 1, 1, 1);
	        aH.bindBuffer(aH.ARRAY_BUFFER, null);
	        aH.bindBuffer(aH.ELEMENT_ARRAY_BUFFER, null);
	    };
	    C.prototype._$Uo = function (aS, aT, aL, aU, aV, aN, aM, aO) {
	        if (aN < 0.01 && this.clipBufPre_clipContextMask == null) {
	            return;
	        }
	        var a0 = this.gl;
	        if (this.gl == null) {
	            throw new Error('gl is null');
	        }
	        var a1 = false;
	        var aP = 1;
	        var a3 = 1;
	        var aZ = 1;
	        var aW = this._$C0 * aP * aN;
	        var a2 = this._$tT * a3 * aN;
	        var a5 = this._$WL * aZ * aN;
	        var a7 = this._$lT * aN;
	        if (this.clipBufPre_clipContextMask != null) {
	            a0.frontFace(a0.CCW);
	            a0.useProgram(this.shaderProgram);
	            this._$vS = T(a0, this._$vS, aU);
	            this._$no = L(a0, this._$no, aL);
	            a0.enableVertexAttribArray(this.a_position_Loc);
	            a0.vertexAttribPointer(this.a_position_Loc, 2, a0.FLOAT, false, 0, 0);
	            this._$NT = T(a0, this._$NT, aV);
	            a0.activeTexture(a0.TEXTURE1);
	            a0.bindTexture(a0.TEXTURE_2D, this.textures[aS]);
	            a0.uniform1i(this.s_texture0_Loc, 1);
	            a0.enableVertexAttribArray(this.a_texCoord_Loc);
	            a0.vertexAttribPointer(this.a_texCoord_Loc, 2, a0.FLOAT, false, 0, 0);
	            a0.uniformMatrix4fv(this.u_matrix_Loc, false, this.getClipBufPre_clipContextMask().matrixForMask);
	            var aY = this.getClipBufPre_clipContextMask().layoutChannelNo;
	            var a4 = this.getChannelFlagAsColor(aY);
	            a0.uniform4f(this.u_channelFlag, a4.r, a4.g, a4.b, a4.a);
	            var aI = this.getClipBufPre_clipContextMask().layoutBounds;
	            a0.uniform4f(this.u_baseColor_Loc, aI.x * 2 - 1, aI.y * 2 - 1, aI._$EL() * 2 - 1, aI._$5T() * 2 - 1);
	            a0.uniform1i(this.u_maskFlag_Loc, true);
	        } else {
	            a1 = this.getClipBufPre_clipContextDraw() != null;
	            if (a1) {
	                a0.useProgram(this.shaderProgramOff);
	                this._$vS = T(a0, this._$vS, aU);
	                this._$no = L(a0, this._$no, aL);
	                a0.enableVertexAttribArray(this.a_position_Loc_Off);
	                a0.vertexAttribPointer(this.a_position_Loc_Off, 2, a0.FLOAT, false, 0, 0);
	                this._$NT = T(a0, this._$NT, aV);
	                a0.activeTexture(a0.TEXTURE1);
	                a0.bindTexture(a0.TEXTURE_2D, this.textures[aS]);
	                a0.uniform1i(this.s_texture0_Loc_Off, 1);
	                a0.enableVertexAttribArray(this.a_texCoord_Loc_Off);
	                a0.vertexAttribPointer(this.a_texCoord_Loc_Off, 2, a0.FLOAT, false, 0, 0);
	                a0.uniformMatrix4fv(this.u_clipMatrix_Loc_Off, false, this.getClipBufPre_clipContextDraw().matrixForDraw);
	                a0.uniformMatrix4fv(this.u_matrix_Loc_Off, false, this.matrix4x4);
	                a0.activeTexture(a0.TEXTURE2);
	                a0.bindTexture(a0.TEXTURE_2D, Q.fTexture[this.glno]);
	                a0.uniform1i(this.s_texture1_Loc_Off, 2);
	                var aY = this.getClipBufPre_clipContextDraw().layoutChannelNo;
	                var a4 = this.getChannelFlagAsColor(aY);
	                a0.uniform4f(this.u_channelFlag_Loc_Off, a4.r, a4.g, a4.b, a4.a);
	                a0.uniform4f(this.u_baseColor_Loc_Off, aW, a2, a5, a7);
	            } else {
	                a0.useProgram(this.shaderProgram);
	                this._$vS = T(a0, this._$vS, aU);
	                this._$no = L(a0, this._$no, aL);
	                a0.enableVertexAttribArray(this.a_position_Loc);
	                a0.vertexAttribPointer(this.a_position_Loc, 2, a0.FLOAT, false, 0, 0);
	                this._$NT = T(a0, this._$NT, aV);
	                a0.activeTexture(a0.TEXTURE1);
	                a0.bindTexture(a0.TEXTURE_2D, this.textures[aS]);
	                a0.uniform1i(this.s_texture0_Loc, 1);
	                a0.enableVertexAttribArray(this.a_texCoord_Loc);
	                a0.vertexAttribPointer(this.a_texCoord_Loc, 2, a0.FLOAT, false, 0, 0);
	                a0.uniformMatrix4fv(this.u_matrix_Loc, false, this.matrix4x4);
	                a0.uniform4f(this.u_baseColor_Loc, aW, a2, a5, a7);
	                a0.uniform1i(this.u_maskFlag_Loc, false);
	            }
	        }
	        if (this.culling) {
	            this.gl.enable(a0.CULL_FACE);
	        } else {
	            this.gl.disable(a0.CULL_FACE);
	        }this.gl.enable(a0.BLEND);
	        var a6 = void 0;
	        var aX = void 0;
	        var aR = void 0;
	        var aK = void 0;
	        if (this.clipBufPre_clipContextMask != null) {
	            a6 = a0.ONE;
	            aX = a0.ONE_MINUS_SRC_ALPHA;
	            aR = a0.ONE;
	            aK = a0.ONE_MINUS_SRC_ALPHA;
	        } else {
	            switch (aM) {
	                case b._$ms:
	                    a6 = a0.ONE;
	                    aX = a0.ONE_MINUS_SRC_ALPHA;
	                    aR = a0.ONE;
	                    aK = a0.ONE_MINUS_SRC_ALPHA;
	                    break;
	                case b._$ns:
	                    a6 = a0.ONE;
	                    aX = a0.ONE;
	                    aR = a0.ZERO;
	                    aK = a0.ONE;
	                    break;
	                case b._$_s:
	                    a6 = a0.DST_COLOR;
	                    aX = a0.ONE_MINUS_SRC_ALPHA;
	                    aR = a0.ZERO;
	                    aK = a0.ONE;
	                    break;
	            }
	        }
	        a0.blendEquationSeparate(a0.FUNC_ADD, a0.FUNC_ADD);
	        a0.blendFuncSeparate(a6, aX, aR, aK);
	        if (this.anisotropyExt) {
	            a0.texParameteri(a0.TEXTURE_2D, this.anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT, this.maxAnisotropy);
	        }
	        var aJ = aL.length;
	        a0.drawElements(a0.TRIANGLES, aJ, a0.UNSIGNED_SHORT, 0);
	        a0.bindTexture(a0.TEXTURE_2D, null);
	    };

	    function T(aJ, aH, aI) {
	        if (aH == null) {
	            aH = aJ.createBuffer();
	        }aJ.bindBuffer(aJ.ARRAY_BUFFER, aH);
	        aJ.bufferData(aJ.ARRAY_BUFFER, aI, aJ.DYNAMIC_DRAW);
	        return aH;
	    }

	    function L(aJ, aH, aI) {
	        if (aH == null) {
	            aH = aJ.createBuffer();
	        }aJ.bindBuffer(aJ.ELEMENT_ARRAY_BUFFER, aH);
	        aJ.bufferData(aJ.ELEMENT_ARRAY_BUFFER, aI, aJ.DYNAMIC_DRAW);
	        return aH;
	    }
	    C.prototype._$Rs = function () {
	        throw new Error('_$Rs');
	    };
	    C.prototype._$Ds = function (aH) {
	        throw new Error('_$Ds');
	    };
	    C.prototype._$K2 = function () {
	        for (var aH = 0; aH < this.textures.length; aH++) {
	            var aI = this.textures[aH];
	            if (aI != 0) {
	                this.gl._$K2(1, this.textures, aH);
	                this.textures[aH] = null;
	            }
	        }
	    };
	    C.prototype.setTexture = function (aH, aI) {
	        this.textures[aH] = aI;
	    };
	    C.prototype.initShader = function () {
	        var aH = this.gl;
	        this.loadShaders2();
	        this.a_position_Loc = aH.getAttribLocation(this.shaderProgram, 'a_position');
	        this.a_texCoord_Loc = aH.getAttribLocation(this.shaderProgram, 'a_texCoord');
	        this.u_matrix_Loc = aH.getUniformLocation(this.shaderProgram, 'u_mvpMatrix');
	        this.s_texture0_Loc = aH.getUniformLocation(this.shaderProgram, 's_texture0');
	        this.u_channelFlag = aH.getUniformLocation(this.shaderProgram, 'u_channelFlag');
	        this.u_baseColor_Loc = aH.getUniformLocation(this.shaderProgram, 'u_baseColor');
	        this.u_maskFlag_Loc = aH.getUniformLocation(this.shaderProgram, 'u_maskFlag');
	        this.a_position_Loc_Off = aH.getAttribLocation(this.shaderProgramOff, 'a_position');
	        this.a_texCoord_Loc_Off = aH.getAttribLocation(this.shaderProgramOff, 'a_texCoord');
	        this.u_matrix_Loc_Off = aH.getUniformLocation(this.shaderProgramOff, 'u_mvpMatrix');
	        this.u_clipMatrix_Loc_Off = aH.getUniformLocation(this.shaderProgramOff, 'u_ClipMatrix');
	        this.s_texture0_Loc_Off = aH.getUniformLocation(this.shaderProgramOff, 's_texture0');
	        this.s_texture1_Loc_Off = aH.getUniformLocation(this.shaderProgramOff, 's_texture1');
	        this.u_channelFlag_Loc_Off = aH.getUniformLocation(this.shaderProgramOff, 'u_channelFlag');
	        this.u_baseColor_Loc_Off = aH.getUniformLocation(this.shaderProgramOff, 'u_baseColor');
	    };
	    C.prototype.disposeShader = function () {
	        var aH = this.gl;
	        if (this.shaderProgram) {
	            aH.deleteProgram(this.shaderProgram);
	            this.shaderProgram = null;
	        }
	        if (this.shaderProgramOff) {
	            aH.deleteProgram(this.shaderProgramOff);
	            this.shaderProgramOff = null;
	        }
	    };
	    C.prototype.compileShader = function (aJ, aN) {
	        var aM = this.gl;
	        var aH;
	        var aL = aN;
	        var aK = aM.createShader(aJ);
	        if (aK == null) {
	            q._$Ji('_$L0 to create shader');return null;
	        }aM.shaderSource(aK, aL);
	        aM.compileShader(aK);
	        var aH = aM.getShaderParameter(aK, aM.COMPILE_STATUS);
	        if (!aH) {
	            var aI = aM.getShaderInfoLog(aK);
	            q._$Ji('_$L0 to compile shader : ' + aI);
	            aM.deleteShader(aK);
	            return null;
	        }
	        return aK;
	    };
	    C.prototype.loadShaders2 = function () {
	        var aN = this.gl;
	        this.shaderProgram = aN.createProgram();
	        if (!this.shaderProgram) {
	            return false;
	        }this.shaderProgramOff = aN.createProgram();
	        if (!this.shaderProgramOff) {
	            return false;
	        }
	        var aK = 'attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_mvpMatrix * a_position;    v_texCoord = a_texCoord;}';
	        var aM = 'precision mediump float;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform vec4       u_channelFlag;uniform vec4       u_baseColor;uniform bool       u_maskFlag;void main(){    vec4 smpColor;     if(u_maskFlag){        float isInside =             step(u_baseColor.x, v_ClipPos.x/v_ClipPos.w)          * step(u_baseColor.y, v_ClipPos.y/v_ClipPos.w)          * step(v_ClipPos.x/v_ClipPos.w, u_baseColor.z)          * step(v_ClipPos.y/v_ClipPos.w, u_baseColor.w);        smpColor = u_channelFlag * texture2D(s_texture0 , v_texCoord).a * isInside;    }else{        smpColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;    }    gl_FragColor = smpColor;}';
	        var aL = 'attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;uniform mat4       u_ClipMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_ClipMatrix * a_position;    v_texCoord = a_texCoord ;}';
	        var aJ = 'precision mediump float ;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_channelFlag;uniform vec4       u_baseColor ;void main(){    vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;    vec4 clipMask = texture2D(s_texture1, v_ClipPos.xy / v_ClipPos.w) * u_channelFlag;    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;    col_formask = col_formask * maskVal;    gl_FragColor = col_formask;}';
	        this.vertShader = this.compileShader(aN.VERTEX_SHADER, aK);
	        if (!this.vertShader) {
	            q._$Ji('Vertex shader compile _$li!');return false;
	        }this.vertShaderOff = this.compileShader(aN.VERTEX_SHADER, aL);
	        if (!this.vertShaderOff) {
	            q._$Ji('OffVertex shader compile _$li!');return false;
	        }this.fragShader = this.compileShader(aN.FRAGMENT_SHADER, aM);
	        if (!this.fragShader) {
	            q._$Ji('Fragment shader compile _$li!');return false;
	        }this.fragShaderOff = this.compileShader(aN.FRAGMENT_SHADER, aJ);
	        if (!this.fragShaderOff) {
	            q._$Ji('OffFragment shader compile _$li!');return false;
	        }aN.attachShader(this.shaderProgram, this.vertShader);
	        aN.attachShader(this.shaderProgram, this.fragShader);
	        aN.attachShader(this.shaderProgramOff, this.vertShaderOff);
	        aN.attachShader(this.shaderProgramOff, this.fragShaderOff);
	        aN.linkProgram(this.shaderProgram);
	        aN.linkProgram(this.shaderProgramOff);
	        var aH = aN.getProgramParameter(this.shaderProgram, aN.LINK_STATUS);
	        if (!aH) {
	            var aI = aN.getProgramInfoLog(this.shaderProgram);
	            q._$Ji('_$L0 to link program: ' + aI);
	            if (this.vertShader) {
	                aN.deleteShader(this.vertShader);
	                this.vertShader = 0;
	            }
	            if (this.fragShader) {
	                aN.deleteShader(this.fragShader);
	                this.fragShader = 0;
	            }
	            if (this.shaderProgram) {
	                aN.deleteProgram(this.shaderProgram);
	                this.shaderProgram = 0;
	            }
	            if (this.vertShaderOff) {
	                aN.deleteShader(this.vertShaderOff);
	                this.vertShaderOff = 0;
	            }
	            if (this.fragShaderOff) {
	                aN.deleteShader(this.fragShaderOff);
	                this.fragShaderOff = 0;
	            }
	            if (this.shaderProgramOff) {
	                aN.deleteProgram(this.shaderProgramOff);
	                this.shaderProgramOff = 0;
	            }
	            return false;
	        }
	        return true;
	    };
	    C.prototype.createFramebuffer = function () {
	        var aL = this.gl;
	        var aK = Q.clippingMaskBufferSize;
	        var aJ = aL.createFramebuffer();
	        aL.bindFramebuffer(aL.FRAMEBUFFER, aJ);
	        var aH = aL.createRenderbuffer();
	        aL.bindRenderbuffer(aL.RENDERBUFFER, aH);
	        aL.renderbufferStorage(aL.RENDERBUFFER, aL.RGBA4, aK, aK);
	        aL.framebufferRenderbuffer(aL.FRAMEBUFFER, aL.COLOR_ATTACHMENT0, aL.RENDERBUFFER, aH);
	        var aI = aL.createTexture();
	        aL.bindTexture(aL.TEXTURE_2D, aI);
	        aL.texImage2D(aL.TEXTURE_2D, 0, aL.RGBA, aK, aK, 0, aL.RGBA, aL.UNSIGNED_BYTE, null);
	        aL.texParameteri(aL.TEXTURE_2D, aL.TEXTURE_MIN_FILTER, aL.LINEAR);
	        aL.texParameteri(aL.TEXTURE_2D, aL.TEXTURE_MAG_FILTER, aL.LINEAR);
	        aL.texParameteri(aL.TEXTURE_2D, aL.TEXTURE_WRAP_S, aL.CLAMP_TO_EDGE);
	        aL.texParameteri(aL.TEXTURE_2D, aL.TEXTURE_WRAP_T, aL.CLAMP_TO_EDGE);
	        aL.framebufferTexture2D(aL.FRAMEBUFFER, aL.COLOR_ATTACHMENT0, aL.TEXTURE_2D, aI, 0);
	        aL.bindTexture(aL.TEXTURE_2D, null);
	        aL.bindRenderbuffer(aL.RENDERBUFFER, null);
	        aL.bindFramebuffer(aL.FRAMEBUFFER, null);
	        Q.fTexture[this.glno] = aI;
	        return { framebuffer: aJ, renderbuffer: aH, texture: Q.fTexture[this.glno] };
	    };

	    function K(aH) {
	        if (j) {
	            return;
	        }this._$P = new Int8Array(8);
	        this._$R0 = new DataView(this._$P.buffer);
	        this._$3i = new Int8Array(1000);
	        this._$hL = 0;
	        this._$v0 = 0;
	        this._$S2 = 0;
	        this._$Ko = new Array();
	        this._$T = aH;
	        this._$F = 0;
	    }
	    K.prototype._$fP = function () {
	        var aK = this._$ST();var aJ = void 0,
	            aI = void 0,
	            aH = void 0;if ((aK & 128) == 0) {
	            return aK & 255;
	        } else {
	            if (((aJ = this._$ST()) & 128) == 0) {
	                return (aK & 127) << 7 | aJ & 127;
	            } else {
	                if (((aI = this._$ST()) & 128) == 0) {
	                    return (aK & 127) << 14 | (aJ & 127) << 7 | aI & 255;
	                } else {
	                    if (((aH = this._$ST()) & 128) == 0) {
	                        return (aK & 127) << 21 | (aJ & 127) << 14 | (aI & 127) << 7 | aH & 255;
	                    } else {
	                        throw new J('_$L _$0P  _');
	                    }
	                }
	            }
	        }
	    };
	    K.prototype.getFormatVersion = function () {
	        return this._$S2;
	    };
	    K.prototype._$gr = function (aH) {
	        this._$S2 = aH;
	    };
	    K.prototype._$3L = function () {
	        return this._$fP();
	    };
	    K.prototype._$mP = function () {
	        this._$zT();
	        this._$F += 8;
	        return this._$T.getFloat64(this._$F - 8);
	    };
	    K.prototype._$_T = function () {
	        this._$zT();
	        this._$F += 4;
	        return this._$T.getFloat32(this._$F - 4);
	    };
	    K.prototype._$6L = function () {
	        this._$zT();
	        this._$F += 4;
	        return this._$T.getInt32(this._$F - 4);
	    };
	    K.prototype._$ST = function () {
	        this._$zT();return this._$T.getInt8(this._$F++);
	    };
	    K.prototype._$9T = function () {
	        this._$zT();
	        this._$F += 2;
	        return this._$T.getInt16(this._$F - 2);
	    };
	    K.prototype._$2T = function () {
	        this._$zT();
	        this._$F += 8;
	        throw new J('_$L _$q read long');
	    };
	    K.prototype._$po = function () {
	        this._$zT();return this._$T.getInt8(this._$F++) != 0;
	    };
	    var O = true;
	    K.prototype._$bT = function () {
	        this._$zT();
	        var aH = this._$3L();
	        var aK = null;
	        if (O) {
	            try {
	                var aM = new ArrayBuffer(aH * 2);
	                aK = new Uint16Array(aM);
	                for (var aJ = 0; aJ < aH; ++aJ) {
	                    aK[aJ] = this._$T.getUint8(this._$F++);
	                }
	                return String.fromCharCode.apply(null, aK);
	            } catch (aL) {
	                O = false;
	            }
	        }
	        try {
	            var aI = new Array();if (aK == null) {
	                for (var aJ = 0; aJ < aH; ++aJ) {
	                    aI[aJ] = this._$T.getUint8(this._$F++);
	                }
	            } else {
	                for (var aJ = 0; aJ < aH; ++aJ) {
	                    aI[aJ] = aK[aJ];
	                }
	            }return String.fromCharCode.apply(null, aI);
	        } catch (aL) {
	            console.log('read utf8 / _$rT _$L0 !! : ' + aL);
	        }
	    };
	    K.prototype._$cS = function () {
	        this._$zT();
	        var aI = this._$3L();
	        var aH = new Int32Array(aI);
	        for (var aJ = 0; aJ < aI; aJ++) {
	            aH[aJ] = this._$T.getInt32(this._$F);
	            this._$F += 4;
	        }
	        return aH;
	    };
	    K.prototype._$Tb = function () {
	        this._$zT();
	        var aI = this._$3L();
	        var aH = new Float32Array(aI);
	        for (var aJ = 0; aJ < aI; aJ++) {
	            aH[aJ] = this._$T.getFloat32(this._$F);
	            this._$F += 4;
	        }
	        return aH;
	    };
	    K.prototype._$5b = function () {
	        this._$zT();
	        var aI = this._$3L();
	        var aH = new Float64Array(aI);
	        for (var aJ = 0; aJ < aI; aJ++) {
	            aH[aJ] = this._$T.getFloat64(this._$F);
	            this._$F += 8;
	        }
	        return aH;
	    };
	    K.prototype._$nP = function () {
	        return this._$Jb(-1);
	    };
	    K.prototype._$Jb = function (aJ) {
	        this._$zT();
	        if (aJ < 0) {
	            aJ = this._$3L();
	        }
	        if (aJ == ay._$7P) {
	            var aH = this._$6L();if (aH >= 0 && aH < this._$Ko.length) {
	                return this._$Ko[aH];
	            } else {
	                throw new J('_$sL _$4i @_$m0');
	            }
	        } else {
	            var aI = this._$4b(aJ);
	            this._$Ko.push(aI);
	            return aI;
	        }
	    };
	    K.prototype._$4b = function (aN) {
	        if (aN == 0) {
	            return null;
	        }
	        if (aN == 50) {
	            var aK = this._$bT();var aI = Z.getID(aK);return aI;
	        } else {
	            if (aN == 51) {
	                var aK = this._$bT();var aI = n.getID(aK);return aI;
	            } else {
	                if (aN == 134) {
	                    var aK = this._$bT();var aI = i.getID(aK);return aI;
	                } else {
	                    if (aN == 60) {
	                        var aK = this._$bT();var aI = z.getID(aK);return aI;
	                    }
	                }
	            }
	        }
	        if (aN >= 48) {
	            var aL = ay._$9o(aN);if (aL != null) {
	                aL._$F0(this);return aL;
	            } else {
	                return null;
	            }
	        }
	        switch (aN) {
	            case 1:
	                return this._$bT();
	            case 10:
	                var aM = this._$6L();
	                return new I(aM, true);
	            case 11:
	                return new av(this._$mP(), this._$mP(), this._$mP(), this._$mP());
	            case 12:
	                return new av(this._$_T(), this._$_T(), this._$_T(), this._$_T());
	            case 13:
	                return new e(this._$mP(), this._$mP());
	            case 14:
	                return new e(this._$_T(), this._$_T());
	            case 15:
	                var aH = this._$3L();
	                var aI = new Array(aH);
	                for (var aJ = 0; aJ < aH; aJ++) {
	                    aI[aJ] = this._$nP();
	                }
	                return aI;
	            case 17:
	                var aI = new aD(this._$mP(), this._$mP(), this._$mP(), this._$mP(), this._$mP(), this._$mP());
	                return aI;
	            case 21:
	                return new F(this._$6L(), this._$6L(), this._$6L(), this._$6L());
	            case 22:
	                return new k(this._$6L(), this._$6L());
	            case 23:
	                throw new Error('_$L _$ro ');
	            case 16:
	            case 25:
	                return this._$cS();
	            case 26:
	                return this._$5b();
	            case 27:
	                return this._$Tb();
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 8:
	            case 9:
	            case 18:
	            case 19:
	            case 20:
	            case 24:
	            case 28:
	                throw new J('_$6 _$q : _$nP() of 2-9 ,18,19,20,24,28 : ' + aN);
	            default:
	                throw new J('_$6 _$q : _$nP() NO _$i : ' + aN);
	        }
	    };
	    K.prototype._$8L = function () {
	        if (this._$hL == 0) {
	            this._$v0 = this._$ST();
	        } else {
	            if (this._$hL == 8) {
	                this._$v0 = this._$ST();
	                this._$hL = 0;
	            }
	        }
	        return (this._$v0 >> 7 - this._$hL++ & 1) == 1;
	    };
	    K.prototype._$zT = function () {
	        if (this._$hL != 0) {
	            this._$hL = 0;
	        }
	    };

	    function aC() {}aC._$2S = Math.PI / 180;
	    aC._$bS = Math.PI / 180;
	    aC._$wS = 180 / Math.PI;
	    aC._$NS = 180 / Math.PI;
	    aC.PI_F = Math.PI;
	    aC._$kT = [0, 0.012368, 0.024734, 0.037097, 0.049454, 0.061803, 0.074143, 0.086471, 0.098786, 0.111087, 0.12337, 0.135634, 0.147877, 0.160098, 0.172295, 0.184465, 0.196606, 0.208718, 0.220798, 0.232844, 0.244854, 0.256827, 0.268761, 0.280654, 0.292503, 0.304308, 0.316066, 0.327776, 0.339436, 0.351044, 0.362598, 0.374097, 0.385538, 0.396921, 0.408243, 0.419502, 0.430697, 0.441826, 0.452888, 0.463881, 0.474802, 0.485651, 0.496425, 0.507124, 0.517745, 0.528287, 0.538748, 0.549126, 0.559421, 0.56963, 0.579752, 0.589785, 0.599728, 0.609579, 0.619337, 0.629, 0.638567, 0.648036, 0.657406, 0.666676, 0.675843, 0.684908, 0.693867, 0.70272, 0.711466, 0.720103, 0.72863, 0.737045, 0.745348, 0.753536, 0.76161, 0.769566, 0.777405, 0.785125, 0.792725, 0.800204, 0.807561, 0.814793, 0.821901, 0.828884, 0.835739, 0.842467, 0.849066, 0.855535, 0.861873, 0.868079, 0.874153, 0.880093, 0.885898, 0.891567, 0.897101, 0.902497, 0.907754, 0.912873, 0.917853, 0.922692, 0.92739, 0.931946, 0.936359, 0.940629, 0.944755, 0.948737, 0.952574, 0.956265, 0.959809, 0.963207, 0.966457, 0.96956, 0.972514, 0.97532, 0.977976, 0.980482, 0.982839, 0.985045, 0.987101, 0.989006, 0.990759, 0.992361, 0.993811, 0.995109, 0.996254, 0.997248, 0.998088, 0.998776, 0.999312, 0.999694, 0.999924, 1];
	    aC._$92 = function (aK, aI) {
	        var aH = Math.atan2(aK[1], aK[0]);var aJ = Math.atan2(aI[1], aI[0]);return aC._$tS(aH, aJ);
	    };
	    aC._$tS = function (aI, aH) {
	        var aJ = aI - aH;while (aJ < -Math.PI) {
	            aJ += 2 * Math.PI;
	        }while (aJ > Math.PI) {
	            aJ -= 2 * Math.PI;
	        }return aJ;
	    };
	    aC._$9 = function (aH) {
	        return Math.sin(aH);
	    };
	    aC.fcos = function (aH) {
	        return Math.cos(aH);
	    };

	    function aB(aH) {
	        if (j) {
	            return;
	        }this._$e0 = null;
	        this._$IP = null;
	        this._$Us = null;
	        this._$7s = null;
	        this._$IS = [false];
	        this._$VS = null;
	        this._$AT = true;
	        this.baseOpacity = 1;
	        this.clipBufPre_clipContext = null;
	        this._$e0 = aH;
	    }
	    aB.prototype._$u2 = function () {
	        return this._$IS[0];
	    };
	    aB.prototype._$yo = function () {
	        return this._$AT && !this._$IS[0];
	    };
	    aB.prototype._$GT = function () {
	        return this._$e0;
	    };

	    function r() {}r._$W2 = 0;
	    r.SYSTEM_INFO = null;
	    r.USER_AGENT = navigator.userAgent;
	    r.isIPhone = function () {
	        if (!r.SYSTEM_INFO) {
	            r.setup();
	        }return r.SYSTEM_INFO._isIPhone;
	    };
	    r.isIOS = function () {
	        if (!r.SYSTEM_INFO) {
	            r.setup();
	        }return r.SYSTEM_INFO._isIPhone || r.SYSTEM_INFO._isIPad;
	    };
	    r.isAndroid = function () {
	        if (!r.SYSTEM_INFO) {
	            r.setup();
	        }return r.SYSTEM_INFO._isAndroid;
	    };
	    r.getOSVersion = function () {
	        if (!r.SYSTEM_INFO) {
	            r.setup();
	        }return r.SYSTEM_INFO.version;
	    };
	    r.getOS = function () {
	        if (!r.SYSTEM_INFO) {
	            r.setup();
	        }if (r.SYSTEM_INFO._isIPhone || r.SYSTEM_INFO._isIPad) {
	            return 'iOS';
	        }if (r.SYSTEM_INFO._isAndroid) {
	            return 'Android';
	        } else {
	            return '_$Q0 OS';
	        }
	    };
	    r.setup = function () {
	        var aK = r.USER_AGENT;

	        function aI(aO, aR) {
	            var aN = aO.substring(aR).split(/[ _,;\.]/);
	            var aQ = 0;
	            for (var aM = 0; aM <= 2; aM++) {
	                if (isNaN(aN[aM])) {
	                    break;
	                }
	                var aP = parseInt(aN[aM]);
	                if (aP < 0 || aP > 999) {
	                    q._$li('err : ' + aP + ' @UtHtml5.setup()');
	                    aQ = 0;
	                    break;
	                }
	                aQ += aP * Math.pow(1000, 2 - aM);
	            }
	            return aQ;
	        }
	        var aL = void 0;
	        var aJ = r.SYSTEM_INFO = { userAgent: aK };
	        if ((aL = aK.indexOf('iPhone OS ')) >= 0) {
	            aJ.os = 'iPhone';
	            aJ._isIPhone = true;
	            aJ.version = aI(aK, aL + 'iPhone OS '.length);
	        } else {
	            if ((aL = aK.indexOf('iPad')) >= 0) {
	                aL = aK.indexOf('CPU OS');
	                if (aL < 0) {
	                    q._$li(' err : ' + aK + ' @UtHtml5.setup()');return;
	                }aJ.os = 'iPad';
	                aJ._isIPad = true;
	                aJ.version = aI(aK, aL + 'CPU OS '.length);
	            } else {
	                if ((aL = aK.indexOf('Android')) >= 0) {
	                    aJ.os = 'Android';
	                    aJ._isAndroid = true;
	                    aJ.version = aI(aK, aL + 'Android '.length);
	                } else {
	                    aJ.os = '-';
	                    aJ.version = -1;
	                }
	            }
	        }
	    };
	    window.UtSystem = P;
	    window.UtDebug = q;
	    window.LDTransform = am;
	    window.LDGL = au;
	    window.Live2D = Q;
	    window.Live2DModelWebGL = l;
	    window.Live2DModelJS = v;
	    window.Live2DMotion = ao;
	    window.MotionQueueManager = V;
	    window.PhysicsHair = u;
	    window.AMotion = ah;
	    window.PartsDataID = i;
	    window.DrawDataID = Z;
	    window.BaseDataID = n;
	    window.ParamID = z;
	    Q.init();
	    var j = false;
	})();

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */
	//= ===========================================================
	//= ===========================================================
	//  class L2DBaseModel
	//= ===========================================================
	//= ===========================================================
	function L2DBaseModel() {
	  this.live2DModel = null; // ALive2DModel
	  this.modelMatrix = null; // L2DModelMatrix
	  this.eyeBlink = null; // L2DEyeBlink
	  this.physics = null; // L2DPhysics
	  this.pose = null; // L2DPose
	  this.debugMode = false;
	  this.initialized = false;
	  this.updating = false;
	  this.alpha = 1;
	  this.accAlpha = 0;
	  this.lipSync = false;
	  this.lipSyncValue = 0;
	  this.accelX = 0;
	  this.accelY = 0;
	  this.accelZ = 0;
	  this.dragX = 0;
	  this.dragY = 0;
	  this.startTimeMSec = null;
	  this.mainMotionManager = new L2DMotionManager(); // L2DMotionManager
	  this.expressionManager = new L2DMotionManager(); // L2DMotionManager
	  this.motions = {};
	  this.expressions = {};

	  this.isTexLoaded = false;
	}

	var texCounter = 0;

	//= ===========================================================
	//    L2DBaseModel # getModelMatrix()
	//= ===========================================================
	L2DBaseModel.prototype.getModelMatrix = function () {
	  return this.modelMatrix;
	};

	//= ===========================================================
	//    L2DBaseModel # setAlpha()
	//= ===========================================================
	L2DBaseModel.prototype.setAlpha = function (a /* float */) {
	  if (a > 0.999) a = 1;
	  if (a < 0.001) a = 0;
	  this.alpha = a;
	};

	//= ===========================================================
	//    L2DBaseModel # getAlpha()
	//= ===========================================================
	L2DBaseModel.prototype.getAlpha = function () {
	  return this.alpha;
	};

	//= ===========================================================
	//    L2DBaseModel # isInitialized()
	//= ===========================================================
	L2DBaseModel.prototype.isInitialized = function () {
	  return this.initialized;
	};

	//= ===========================================================
	//    L2DBaseModel # setInitialized()
	//= ===========================================================
	L2DBaseModel.prototype.setInitialized = function (v /* boolean */) {
	  this.initialized = v;
	};

	//= ===========================================================
	//    L2DBaseModel # isUpdating()
	//= ===========================================================
	L2DBaseModel.prototype.isUpdating = function () {
	  return this.updating;
	};

	//= ===========================================================
	//    L2DBaseModel # setUpdating()
	//= ===========================================================
	L2DBaseModel.prototype.setUpdating = function (v /* boolean */) {
	  this.updating = v;
	};

	//= ===========================================================
	//    L2DBaseModel # getLive2DModel()
	//= ===========================================================
	L2DBaseModel.prototype.getLive2DModel = function () {
	  return this.live2DModel;
	};

	//= ===========================================================
	//    L2DBaseModel # setLipSync()
	//= ===========================================================
	L2DBaseModel.prototype.setLipSync = function (v /* boolean */) {
	  this.lipSync = v;
	};

	//= ===========================================================
	//    L2DBaseModel # setLipSyncValue()
	//= ===========================================================
	L2DBaseModel.prototype.setLipSyncValue = function (v /* float */) {
	  this.lipSyncValue = v;
	};

	//= ===========================================================
	//    L2DBaseModel # setAccel()
	//= ===========================================================
	L2DBaseModel.prototype.setAccel = function (x /* float */, y /* float */, z /* float */) {
	  this.accelX = x;
	  this.accelY = y;
	  this.accelZ = z;
	};

	//= ===========================================================
	//    L2DBaseModel # setDrag()
	//= ===========================================================
	L2DBaseModel.prototype.setDrag = function (x /* float */, y /* float */) {
	  this.dragX = x;
	  this.dragY = y;
	};

	//= ===========================================================
	//    L2DBaseModel # getMainMotionManager()
	//= ===========================================================
	L2DBaseModel.prototype.getMainMotionManager = function () {
	  return this.mainMotionManager;
	};

	//= ===========================================================
	//    L2DBaseModel # getExpressionManager()
	//= ===========================================================
	L2DBaseModel.prototype.getExpressionManager = function () {
	  return this.expressionManager;
	};

	//= ===========================================================
	//    L2DBaseModel # loadModelData()
	//= ===========================================================
	L2DBaseModel.prototype.loadModelData = function (path /* String */, callback) {
	  /*
	                                                                                                                                                                      if( this.live2DModel != null ) {
	                                                                                                                                                                          this.live2DModel.deleteTextures();
	                                                                                                                                                                      }
	                                                                                                                                                                      */
	  var pm = Live2DFramework.getPlatformManager(); // IPlatformManager
	  if (this.debugMode) pm.log('Load model : ' + path);

	  var thisRef = this;
	  pm.loadLive2DModel(path, function (l2dModel) {
	    thisRef.live2DModel = l2dModel;
	    thisRef.live2DModel.saveParam();

	    var _err = Live2D.getError();

	    if (_err / 1 !== 0) {
	      console.error('Error : Failed to loadModelData().');
	      return;
	    }

	    thisRef.modelMatrix = new L2DModelMatrix(thisRef.live2DModel.getCanvasWidth(), thisRef.live2DModel.getCanvasHeight()); // L2DModelMatrix
	    thisRef.modelMatrix.setWidth(2);
	    thisRef.modelMatrix.setCenterPosition(0, 0);

	    callback(thisRef.live2DModel);
	  });
	};

	//= ===========================================================
	//    L2DBaseModel # loadTexture()
	//= ===========================================================
	L2DBaseModel.prototype.loadTexture = function (no /* int */, path /* String */, gl, callback) {
	  texCounter++;

	  var pm = Live2DFramework.getPlatformManager(); // IPlatformManager

	  if (this.debugMode) pm.log('Load Texture : ' + path);

	  var thisRef = this;
	  pm.loadTexture(this.live2DModel, no, path, gl, function () {
	    texCounter--;
	    if (texCounter === 0) thisRef.isTexLoaded = true;
	    if (typeof callback === 'function') callback();
	  });
	};

	//= ===========================================================
	//    L2DBaseModel # loadMotion()
	//= ===========================================================
	L2DBaseModel.prototype.loadMotion = function (name /* String */, path /* String */, callback) {
	  var pm = Live2DFramework.getPlatformManager(); // IPlatformManager

	  if (this.debugMode) pm.log('Load Motion : ' + path);

	  var motion = null; // Live2DMotion

	  var thisRef = this;
	  pm.loadBytes(path, function (buf) {
	    motion = Live2DMotion.loadMotion(buf);
	    if (name != null) {
	      thisRef.motions[name] = motion;
	    }
	    callback(motion);
	  });
	};

	//= ===========================================================
	//    L2DBaseModel # loadExpression()
	//= ===========================================================
	L2DBaseModel.prototype.loadExpression = function (name /* String */, path /* String */, callback) {
	  var pm = Live2DFramework.getPlatformManager(); // IPlatformManager

	  if (this.debugMode) pm.log('Load Expression : ' + path);

	  var thisRef = this;
	  pm.loadBytes(path, function (buf) {
	    if (name != null) {
	      thisRef.expressions[name] = L2DExpressionMotion.loadJson(buf);
	    }
	    if (typeof callback === 'function') callback();
	  });
	};

	//= ===========================================================
	//    L2DBaseModel # loadPose()
	//= ===========================================================
	L2DBaseModel.prototype.loadPose = function (path /* String */, callback) {
	  var pm = Live2DFramework.getPlatformManager(); // IPlatformManager
	  if (this.debugMode) pm.log('Load Pose : ' + path);
	  var thisRef = this;
	  try {
	    pm.loadBytes(path, function (buf) {
	      thisRef.pose = L2DPose.load(buf);
	      if (typeof callback === 'function') callback();
	    });
	  } catch (e) {
	    console.warn(e);
	  }
	};

	//= ===========================================================
	//    L2DBaseModel # loadPhysics()
	//= ===========================================================
	L2DBaseModel.prototype.loadPhysics = function (path /* String */) {
	  var pm = Live2DFramework.getPlatformManager(); // IPlatformManager
	  if (this.debugMode) pm.log('Load Physics : ' + path);
	  var thisRef = this;
	  try {
	    pm.loadBytes(path, function (buf) {
	      thisRef.physics = L2DPhysics.load(buf);
	    });
	  } catch (e) {
	    console.warn(e);
	  }
	};

	//= ===========================================================
	//    L2DBaseModel # hitTestSimple()
	//= ===========================================================
	L2DBaseModel.prototype.hitTestSimple = function (drawID, testX, testY) {
	  var drawIndex = this.live2DModel.getDrawDataIndex(drawID);

	  if (drawIndex < 0) return false;

	  var points = this.live2DModel.getTransformedPoints(drawIndex);
	  var left = this.live2DModel.getCanvasWidth();
	  var right = 0;
	  var top = this.live2DModel.getCanvasHeight();
	  var bottom = 0;

	  for (var j = 0; j < points.length; j = j + 2) {
	    var x = points[j];
	    var y = points[j + 1];

	    if (x < left) left = x;
	    if (x > right) right = x;
	    if (y < top) top = y;
	    if (y > bottom) bottom = y;
	  }
	  var tx = this.modelMatrix.invertTransformX(testX);
	  var ty = this.modelMatrix.invertTransformY(testY);

	  return left <= tx && tx <= right && top <= ty && ty <= bottom;
	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DExpressionMotion  extends     AMotion
	//= ===========================================================
	//= ===========================================================
	function L2DExpressionMotion() {
	  AMotion.prototype.constructor.call(this);
	  this.paramList = []; // ArrayList<L2DExpressionParam>
	}

	L2DExpressionMotion.prototype = new AMotion(); // L2DExpressionMotion extends AMotion

	//= ===========================================================
	L2DExpressionMotion.EXPRESSION_DEFAULT = 'DEFAULT';
	L2DExpressionMotion.TYPE_SET = 0;
	L2DExpressionMotion.TYPE_ADD = 1;
	L2DExpressionMotion.TYPE_MULT = 2;

	//= ===========================================================
	//    static L2DExpressionMotion.loadJson()
	//= ===========================================================
	L2DExpressionMotion.loadJson = function (buf) {
	  var ret = new L2DExpressionMotion();

	  var pm = Live2DFramework.getPlatformManager();
	  var json = pm.jsonParseFromBytes(buf);

	  ret.setFadeIn(parseInt(json.fade_in) > 0 ? parseInt(json.fade_in) : 1000);
	  ret.setFadeOut(parseInt(json.fade_out) > 0 ? parseInt(json.fade_out) : 1000);

	  if (json.params == null) {
	    return ret;
	  }

	  var params = json.params;
	  var paramNum = params.length;
	  ret.paramList = []; // ArrayList<L2DExpressionParam>
	  for (var i = 0; i < paramNum; i++) {
	    var param = params[i];
	    var paramID = param.id.toString();
	    var value = parseFloat(param.val);
	    var calcTypeInt = L2DExpressionMotion.TYPE_ADD;
	    var calc = param.calc != null ? param.calc.toString() : 'add';
	    if (calc === 'add') {
	      calcTypeInt = L2DExpressionMotion.TYPE_ADD;
	    } else if (calc === 'mult') {
	      calcTypeInt = L2DExpressionMotion.TYPE_MULT;
	    } else if (calc === 'set') {
	      calcTypeInt = L2DExpressionMotion.TYPE_SET;
	    } else {
	      calcTypeInt = L2DExpressionMotion.TYPE_ADD;
	    }
	    if (calcTypeInt === L2DExpressionMotion.TYPE_ADD) {
	      var defaultValue = param.def == null ? 0 : parseFloat(param.def);
	      value = value - defaultValue;
	    } else if (calcTypeInt === L2DExpressionMotion.TYPE_MULT) {
	      var _defaultValue = param.def == null ? 1 : parseFloat(param.def);
	      if (_defaultValue === 0) _defaultValue = 1;
	      value = value / _defaultValue;
	    }

	    var item = new L2DExpressionParam();
	    item.id = paramID;
	    item.type = calcTypeInt;
	    item.value = value;

	    ret.paramList.push(item);
	  }

	  return ret;
	};

	//= ===========================================================
	//    L2DExpressionMotion # updateParamExe()
	//= ===========================================================
	L2DExpressionMotion.prototype.updateParamExe = function (model /* ALive2DModel */, timeMSec /* long */, weight /* float */, motionQueueEnt /* MotionQueueEnt */) {
	  for (var i = this.paramList.length - 1; i >= 0; --i) {
	    var param = this.paramList[i]; // L2DExpressionParam
	    // if (!param || !param.type) continue;
	    if (param.type === L2DExpressionMotion.TYPE_ADD) {
	      model.addToParamFloat(param.id, param.value, weight);
	    } else if (param.type === L2DExpressionMotion.TYPE_MULT) {
	      model.multParamFloat(param.id, param.value, weight);
	    } else if (param.type === L2DExpressionMotion.TYPE_SET) {
	      model.setParamFloat(param.id, param.value, weight);
	    }
	  }
	};

	//= ===========================================================
	//= ===========================================================
	//  class L2DExpressionParam
	//= ===========================================================
	//= ===========================================================
	function L2DExpressionParam() {
	  this.id = '';
	  this.type = -1;
	  this.value = null;
	}

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DEyeBlink
	//= ===========================================================
	//= ===========================================================
	function L2DEyeBlink() {
	  this.nextBlinkTime = null; /* TODO NOT INIT */ //
	  this.stateStartTime = null; /* TODO NOT INIT */ //
	  this.blinkIntervalMsec = null; /* TODO NOT INIT */ //
	  this.eyeState = EYE_STATE.STATE_FIRST;
	  this.blinkIntervalMsec = 4000;
	  this.closingMotionMsec = 100;
	  this.closedMotionMsec = 50;
	  this.openingMotionMsec = 150;
	  this.closeIfZero = true;
	  this.eyeID_L = 'PARAM_EYE_L_OPEN';
	  this.eyeID_R = 'PARAM_EYE_R_OPEN';
	}

	//= ===========================================================
	//    L2DEyeBlink # calcNextBlink()
	//= ===========================================================
	L2DEyeBlink.prototype.calcNextBlink = function () {
	  var time /* long */ = UtSystem.getUserTimeMSec();
	  var r /* Number */ = Math.random();
	  return (/* (long) */time + r * (2 * this.blinkIntervalMsec - 1)
	  );
	};

	//= ===========================================================
	//    L2DEyeBlink # setInterval()
	//= ===========================================================
	L2DEyeBlink.prototype.setInterval = function (blinkIntervalMsec /* int */) {
	  this.blinkIntervalMsec = blinkIntervalMsec;
	};

	//= ===========================================================
	//    L2DEyeBlink # setEyeMotion()
	//= ===========================================================
	L2DEyeBlink.prototype.setEyeMotion = function (closingMotionMsec /* int */, closedMotionMsec /* int */, openingMotionMsec /* int */) {
	  this.closingMotionMsec = closingMotionMsec;
	  this.closedMotionMsec = closedMotionMsec;
	  this.openingMotionMsec = openingMotionMsec;
	};

	//= ===========================================================
	//    L2DEyeBlink # updateParam()
	//= ===========================================================
	L2DEyeBlink.prototype.updateParam = function (model /* ALive2DModel */) {
	  var time /*: long */ = UtSystem.getUserTimeMSec();
	  var eyeParamValue = void 0; /*: Number */
	  var t /*: Number */ = 0;
	  switch (this.eyeState) {
	    case EYE_STATE.STATE_CLOSING:
	      t = (time - this.stateStartTime) / this.closingMotionMsec;
	      if (t >= 1) {
	        t = 1;
	        this.eyeState = EYE_STATE.STATE_CLOSED;
	        this.stateStartTime = time;
	      }
	      eyeParamValue = 1 - t;
	      break;
	    case EYE_STATE.STATE_CLOSED:
	      t = (time - this.stateStartTime) / this.closedMotionMsec;
	      if (t >= 1) {
	        this.eyeState = EYE_STATE.STATE_OPENING;
	        this.stateStartTime = time;
	      }
	      eyeParamValue = 0;
	      break;
	    case EYE_STATE.STATE_OPENING:
	      t = (time - this.stateStartTime) / this.openingMotionMsec;
	      if (t >= 1) {
	        t = 1;
	        this.eyeState = EYE_STATE.STATE_INTERVAL;
	        this.nextBlinkTime = this.calcNextBlink();
	      }
	      eyeParamValue = t;
	      break;
	    case EYE_STATE.STATE_INTERVAL:
	      if (this.nextBlinkTime < time) {
	        this.eyeState = EYE_STATE.STATE_CLOSING;
	        this.stateStartTime = time;
	      }
	      eyeParamValue = 1;
	      break;
	    case EYE_STATE.STATE_FIRST:
	    default:
	      this.eyeState = EYE_STATE.STATE_INTERVAL;
	      this.nextBlinkTime = this.calcNextBlink();
	      eyeParamValue = 1;
	      break;
	  }
	  if (!this.closeIfZero) eyeParamValue = -eyeParamValue;
	  model.setParamFloat(this.eyeID_L, eyeParamValue);
	  model.setParamFloat(this.eyeID_R, eyeParamValue);
	};

	//= = enum EYE_STATE ==
	var EYE_STATE = function EYE_STATE() {};

	EYE_STATE.STATE_FIRST = 'STATE_FIRST';
	EYE_STATE.STATE_INTERVAL = 'STATE_INTERVAL';
	EYE_STATE.STATE_CLOSING = 'STATE_CLOSING';
	EYE_STATE.STATE_CLOSED = 'STATE_CLOSED';
	EYE_STATE.STATE_OPENING = 'STATE_OPENING';
	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DMatrix44
	//= ===========================================================
	//= ===========================================================
	function L2DMatrix44() {
	  this.tr = new Float32Array(16); //
	  this.identity();
	}

	//= ===========================================================
	//    static L2DMatrix44.mul()
	//= ===========================================================
	L2DMatrix44.mul = function (a /* float[] */, b /* float[] */, dst /* float[] */) {
	  var c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	  var n = 4;
	  var i = void 0,
	      j = void 0,
	      k = void 0;
	  for (i = 0; i < n; i++) {
	    for (j = 0; j < n; j++) {
	      for (k = 0; k < n; k++) {
	        c[i + j * 4] += a[i + k * 4] * b[k + j * 4];
	      }
	    }
	  }
	  for (i = 0; i < 16; i++) {
	    dst[i] = c[i];
	  }
	};

	//= ===========================================================
	//    L2DMatrix44 # identity()
	//= ===========================================================
	L2DMatrix44.prototype.identity = function () {
	  for (var i /*: int */ = 0; i < 16; i++) {
	    this.tr[i] = i % 5 === 0 ? 1 : 0;
	  }
	};

	//= ===========================================================
	//    L2DMatrix44 # getArray()
	//= ===========================================================
	L2DMatrix44.prototype.getArray = function () {
	  return this.tr;
	};

	//= ===========================================================
	//    L2DMatrix44 # getCopyMatrix()
	//= ===========================================================
	L2DMatrix44.prototype.getCopyMatrix = function () {
	  return new Float32Array(this.tr); // this.tr.clone();
	};

	//= ===========================================================
	//    L2DMatrix44 # setMatrix()
	//= ===========================================================
	L2DMatrix44.prototype.setMatrix = function (tr /* float[] */) {
	  if (this.tr == null || this.tr.length !== tr.length) {
	    return;
	  } // 注意问题1
	  for (var i /*: int */ = 0; i < 16; i++) {
	    this.tr[i] = tr[i];
	  }
	};

	//= ===========================================================
	//    L2DMatrix44 # getScaleX()
	//= ===========================================================
	L2DMatrix44.prototype.getScaleX = function () {
	  return this.tr[0];
	};

	//= ===========================================================
	//    L2DMatrix44 # getScaleY()
	//= ===========================================================
	L2DMatrix44.prototype.getScaleY = function () {
	  return this.tr[5];
	};

	//= ===========================================================
	//    L2DMatrix44 # transformX()
	//= ===========================================================
	L2DMatrix44.prototype.transformX = function (src /* float */) {
	  return this.tr[0] * src + this.tr[12];
	};

	//= ===========================================================
	//    L2DMatrix44 # transformY()
	//= ===========================================================
	L2DMatrix44.prototype.transformY = function (src /* float */) {
	  return this.tr[5] * src + this.tr[13];
	};

	//= ===========================================================
	//    L2DMatrix44 # invertTransformX()
	//= ===========================================================
	L2DMatrix44.prototype.invertTransformX = function (src /* float */) {
	  return (src - this.tr[12]) / this.tr[0];
	};

	//= ===========================================================
	//    L2DMatrix44 # invertTransformY()
	//= ===========================================================
	L2DMatrix44.prototype.invertTransformY = function (src /* float */) {
	  return (src - this.tr[13]) / this.tr[5];
	};

	//= ===========================================================
	//    L2DMatrix44 # multTranslate()
	//= ===========================================================
	L2DMatrix44.prototype.multTranslate = function (shiftX /* float */, shiftY /* float */) {
	  var tr1 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, shiftX, shiftY, 0, 1];
	  L2DMatrix44.mul(tr1, this.tr, this.tr);
	};

	//= ===========================================================
	//    L2DMatrix44 # translate()
	//= ===========================================================
	L2DMatrix44.prototype.translate = function (x /* float */, y /* float */) {
	  this.tr[12] = x;
	  this.tr[13] = y;
	};

	//= ===========================================================
	//    L2DMatrix44 # translateX()
	//= ===========================================================
	L2DMatrix44.prototype.translateX = function (x /* float */) {
	  this.tr[12] = x;
	};

	//= ===========================================================
	//    L2DMatrix44 # translateY()
	//= ===========================================================
	L2DMatrix44.prototype.translateY = function (y /* float */) {
	  this.tr[13] = y;
	};

	//= ===========================================================
	//    L2DMatrix44 # multScale()
	//= ===========================================================
	L2DMatrix44.prototype.multScale = function (scaleX /* float */, scaleY /* float */) {
	  var tr1 = [scaleX, 0, 0, 0, 0, scaleY, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
	  L2DMatrix44.mul(tr1, this.tr, this.tr);
	};

	//= ===========================================================
	//    L2DMatrix44 # scale()
	//= ===========================================================
	L2DMatrix44.prototype.scale = function (scaleX /* float */, scaleY /* float */) {
	  this.tr[0] = scaleX;
	  this.tr[5] = scaleY;
	};
	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DModelMatrix       extends     L2DMatrix44
	//= ===========================================================
	//= ===========================================================
	function L2DModelMatrix(w /* float */, h /* float */) {
	  L2DMatrix44.prototype.constructor.call(this);
	  this.width = w;
	  this.height = h;
	}

	// L2DModelMatrix extends L2DMatrix44
	L2DModelMatrix.prototype = new L2DMatrix44();

	//= ===========================================================
	//    L2DModelMatrix # setPosition()
	//= ===========================================================
	L2DModelMatrix.prototype.setPosition = function (x /* float */, y /* float */) {
	  this.translate(x, y);
	};

	//= ===========================================================
	//    L2DModelMatrix # setCenterPosition()
	//= ===========================================================
	L2DModelMatrix.prototype.setCenterPosition = function (x /* float */, y /* float */) {
	  var w = this.width * this.getScaleX();
	  var h = this.height * this.getScaleY();
	  this.translate(x - w / 2, y - h / 2);
	};

	//= ===========================================================
	//    L2DModelMatrix # top()
	//= ===========================================================
	L2DModelMatrix.prototype.top = function (y /* float */) {
	  this.setY(y);
	};

	//= ===========================================================
	//    L2DModelMatrix # bottom()
	//= ===========================================================
	L2DModelMatrix.prototype.bottom = function (y /* float */) {
	  var h = this.height * this.getScaleY();
	  this.translateY(y - h);
	};

	//= ===========================================================
	//    L2DModelMatrix # left()
	//= ===========================================================
	L2DModelMatrix.prototype.left = function (x /* float */) {
	  this.setX(x);
	};

	//= ===========================================================
	//    L2DModelMatrix # right()
	//= ===========================================================
	L2DModelMatrix.prototype.right = function (x /* float */) {
	  var w = this.width * this.getScaleX();
	  this.translateX(x - w);
	};

	//= ===========================================================
	//    L2DModelMatrix # centerX()
	//= ===========================================================
	L2DModelMatrix.prototype.centerX = function (x /* float */) {
	  var w = this.width * this.getScaleX();
	  this.translateX(x - w / 2);
	};

	//= ===========================================================
	//    L2DModelMatrix # centerY()
	//= ===========================================================
	L2DModelMatrix.prototype.centerY = function (y /* float */) {
	  var h = this.height * this.getScaleY();
	  this.translateY(y - h / 2);
	};

	//= ===========================================================
	//    L2DModelMatrix # setX()
	//= ===========================================================
	L2DModelMatrix.prototype.setX = function (x /* float */) {
	  this.translateX(x);
	};

	//= ===========================================================
	//    L2DModelMatrix # setY()
	//= ===========================================================
	L2DModelMatrix.prototype.setY = function (y /* float */) {
	  this.translateY(y);
	};

	//= ===========================================================
	//    L2DModelMatrix # setHeight()
	//= ===========================================================
	L2DModelMatrix.prototype.setHeight = function (h /* float */) {
	  var scaleX = h / this.height;
	  var scaleY = -scaleX;
	  this.scale(scaleX, scaleY);
	};

	//= ===========================================================
	//    L2DModelMatrix # setWidth()
	//= ===========================================================
	L2DModelMatrix.prototype.setWidth = function (w /* float */) {
	  var scaleX = w / this.width;
	  var scaleY = -scaleX;
	  this.scale(scaleX, scaleY);
	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DMotionManager     extends     MotionQueueManager
	//= ===========================================================
	//= ===========================================================
	function L2DMotionManager() {
	  MotionQueueManager.prototype.constructor.call(this);
	  this.currentPriority = null;
	  this.reservePriority = null;

	  this.super = MotionQueueManager.prototype;
	}

	L2DMotionManager.prototype = new MotionQueueManager();

	//= ===========================================================
	//    L2DMotionManager # getCurrentPriority()
	//= ===========================================================
	L2DMotionManager.prototype.getCurrentPriority = function () {
	  return this.currentPriority;
	};

	//= ===========================================================
	//    L2DMotionManager # getReservePriority()
	//= ===========================================================
	L2DMotionManager.prototype.getReservePriority = function () {
	  return this.reservePriority;
	};

	//= ===========================================================
	//    L2DMotionManager # reserveMotion()
	//= ===========================================================
	L2DMotionManager.prototype.reserveMotion = function (priority /* int */) {
	  if (this.reservePriority >= priority) {
	    return false;
	  }
	  if (this.currentPriority >= priority) {
	    return false;
	  }

	  this.reservePriority = priority;

	  return true;
	};

	//= ===========================================================
	//    L2DMotionManager # setReservePriority()
	//= ===========================================================
	L2DMotionManager.prototype.setReservePriority = function (val /* int */) {
	  this.reservePriority = val;
	};

	//= ===========================================================
	//    L2DMotionManager # updateParam()
	//= ===========================================================
	L2DMotionManager.prototype.updateParam = function (model /* ALive2DModel */) {
	  var updated = MotionQueueManager.prototype.updateParam.call(this, model);

	  if (this.isFinished()) {
	    this.currentPriority = 0;
	  }

	  return updated;
	};

	//= ===========================================================
	//    L2DMotionManager # startMotionPrio()
	//= ===========================================================
	L2DMotionManager.prototype.startMotionPrio = function (motion /* AMotion */, priority /* int */) {
	  if (priority === this.reservePriority) {
	    this.reservePriority = 0;
	  }
	  this.currentPriority = priority;
	  return this.startMotion(motion, false);
	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DPhysics
	//= ===========================================================
	//= ===========================================================
	function L2DPhysics() {
	  this.physicsList = []; // ArrayList<PhysicsHair>
	  this.startTimeMSec = UtSystem.getUserTimeMSec();
	}

	//= ===========================================================
	//    static L2DPhysics.load()
	//= ===========================================================
	L2DPhysics.load = function (buf /* byte[] */) {
	  var ret = new L2DPhysics(); // L2DPhysicsL2DPhysics
	  var pm = Live2DFramework.getPlatformManager();
	  var json = pm.jsonParseFromBytes(buf);
	  var params = json.physics_hair;
	  var paramNum = params.length;
	  for (var i = 0; i < paramNum; i++) {
	    var param = params[i]; // Value
	    var physics = new PhysicsHair(); // PhysicsHairPhysicsHair
	    var setup = param.setup; // Value
	    var length = parseFloat(setup.length);
	    var resist = parseFloat(setup.regist);
	    var mass = parseFloat(setup.mass);
	    physics.setup(length, resist, mass);
	    var srcList = param.src; // Value
	    var srcNum = srcList.length;
	    for (var j = 0; j < srcNum; j++) {
	      var src = srcList[j]; // Value
	      var id = src.id; // String
	      var type = PhysicsHair.Src.SRC_TO_X;
	      var typeStr = src.ptype; // String
	      if (typeStr === 'x') {
	        type = PhysicsHair.Src.SRC_TO_X;
	      } else if (typeStr === 'y') {
	        type = PhysicsHair.Src.SRC_TO_Y;
	      } else if (typeStr === 'angle') {
	        type = PhysicsHair.Src.SRC_TO_G_ANGLE;
	      } else {
	        UtDebug.error('live2d', 'Invalid parameter:PhysicsHair.Src');
	      }
	      var scale = parseFloat(src.scale);
	      var weight = parseFloat(src.weight);
	      physics.addSrcParam(type, id, scale, weight);
	    }
	    var targetList = param.targets; // Value
	    var targetNum = targetList.length;
	    for (var _j = 0; _j < targetNum; _j++) {
	      var target = targetList[_j]; // Value
	      var _id = target.id; // String
	      var _type = PhysicsHair.Target.TARGET_FROM_ANGLE;
	      var _typeStr = target.ptype; // String
	      if (_typeStr === 'angle') {
	        _type = PhysicsHair.Target.TARGET_FROM_ANGLE;
	      } else if (_typeStr === 'angle_v') {
	        _type = PhysicsHair.Target.TARGET_FROM_ANGLE_V;
	      } else {
	        UtDebug.error('live2d', 'Invalid parameter:PhysicsHair.Target');
	      }
	      var _scale = parseFloat(target.scale);
	      var _weight = parseFloat(target.weight);
	      physics.addTargetParam(_type, _id, _scale, _weight);
	    }
	    ret.physicsList.push(physics);
	  }
	  return ret;
	};

	//= ===========================================================
	//    L2DPhysics # updateParam()
	//= ===========================================================
	L2DPhysics.prototype.updateParam = function (model /* ALive2DModel */) {
	  var timeMSec = UtSystem.getUserTimeMSec() - this.startTimeMSec;
	  for (var i = 0; i < this.physicsList.length; i++) {
	    this.physicsList[i].update(model, timeMSec);
	  }
	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DPose
	//= ===========================================================
	//= ===========================================================
	function L2DPose() {
	  this.lastTime = 0;
	  this.lastModel = null; // ALive2DModel
	  this.partsGroups = []; // ArrayList<L2DPartsParam[]>
	}

	//= ===========================================================
	//    static L2DPose.load()
	//= ===========================================================
	L2DPose.load = function (buf /* byte[] */) {
	  var ret = new L2DPose(); // L2DPose
	  var pm = Live2DFramework.getPlatformManager();
	  var json = pm.jsonParseFromBytes(buf);
	  var poseListInfo = json.parts_visible; // Value
	  var poseNum = poseListInfo.length;
	  for (var ipose = 0; ipose < poseNum; ipose++) {
	    var poseInfo = poseListInfo[ipose]; // Value
	    var idListInfo = poseInfo.group; // Value
	    var idNum = idListInfo.length;
	    var partsGroup /* L2DPartsParam */ = [];
	    for (var igroup = 0; igroup < idNum; igroup++) {
	      var partsInfo = idListInfo[igroup]; // Value
	      var parts = new L2DPartsParam(partsInfo.id); // L2DPartsParamL2DPartsParam
	      partsGroup[igroup] = parts;
	      if (partsInfo.link == null) continue;
	      var linkListInfo = partsInfo.link; // Value
	      var linkNum = linkListInfo.length;
	      parts.link = []; // ArrayList<L2DPartsParam>
	      for (var ilink = 0; ilink < linkNum; ilink++) {
	        var linkParts = new L2DPartsParam(linkListInfo[ilink]); // L2DPartsParamL2DPartsParam
	        parts.link.push(linkParts);
	      }
	    }
	    ret.partsGroups.push(partsGroup);
	  }

	  return ret;
	};

	//= ===========================================================
	//    L2DPose # updateParam()
	//= ===========================================================
	L2DPose.prototype.updateParam = function (model /* ALive2DModel */) {
	  if (model == null) return;

	  if (!(model === this.lastModel)) {
	    this.initParam(model);
	  }
	  this.lastModel = model;

	  var curTime = UtSystem.getUserTimeMSec();
	  var deltaTimeSec = this.lastTime / 1 === 0 ? 0 : (curTime - this.lastTime) / 1000.0;
	  this.lastTime = curTime;
	  if (deltaTimeSec < 0) deltaTimeSec = 0;
	  for (var i = 0; i < this.partsGroups.length; i++) {
	    this.normalizePartsOpacityGroup(model, this.partsGroups[i], deltaTimeSec);
	    this.copyOpacityOtherParts(model, this.partsGroups[i]);
	  }
	};

	//= ===========================================================
	//    L2DPose # initParam()
	//= ===========================================================
	L2DPose.prototype.initParam = function (model /* ALive2DModel */) {
	  if (model == null) return;
	  for (var i = 0; i < this.partsGroups.length; i++) {
	    var partsGroup = this.partsGroups[i]; // L2DPartsParam
	    for (var j = 0; j < partsGroup.length; j++) {
	      partsGroup[j].initIndex(model);
	      var partsIndex = partsGroup[j].partsIndex;
	      var paramIndex = partsGroup[j].paramIndex;
	      if (partsIndex < 0) continue;
	      var v /*: Boolean */ = model.getParamFloat(paramIndex) !== 0;
	      model.setPartsOpacity(partsIndex, v ? 1.0 : 0.0);
	      model.setParamFloat(paramIndex, v ? 1.0 : 0.0);
	      if (partsGroup[j].link == null) continue;
	      for (var k = 0; k < partsGroup[j].link.length; k++) {
	        partsGroup[j].link[k].initIndex(model);
	      }
	    }
	  }
	};

	//= ===========================================================
	//    L2DPose # normalizePartsOpacityGroup()
	//= ===========================================================
	L2DPose.prototype.normalizePartsOpacityGroup = function (model /* ALive2DModel */, partsGroup /* L2DPartsParam[] */, deltaTimeSec /* float */) {
	  var visibleParts = -1;
	  var visibleOpacity = 1.0;
	  var CLEAR_TIME_SEC = 0.5;
	  var phi = 0.5;
	  var maxBackOpacity = 0.15;
	  for (var i = 0; i < partsGroup.length; i++) {
	    var partsIndex = partsGroup[i].partsIndex;
	    var paramIndex = partsGroup[i].paramIndex;
	    if (partsIndex < 0) continue;
	    if (model.getParamFloat(paramIndex) !== 0) {
	      if (visibleParts >= 0) {
	        break;
	      }
	      visibleParts = i;
	      visibleOpacity = model.getPartsOpacity(partsIndex);
	      visibleOpacity += deltaTimeSec / CLEAR_TIME_SEC;
	      if (visibleOpacity > 1) {
	        visibleOpacity = 1;
	      }
	    }
	  }
	  if (visibleParts < 0) {
	    visibleParts = 0;
	    visibleOpacity = 1;
	  }
	  for (var _i = 0; _i < partsGroup.length; _i++) {
	    var _partsIndex = partsGroup[_i].partsIndex;
	    if (_partsIndex < 0) continue;
	    if (visibleParts === _i) {
	      model.setPartsOpacity(_partsIndex, visibleOpacity);
	    } else {
	      var opacity = model.getPartsOpacity(_partsIndex);
	      var a1 = void 0;
	      if (visibleOpacity < phi) {
	        a1 = visibleOpacity * (phi - 1) / phi + 1;
	      } else {
	        a1 = (1 - visibleOpacity) * phi / (1 - phi);
	      }
	      var backOp = (1 - a1) * (1 - visibleOpacity);
	      if (backOp > maxBackOpacity) {
	        a1 = 1 - maxBackOpacity / (1 - visibleOpacity);
	      }
	      if (opacity > a1) {
	        opacity = a1;
	      }
	      model.setPartsOpacity(_partsIndex, opacity);
	    }
	  }
	};

	//= ===========================================================
	//    L2DPose # copyOpacityOtherParts()
	//= ===========================================================
	L2DPose.prototype.copyOpacityOtherParts = function (model /* ALive2DModel */, partsGroup /* L2DPartsParam[] */) {
	  for (var igroup = 0; igroup < partsGroup.length; igroup++) {
	    var partsParam = partsGroup[igroup]; // L2DPartsParam
	    if (partsParam.link == null) continue;
	    if (partsParam.partsIndex < 0) continue;
	    var opacity = model.getPartsOpacity(partsParam.partsIndex);
	    for (var ilink = 0; ilink < partsParam.link.length; ilink++) {
	      var linkParts = partsParam.link[ilink]; // L2DPartsParam
	      if (linkParts.partsIndex < 0) continue;
	      model.setPartsOpacity(linkParts.partsIndex, opacity);
	    }
	  }
	};

	//= ===========================================================
	//= ===========================================================
	//  class L2DPartsParam
	//= ===========================================================
	//= ===========================================================
	function L2DPartsParam(id /* String */) {
	  this.paramIndex = -1;
	  this.partsIndex = -1;
	  this.link = null; // ArrayList<L2DPartsParam>
	  this.id = id;
	}

	//= ===========================================================
	//    L2DPartsParam # initIndex()
	//= ===========================================================
	L2DPartsParam.prototype.initIndex = function (model /* ALive2DModel */) {
	  this.paramIndex = model.getParamIndex('VISIBLE:' + this.id);
	  this.partsIndex = model.getPartsDataIndex(PartsDataID.getID(this.id));
	  model.setParamFloat(this.paramIndex, 1);
	};
	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DTargetPoint
	//= ===========================================================
	//= ===========================================================
	function L2DTargetPoint() {
	  this.EPSILON = 0.01; // 変化の最小値（この値以下は無視される）
	  this.faceTargetX = 0;
	  this.faceTargetY = 0;
	  this.faceX = 0;
	  this.faceY = 0;
	  this.faceVX = 0;
	  this.faceVY = 0;
	  this.lastTimeSec = 0;
	}

	//= ===========================================================
	L2DTargetPoint.FRAME_RATE = 30;

	//= ===========================================================
	//    L2DTargetPoint # set()
	//= ===========================================================
	L2DTargetPoint.prototype.setPoint = function (x /* float */, y /* float */) {
	  this.faceTargetX = x;
	  this.faceTargetY = y;
	};

	//= ===========================================================
	//    L2DTargetPoint # getX()
	//= ===========================================================
	L2DTargetPoint.prototype.getX = function () {
	  return this.faceX;
	};

	//= ===========================================================
	//    L2DTargetPoint # getY()
	//= ===========================================================
	L2DTargetPoint.prototype.getY = function () {
	  return this.faceY;
	};

	//= ===========================================================
	//    L2DTargetPoint # update()
	//= ===========================================================
	L2DTargetPoint.prototype.update = function () {
	  var TIME_TO_MAX_SPEED = 0.15;
	  var FACE_PARAM_MAX_V = 40.0 / 7.5;
	  var MAX_V = FACE_PARAM_MAX_V / L2DTargetPoint.FRAME_RATE;
	  if (this.lastTimeSec === 0) {
	    this.lastTimeSec = UtSystem.getUserTimeMSec();
	    return;
	  }
	  var curTimeSec = UtSystem.getUserTimeMSec();
	  var deltaTimeWeight = (curTimeSec - this.lastTimeSec) * L2DTargetPoint.FRAME_RATE / 1000.0;
	  this.lastTimeSec = curTimeSec;
	  var FRAME_TO_MAX_SPEED = TIME_TO_MAX_SPEED * L2DTargetPoint.FRAME_RATE;
	  var MAX_A = deltaTimeWeight * MAX_V / FRAME_TO_MAX_SPEED;
	  var dx = this.faceTargetX - this.faceX;
	  var dy = this.faceTargetY - this.faceY;
	  // if(dx == 0 && dy == 0) return;
	  if (Math.abs(dx) <= this.EPSILON && Math.abs(dy) <= this.EPSILON) return;
	  var d = Math.sqrt(dx * dx + dy * dy);
	  var vx = MAX_V * dx / d;
	  var vy = MAX_V * dy / d;
	  var ax = vx - this.faceVX;
	  var ay = vy - this.faceVY;
	  var a = Math.sqrt(ax * ax + ay * ay);
	  if (a < -MAX_A || a > MAX_A) {
	    ax *= MAX_A / a;
	    ay *= MAX_A / a;
	    a = MAX_A;
	  }
	  this.faceVX += ax;
	  this.faceVY += ay;{
	    var maxv = 0.5 * (Math.sqrt(MAX_A * MAX_A + 16 * MAX_A * d - 8 * MAX_A * d) - MAX_A);
	    var curv = Math.sqrt(this.faceVX * this.faceVX + this.faceVY * this.faceVY);
	    if (curv > maxv) {
	      this.faceVX *= maxv / curv;
	      this.faceVY *= maxv / curv;
	    }
	  }
	  this.faceX += this.faceVX;
	  this.faceY += this.faceVY;
	};
	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class L2DViewMatrix        extends     L2DMatrix44
	//= ===========================================================
	//= ===========================================================
	function L2DViewMatrix() {
	  L2DMatrix44.prototype.constructor.call(this);
	  this.screenLeft = null;
	  this.screenRight = null;
	  this.screenTop = null;
	  this.screenBottom = null;
	  this.maxLeft = null;
	  this.maxRight = null;
	  this.maxTop = null;
	  this.maxBottom = null;
	  this.max = Number.MAX_VALUE;
	  this.min = 0;
	}

	L2DViewMatrix.prototype = new L2DMatrix44(); // L2DViewMatrix extends L2DMatrix44

	//= ===========================================================
	//    L2DViewMatrix # getMaxScale()
	//= ===========================================================
	L2DViewMatrix.prototype.getMaxScale = function () {
	  return this.max;
	};

	//= ===========================================================
	//    L2DViewMatrix # getMinScale()
	//= ===========================================================
	L2DViewMatrix.prototype.getMinScale = function () {
	  return this.min;
	};

	//= ===========================================================
	//    L2DViewMatrix # setMaxScale()
	//= ===========================================================
	L2DViewMatrix.prototype.setMaxScale = function (v /* float */) {
	  this.max = v;
	};
	L2DViewMatrix.prototype.getCurrentScale = function () {
	  return this.tr[0];
	};

	//= ===========================================================
	//    L2DViewMatrix # setMinScale()
	//= ===========================================================
	L2DViewMatrix.prototype.setMinScale = function (v /* float */) {
	  this.min = v;
	};

	//= ===========================================================
	//    L2DViewMatrix # isMaxScale()
	//= ===========================================================
	L2DViewMatrix.prototype.isMaxScale = function () {
	  if (Math.abs(this.getScaleX() - this.max) < 0.001) {
	    return true;
	  }
	  return false;
	};

	//= ===========================================================
	//    L2DViewMatrix # isMinScale()
	//= ===========================================================
	L2DViewMatrix.prototype.isMinScale = function () {
	  if (Math.abs(this.getScaleX() - this.min) < 0.001) {
	    return true;
	  }
	  return false;
	};

	//= ===========================================================
	//    L2DViewMatrix # adjustTranslate()
	//= ===========================================================
	L2DViewMatrix.prototype.adjustTranslate = function (shiftX /* float */, shiftY /* float */) {
	  if (this.tr[0] * this.maxLeft + (this.tr[12] + shiftX) > this.screenLeft) {
	    shiftX = this.screenLeft - this.tr[0] * this.maxLeft - this.tr[12];
	  }
	  if (this.tr[0] * this.maxRight + (this.tr[12] + shiftX) < this.screenRight) {
	    shiftX = this.screenRight - this.tr[0] * this.maxRight - this.tr[12];
	  }
	  if (this.tr[5] * this.maxTop + (this.tr[13] + shiftY) < this.screenTop) {
	    shiftY = this.screenTop - this.tr[5] * this.maxTop - this.tr[13];
	  }
	  if (this.tr[5] * this.maxBottom + (this.tr[13] + shiftY) > this.screenBottom) {
	    shiftY = this.screenBottom - this.tr[5] * this.maxBottom - this.tr[13];
	  }

	  var tr1 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, shiftX, shiftY, 0, 1];
	  L2DMatrix44.mul(tr1, this.tr, this.tr);
	};

	//= ===========================================================
	//    L2DViewMatrix # adjustScale()
	//= ===========================================================
	L2DViewMatrix.prototype.adjustScale = function (cx /* float */, cy /* float */, scale /* float */) {
	  var targetScale = scale * this.tr[0];
	  if (targetScale < this.min) {
	    if (this.tr[0] > 0) {
	      scale = this.min / this.tr[0];
	    }
	  } else if (targetScale > this.max) {
	    if (this.tr[0] > 0) {
	      scale = this.max / this.tr[0];
	    }
	  }
	  var tr1 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, cx, cy, 0, 1];
	  var tr2 = [scale, 0, 0, 0, 0, scale, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
	  var tr3 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -cx, -cy, 0, 1];
	  L2DMatrix44.mul(tr3, this.tr, this.tr);
	  L2DMatrix44.mul(tr2, this.tr, this.tr);
	  L2DMatrix44.mul(tr1, this.tr, this.tr);
	};
	L2DViewMatrix.prototype.userAdjustScale = function (cx /* float */, cy /* float */, scale /* float */) {
	  var targetScale = scale * this.tr[0];
	  if (targetScale < this.min) {
	    if (this.tr[0] > 0) scale = this.min / this.tr[0];
	  } else if (targetScale > this.max) {
	    if (this.tr[0] > 0) scale = this.max / this.tr[0];
	  }
	  var tr1 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, cx, cy, 0, 1];
	  var tr2 = [scale, 0, 0, 0, 0, scale, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
	  var tr3 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -cx, -cy, 0, 1];
	  L2DMatrix44.mul(tr3, this.tr, this.tr);
	  L2DMatrix44.mul(tr2, this.tr, this.tr);
	  L2DMatrix44.mul(tr1, this.tr, this.tr);
	};

	//= ===========================================================
	//    L2DViewMatrix # setScreenRect()
	//= ===========================================================
	L2DViewMatrix.prototype.setScreenRect = function (left /* float */, right /* float */, bottom /* float */, top /* float */) {
	  this.screenLeft = left;
	  this.screenRight = right;
	  this.screenTop = top;
	  this.screenBottom = bottom;
	};

	//= ===========================================================
	//    L2DViewMatrix # setMaxScreenRect()
	//= ===========================================================
	L2DViewMatrix.prototype.setMaxScreenRect = function (left /* float */, right /* float */, bottom /* float */, top /* float */) {
	  this.maxLeft = left;
	  this.maxRight = right;
	  this.maxTop = top;
	  this.maxBottom = bottom;
	};

	//= ===========================================================
	//    L2DViewMatrix # getScreenLeft()
	//= ===========================================================
	L2DViewMatrix.prototype.getScreenLeft = function () {
	  return this.screenLeft;
	};

	//= ===========================================================
	//    L2DViewMatrix # getScreenRight()
	//= ===========================================================
	L2DViewMatrix.prototype.getScreenRight = function () {
	  return this.screenRight;
	};

	//= ===========================================================
	//    L2DViewMatrix # getScreenBottom()
	//= ===========================================================
	L2DViewMatrix.prototype.getScreenBottom = function () {
	  return this.screenBottom;
	};

	//= ===========================================================
	//    L2DViewMatrix # getScreenTop()
	//= ===========================================================
	L2DViewMatrix.prototype.getScreenTop = function () {
	  return this.screenTop;
	};

	//= ===========================================================
	//    L2DViewMatrix # getMaxLeft()
	//= ===========================================================
	L2DViewMatrix.prototype.getMaxLeft = function () {
	  return this.maxLeft;
	};

	//= ===========================================================
	//    L2DViewMatrix # getMaxRight()
	//= ===========================================================
	L2DViewMatrix.prototype.getMaxRight = function () {
	  return this.maxRight;
	};

	//= ===========================================================
	//    L2DViewMatrix # getMaxBottom()
	//= ===========================================================
	L2DViewMatrix.prototype.getMaxBottom = function () {
	  return this.maxBottom;
	};

	//= ===========================================================
	//    L2DViewMatrix # getMaxTop()
	//= ===========================================================
	L2DViewMatrix.prototype.getMaxTop = function () {
	  return this.maxTop;
	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	//= ===========================================================
	//= ===========================================================
	//  class Live2DFramework
	//= ===========================================================
	//= ===========================================================
	function Live2DFramework() {}

	//= ===========================================================
	Live2DFramework.platformManager = null;

	//= ===========================================================
	//    static Live2DFramework.getPlatformManager()
	//= ===========================================================
	Live2DFramework.getPlatformManager = function () {
	  return Live2DFramework.platformManager;
	};

	//= ===========================================================
	//    static Live2DFramework.setPlatformManager()
	//= ===========================================================
	Live2DFramework.setPlatformManager = function (platformManager /* IPlatformManager */) {
	  Live2DFramework.platformManager = platformManager;
	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	function PlatformManager() {}

	//= ===========================================================
	//    PlatformManager # loadBytes()
	//= ===========================================================
	PlatformManager.prototype.loadBytes = function (path /* String */, callback) {
	  var request = new XMLHttpRequest();
	  request.open('GET', path, true);
	  request.responseType = 'arraybuffer';
	  request.onload = function () {
	    switch (request.status) {
	      case 200:
	        callback(request.response);
	        break;
	      default:
	        console.error('Failed to load (' + request.status + ') : ' + path);
	        break;
	    }
	  };
	  request.send(null);
	  // return request;
	};

	//= ===========================================================
	//    PlatformManager # loadString()
	//= ===========================================================
	PlatformManager.prototype.loadString = function (path /* String */) {
	  this.loadBytes(path, function (buf) {
	    return buf;
	  });
	};

	//= ===========================================================
	//    PlatformManager # loadLive2DModel()
	//= ===========================================================
	PlatformManager.prototype.loadLive2DModel = function (path /* String */, callback) {
	  var model = null;

	  // load moc
	  this.loadBytes(path, function (buf) {
	    model = Live2DModelWebGL.loadModel(buf);
	    callback(model);
	  });
	};

	//= ===========================================================
	//    PlatformManager # loadTexture()
	//= ===========================================================

	PlatformManager.prototype.loadTexture = function (model /* ALive2DModel */, no /* int */, path /* String */, gl, callback) {
	  // load textures

	  var loadedImage = new Image();
	  loadedImage.src = path;
	  loadedImage.onload = function () {
	    // create texture
	    // let canvas = document.getElementById('glcanvas')
	    // let gl = this.getWebGLContext(canvas, { premultipliedAlpha: true })
	    var texture = gl.createTexture();
	    if (!texture) {
	      console.error('Failed to generate gl texture name.');return -1;
	    }

	    if (model.isPremultipliedAlpha() === false) {
	      // 乗算済アルファテクスチャ以外の場合
	      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
	    }
	    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
	    gl.activeTexture(gl.TEXTURE0);
	    gl.bindTexture(gl.TEXTURE_2D, texture);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, loadedImage);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
	    gl.generateMipmap(gl.TEXTURE_2D);

	    model.setTexture(no, texture); // model是.moc被核心库初始化后的对象 ,setTexture是核心库方法

	    // テクスチャオブジェクトを解放
	    texture = null;

	    if (typeof callback === 'function') callback();
	  };

	  loadedImage.onerror = function () {
	    console.error('Failed to load image : ' + path);
	  };
	};

	//= ===========================================================
	//    PlatformManager # parseFromBytes(buf)

	//= ===========================================================
	PlatformManager.prototype.jsonParseFromBytes = function (buf) {
	  var jsonStr = void 0;

	  var bomCode = new Uint8Array(buf, 0, 3);
	  if (bomCode[0] / 1 === 239 && bomCode[1] / 1 === 187 && bomCode[2] / 1 === 191) {
	    jsonStr = String.fromCharCode.apply(null, new Uint8Array(buf, 3));
	  } else {
	    jsonStr = String.fromCharCode.apply(null, new Uint8Array(buf));
	  }

	  var jsonObj = JSON.parse(jsonStr);

	  return jsonObj;
	};

	//= ===========================================================
	//    PlatformManager # log()
	//= ===========================================================
	PlatformManager.prototype.log = function (txt /* String */) {
	  console.log(txt);
	};

	function ModelSettingJson() {
	  this.NAME = 'name';
	  this.ID = 'id';
	  this.MODEL = 'model';
	  this.TEXTURES = 'textures';
	  this.HIT_AREAS = 'hit_areas';
	  this.PHYSICS = 'physics';
	  this.POSE = 'pose';
	  this.EXPRESSIONS = 'expressions';
	  this.MOTION_GROUPS = 'motions';
	  this.SOUND = 'sound';
	  this.FADE_IN = 'fade_in';
	  this.FADE_OUT = 'fade_out';
	  this.LAYOUT = 'layout';
	  this.INIT_PARAM = 'init_param';
	  this.INIT_PARTS_VISIBLE = 'init_parts_visible';
	  this.VALUE = 'val';
	  this.FILE = 'file';

	  this.json = {};
	}

	ModelSettingJson.prototype.loadModelSetting = function (path, callback) {
	  var thisRef = this;
	  var pm = Live2DFramework.getPlatformManager();
	  pm.loadBytes(path, function (buf) {
	    var str = String.fromCharCode.apply(null, new Uint8Array(buf));
	    thisRef.json = JSON.parse(str);
	    callback();
	  });
	};

	ModelSettingJson.prototype.getTextureFile = function (n) {
	  if (this.json[this.TEXTURES] == null || this.json[this.TEXTURES][n] == null) {
	    return null;
	  }

	  return this.json[this.TEXTURES][n];
	};

	ModelSettingJson.prototype.getModelFile = function () {
	  return this.json[this.MODEL];
	};

	ModelSettingJson.prototype.getTextureNum = function () {
	  if (this.json[this.TEXTURES] == null) return 0;

	  return this.json[this.TEXTURES].length;
	};

	ModelSettingJson.prototype.getHitAreaNum = function () {
	  if (this.json[this.HIT_AREAS] == null) {
	    return 0;
	  }

	  return this.json[this.HIT_AREAS].length;
	};

	ModelSettingJson.prototype.getHitAreaID = function (n) {
	  if (this.json[this.HIT_AREAS] == null || this.json[this.HIT_AREAS][n] == null) {
	    return null;
	  }

	  return this.json[this.HIT_AREAS][n][this.ID];
	};

	ModelSettingJson.prototype.getHitAreaName = function (n) {
	  if (this.json[this.HIT_AREAS] == null || this.json[this.HIT_AREAS][n] == null) {
	    return null;
	  }

	  return this.json[this.HIT_AREAS][n][this.NAME];
	};

	ModelSettingJson.prototype.getPhysicsFile = function () {
	  return this.json[this.PHYSICS];
	};

	ModelSettingJson.prototype.getPoseFile = function () {
	  return this.json[this.POSE];
	};

	ModelSettingJson.prototype.getExpressionNum = function () {
	  return this.json[this.EXPRESSIONS] == null ? 0 : this.json[this.EXPRESSIONS].length;
	};

	ModelSettingJson.prototype.getExpressionFile = function (n) {
	  if (this.json[this.EXPRESSIONS] == null) {
	    return null;
	  }
	  return this.json[this.EXPRESSIONS][n][this.FILE];
	};

	ModelSettingJson.prototype.getExpressionName = function (n) {
	  if (this.json[this.EXPRESSIONS] == null) {
	    return null;
	  }
	  return this.json[this.EXPRESSIONS][n][this.NAME];
	};

	ModelSettingJson.prototype.getLayout = function () {
	  return this.json[this.LAYOUT];
	};

	ModelSettingJson.prototype.getInitParamNum = function () {
	  return this.json[this.INIT_PARAM] == null ? 0 : this.json[this.INIT_PARAM].length;
	};

	ModelSettingJson.prototype.getMotionNum = function (name) {
	  if (this.json[this.MOTION_GROUPS] == null || this.json[this.MOTION_GROUPS][name] == null) {
	    return 0;
	  }

	  return this.json[this.MOTION_GROUPS][name].length;
	};

	ModelSettingJson.prototype.getMotions = function () {
	  if (this.json[this.MOTION_GROUPS] == null) {
	    return {};
	  }
	  return this.json[this.MOTION_GROUPS];
	};

	ModelSettingJson.prototype.getMotionFile = function (name, n) {
	  if (this.json[this.MOTION_GROUPS] == null || this.json[this.MOTION_GROUPS][name] == null || this.json[this.MOTION_GROUPS][name][n] == null) {
	    return null;
	  }

	  return this.json[this.MOTION_GROUPS][name][n][this.FILE];
	};

	ModelSettingJson.prototype.getMotionSound = function (name, n) {
	  if (this.json[this.MOTION_GROUPS] == null || this.json[this.MOTION_GROUPS][name] == null || this.json[this.MOTION_GROUPS][name][n] == null || this.json[this.MOTION_GROUPS][name][n][this.SOUND] == null) {
	    return null;
	  }

	  return this.json[this.MOTION_GROUPS][name][n][this.SOUND];
	};

	ModelSettingJson.prototype.getMotionFadeIn = function (name, n) {
	  if (this.json[this.MOTION_GROUPS] == null || this.json[this.MOTION_GROUPS][name] == null || this.json[this.MOTION_GROUPS][name][n] == null || this.json[this.MOTION_GROUPS][name][n][this.FADE_IN] == null) {
	    return 1000;
	  }

	  return this.json[this.MOTION_GROUPS][name][n][this.FADE_IN];
	};

	ModelSettingJson.prototype.getMotionFadeOut = function (name, n) {
	  if (this.json[this.MOTION_GROUPS] == null || this.json[this.MOTION_GROUPS][name] == null || this.json[this.MOTION_GROUPS][name][n] == null || this.json[this.MOTION_GROUPS][name][n][this.FADE_OUT] == null) {
	    return 1000;
	  }

	  return this.json[this.MOTION_GROUPS][name][n][this.FADE_OUT];
	};

	ModelSettingJson.prototype.getInitParamID = function (n) {
	  if (this.json[this.INIT_PARAM] == null || this.json[this.INIT_PARAM][n] == null) {
	    return null;
	  }

	  return this.json[this.INIT_PARAM][n][this.ID];
	};

	ModelSettingJson.prototype.getInitParamValue = function (n) {
	  if (this.json[this.INIT_PARAM] == null || this.json[this.INIT_PARAM][n] == null) {
	    return NaN;
	  }

	  return this.json[this.INIT_PARAM][n][this.VALUE];
	};

	ModelSettingJson.prototype.getInitPartsVisibleNum = function () {
	  return this.json[this.INIT_PARTS_VISIBLE] == null ? 0 : this.json[this.INIT_PARTS_VISIBLE].length;
	};

	ModelSettingJson.prototype.getInitPartsVisibleID = function (n) {
	  if (this.json[this.INIT_PARTS_VISIBLE] == null || this.json[this.INIT_PARTS_VISIBLE][n] == null) {
	    return null;
	  }
	  return this.json[this.INIT_PARTS_VISIBLE][n][this.ID];
	};

	ModelSettingJson.prototype.getInitPartsVisibleValue = function (n) {
	  if (this.json[this.INIT_PARTS_VISIBLE] == null || this.json[this.INIT_PARTS_VISIBLE][n] == null) {
	    return NaN;
	  }

	  return this.json[this.INIT_PARTS_VISIBLE][n][this.VALUE];
	};

	var LAppDefine = {

	  DEBUG_LOG: true,
	  DEBUG_MOUSE_LOG: false,
	  // DEBUG_DRAW_HIT_AREA : false,
	  // DEBUG_DRAW_ALPHA_MODEL : false,

	  VIEW_MAX_SCALE: 2,
	  VIEW_MIN_SCALE: 0,

	  VIEW_LOGICAL_LEFT: -1,
	  VIEW_LOGICAL_RIGHT: 1,

	  VIEW_LOGICAL_MAX_LEFT: -2,
	  VIEW_LOGICAL_MAX_RIGHT: 2,
	  VIEW_LOGICAL_MAX_BOTTOM: -2,
	  VIEW_LOGICAL_MAX_TOP: 2,

	  PRIORITY_NONE: 0,
	  PRIORITY_IDLE: 1,
	  PRIORITY_NORMAL: 2,
	  PRIORITY_FORCE: 3,

	  BACK_IMAGE_NAME: 'assets/image/back_class_normal.png',

	  MODEL_HARU: 'assets/live2d/haru/haru.model.json',
	  MODEL_HARU_A: 'assets/live2d/haru/haru_01.model.json',
	  MODEL_HARU_B: 'assets/live2d/haru/haru_02.model.json',
	  MODEL_SHIZUKU: 'assets/live2d/shizuku/shizuku.model.json',
	  MODEL_WANKO: 'assets/live2d/wanko/wanko.model.json',
	  MODEL_EPSILON: 'assets/live2d/Epsilon2.1/Epsilon2.1.model.json',
	  MODEL_SHOUXING: 'assets/live2d/shouxing/shouxing.model.json',

	  MOTION_GROUP_IDLE: 'idle',
	  MOTION_GROUP_TAP_BODY: 'tap_body',
	  MOTION_GROUP_FLICK_HEAD: 'flick_head',
	  MOTION_GROUP_PINCH_IN: 'pinch_in',
	  MOTION_GROUP_PINCH_OUT: 'pinch_out',
	  MOTION_GROUP_SHAKE: 'shake',

	  HIT_AREA_HEAD: 'head',
	  HIT_AREA_BODY: 'body'

	};

	/**
	 *
	 *  You can modify and use this source freely
	 *  only for the development of application related Live2D.
	 *
	 *  (c) Live2D Inc. All rights reserved.
	 */

	function MatrixStack() {}

	MatrixStack.matrixStack = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
	MatrixStack.depth = 0;
	MatrixStack.currentMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
	MatrixStack.tmp = new Array(16);
	MatrixStack.reset = function () {
	  this.depth = 0;
	};

	MatrixStack.loadIdentity = function () {
	  for (var i = 0; i < 16; i++) {
	    this.currentMatrix[i] = i % 5 === 0 ? 1 : 0;
	  }
	};

	MatrixStack.push = function () {
	  //   let offset = this.depth * 16
	  var nextOffset = (this.depth + 1) * 16;

	  if (this.matrixStack.length < nextOffset + 16) {
	    this.matrixStack.length = nextOffset + 16;
	  }

	  for (var i = 0; i < 16; i++) {
	    this.matrixStack[nextOffset + i] = this.currentMatrix[i];
	  }

	  this.depth++;
	};

	MatrixStack.pop = function () {
	  this.depth--;
	  if (this.depth < 0) {
	    console.error('Invalid matrix stack.');
	    this.depth = 0;
	  }

	  var offset = this.depth * 16;
	  for (var i = 0; i < 16; i++) {
	    this.currentMatrix[i] = this.matrixStack[offset + i];
	  }
	};

	MatrixStack.getMatrix = function () {
	  return this.currentMatrix;
	};

	MatrixStack.multMatrix = function (matNew) {
	  var i = void 0,
	      j = void 0,
	      k = void 0;

	  for (i = 0; i < 16; i++) {
	    this.tmp[i] = 0;
	  }

	  for (i = 0; i < 4; i++) {
	    for (j = 0; j < 4; j++) {
	      for (k = 0; k < 4; k++) {
	        this.tmp[i + j * 4] += this.currentMatrix[i + k * 4] * matNew[k + j * 4];
	      }
	    }
	  }
	  for (i = 0; i < 16; i++) {
	    this.currentMatrix[i] = this.tmp[i];
	  }
	};

	//= ===========================================================
	//= ===========================================================
	//  class LAppModel     extends L2DBaseModel
	//= ===========================================================
	//= ===========================================================
	function LAppModel(userModel) {
	  // L2DBaseModel.apply(this, arguments);
	  L2DBaseModel.prototype.constructor.call(this);
	  this.userRandomMotionType = 'idle';
	  this.userRrandomMotion_PRIORITY = 1;
	  this.UserclassModel = userModel;
	  this.modelHomeDir = '';
	  this.modelSetting = null;
	  this.tmpMatrix = [];
	  this.userMangerMotion = [];
	  this.isStartExpressCallBack = false;
	}

	LAppModel.prototype = new L2DBaseModel();

	_Object$assign(LAppModel.prototype, {
	  userStopExress: function userStopExress(callBack) {
	    if (this.expressionManager) {
	      this.expressionManager.stopAllMotions();
	    } else {
	      console.log('model.expressionManager为null');
	    }
	    if (isFunction_1(callBack)) {
	      callBack(this.UserclassModel);
	    }
	  },
	  userChangeRandoMotion: function userChangeRandoMotion(name) {
	    this.userRandomMotionType = name;
	  },
	  userStopMotion: function userStopMotion(callBack) {
	    this.mainMotionManager.stopAllMotions();
	    if (isFunction_1(callBack)) {
	      callBack(this.UserclassModel);
	    }
	  },
	  userStopNewMotion: function userStopNewMotion(id, callBack) {
	    if (this.userMangerMotion.length) {
	      this.userMangerMotion[id].manger.stopAllMotions();
	    }
	  },
	  userStartPose: function userStartPose(resolve) {
	    if (this.pose) {
	      this.pose.updateParam(this.live2DModel);
	    }
	    if (isFunction_1(resolve)) {
	      resolve(this.UserclassModel);
	    }
	  },
	  userStartPoseOption: function userStartPoseOption(url, resolve) {
	    var _this = this;

	    this.loadPose(url, function () {
	      _this.userStartPose(resolve);
	    });
	  },
	  userGetChangeClothes: function userGetChangeClothes(gl, resolve, classModel) {
	    var _this2 = this;

	    var num = this.modelSetting.getTextureNum();

	    var _loop = function _loop(i) {
	      var texPaths = _this2.modelHomeDir + _this2.modelSetting.getTextureFile(i);
	      _this2.loadTexture(i, texPaths, gl, function () {
	        if (i === num - 1) {
	          resolve(classModel);
	        }
	      });
	    };

	    for (var i = 0; i < num; i++) {
	      _loop(i);
	    }
	  }
	});

	LAppModel.prototype.load = function (gl, modelSettingPath, callback, replacePicType) {
	  var thisRef = this;
	  this.setUpdating(true);
	  this.setInitialized(false);
	  this.modelHomeDir = modelSettingPath.substring(0, modelSettingPath.lastIndexOf('/') + 1);
	  this.modelSetting = new ModelSettingJson();
	  this.modelSetting.loadModelSetting(modelSettingPath, function () {
	    // replacePicType==true 模拟换装
	    if (replacePicType === true) {
	      thisRef.modelSetting.json.textures = thisRef.UserclassModel.json.textures;
	    } else {
	      thisRef.UserclassModel.json = thisRef.modelSetting.json;
	    }
	    var path = thisRef.modelHomeDir + thisRef.modelSetting.getModelFile();
	    thisRef.loadModelData(path, function (model) {
	      for (var i = 0; i < thisRef.modelSetting.getTextureNum(); i++) {
	        var texPaths = thisRef.modelHomeDir + thisRef.modelSetting.getTextureFile(i);

	        thisRef.loadTexture(i, texPaths, gl, function () {
	          if (thisRef.isTexLoaded) {
	            if (thisRef.modelSetting.getExpressionNum() > 0) {
	              thisRef.expressions = {};

	              for (var j = 0; j < thisRef.modelSetting.getExpressionNum(); j++) {
	                var expName = thisRef.modelSetting.getExpressionName(j);
	                var expFilePath = thisRef.modelHomeDir + thisRef.modelSetting.getExpressionFile(j);

	                thisRef.loadExpression(expName, expFilePath);
	              }
	            } else {
	              thisRef.expressionManager = null;
	              thisRef.expressions = {};
	            }

	            if (thisRef.eyeBlink == null) {
	              thisRef.eyeBlink = new L2DEyeBlink();
	            }

	            if (thisRef.modelSetting.getPhysicsFile() != null) {
	              thisRef.loadPhysics(thisRef.modelHomeDir + thisRef.modelSetting.getPhysicsFile());
	            } else {
	              thisRef.physics = null;
	            }

	            if (thisRef.modelSetting.getPoseFile() != null) {
	              if (Array.isArray(thisRef.modelSetting.getPoseFile())) {
	                return;
	              }
	              thisRef.loadPose(thisRef.modelHomeDir + thisRef.modelSetting.getPoseFile(), function () {
	                //   thisRef.pose.updateParam(thisRef.live2DModel)
	              });
	            } else {
	              thisRef.pose = null;
	            }
	            debugger;
	            if (thisRef.modelSetting.getLayout() != null) {
	              var layout = thisRef.modelSetting.getLayout();
	              if (layout['width'] != null) {
	                thisRef.modelMatrix.setWidth(layout['width']);
	              }
	              if (layout['height'] != null) {
	                thisRef.modelMatrix.setHeight(layout['height']);
	              }

	              if (layout['x'] != null) {
	                thisRef.modelMatrix.setX(layout['x']);
	              }
	              if (layout['y'] != null) {
	                thisRef.modelMatrix.setY(layout['y']);
	              }
	              if (layout['center_x'] != null) {
	                thisRef.modelMatrix.centerX(layout['center_x']);
	              }
	              if (layout['center_y'] != null) {
	                thisRef.modelMatrix.centerY(layout['center_y']);
	              }
	              if (layout['top'] != null) {
	                thisRef.modelMatrix.top(layout['top']);
	              }
	              if (layout['bottom'] != null) {
	                thisRef.modelMatrix.bottom(layout['bottom']);
	              }
	              if (layout['left'] != null) {
	                thisRef.modelMatrix.left(layout['left']);
	              }
	              if (layout['right'] != null) {
	                thisRef.modelMatrix.right(layout['right']);
	              }
	            }

	            for (var _j = 0; _j < thisRef.modelSetting.getInitParamNum(); _j++) {
	              thisRef.live2DModel.setParamFloat(thisRef.modelSetting.getInitParamID(_j), thisRef.modelSetting.getInitParamValue(_j));
	            }

	            for (var _j2 = 0; _j2 < thisRef.modelSetting.getInitPartsVisibleNum(); _j2++) {
	              thisRef.live2DModel.setPartsOpacity(thisRef.modelSetting.getInitPartsVisibleID(_j2), thisRef.modelSetting.getInitPartsVisibleValue(_j2));
	            }

	            thisRef.live2DModel.saveParam();
	            // thisRef.live2DModel.setGL(gl);

	            thisRef.preloadMotionGroup(LAppDefine.MOTION_GROUP_IDLE);
	            thisRef.mainMotionManager.stopAllMotions();

	            thisRef.setUpdating(false);
	            thisRef.setInitialized(true);

	            if (typeof callback === 'function') {
	              setTimeout(function () {
	                callback(thisRef.UserclassModel);
	              }, 0);
	            }
	          }
	        });
	      }
	    });
	  });
	};

	LAppModel.prototype.release = function (gl) {
	  // this.live2DModel.deleteTextures();
	  var pm = Live2DFramework.getPlatformManager();

	  gl.deleteTexture(pm.texture); // 无效 pm.texture===undefined
	};

	LAppModel.prototype.preloadMotionGroup = function (name) {
	  var _this3 = this;

	  var thisRef = this;

	  var _loop2 = function _loop2(i) {
	    var file = _this3.modelSetting.getMotionFile(name, i);
	    _this3.loadMotion(file, _this3.modelHomeDir + file, function (motion) {
	      motion.setFadeIn(thisRef.modelSetting.getMotionFadeIn(name, i));
	      motion.setFadeOut(thisRef.modelSetting.getMotionFadeOut(name, i));
	    });
	  };

	  for (var i = 0; i < this.modelSetting.getMotionNum(name); i++) {
	    _loop2(i);
	  }
	};

	LAppModel.prototype.update = function () {
	  var _this4 = this;

	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref$mouseNum = _ref.mouseNum,
	      mouseNum = _ref$mouseNum === undefined ? false : _ref$mouseNum;

	  // console.log("--> LAppModel.update()");

	  if (this.live2DModel == null) {
	    if (LAppDefine.DEBUG_LOG) console.error('Failed to update.');

	    return;
	  }

	  var timeMSec = UtSystem.getUserTimeMSec() - this.startTimeMSec;
	  var timeSec = timeMSec / 1000.0;
	  var t = timeSec * 2 * Math.PI;

	  if (this.mainMotionManager.isFinished()) {
	    // console.log('isFinished')
	    if (isFunction_1(this.startMotionCallBack)) {
	      this.startMotionCallBack(this.UserclassModel);
	      this.startMotionCallBack = null;
	    } else {
	      //   console.log('startRandomMotion')
	      this.startRandomMotion(this.userRandomMotionType, LAppDefine.PRIORITY_IDLE);
	    }
	    // this.startRandomMotion(LAppDefine.MOTION_GROUP_IDLE, LAppDefine.PRIORITY_IDLE)
	  }

	  // -----------------------------------------------------------------

	  this.live2DModel.loadParam();
	  if (this.userMangerMotion.length) {
	    this.userMangerMotion.forEach(function (_ref2, index) {
	      var manger = _ref2.manger,
	          callBack = _ref2.callBack;

	      manger.updateParam(_this4.live2DModel);
	      if (manger.isFinished()) {
	        _this4.userMangerMotion.splice(index, 1);
	        callBack();
	      }
	    });
	  }
	  var update = this.mainMotionManager.updateParam(this.live2DModel);
	  if (!update) {
	    if (this.eyeBlink != null) {
	      this.eyeBlink.updateParam(this.live2DModel);
	    }
	  }

	  this.live2DModel.saveParam();

	  // -----------------------------------------------------------------

	  if (this.expressionManager != null && this.expressions != null && !this.expressionManager.isFinished()) {
	    console.log('isFinished');
	    this.expressionManager.updateParam(this.live2DModel);
	    if (this.isStartExpressCallBack) {
	      this.isStartExpressCallBack = false;
	      var timeId = setTimeout(function () {
	        clearTimeout(timeId);
	        if (isFunction_1(_this4.startExpressCallBack)) {
	          _this4.startExpressCallBack(_this4.UserclassModel);
	          _this4.setExpressionstartExpressCallBack = null;
	        }
	      }, 200);
	    }
	  }

	  this.live2DModel.addToParamFloat('PARAM_ANGLE_X', this.dragX * 30, 1);
	  this.live2DModel.addToParamFloat('PARAM_ANGLE_Y', this.dragY * 30, 1);
	  this.live2DModel.addToParamFloat('PARAM_ANGLE_Z', this.dragX * this.dragY * -30, 1);

	  this.live2DModel.addToParamFloat('PARAM_BODY_ANGLE_X', this.dragX * 10, 1);

	  this.live2DModel.addToParamFloat('PARAM_EYE_BALL_X', this.dragX, 1);
	  this.live2DModel.addToParamFloat('PARAM_EYE_BALL_Y', this.dragY, 1);

	  this.live2DModel.addToParamFloat('PARAM_ANGLE_X', Number(15 * Math.sin(t / 6.5345)), 0.5);
	  this.live2DModel.addToParamFloat('PARAM_ANGLE_Y', Number(8 * Math.sin(t / 3.5345)), 0.5);
	  this.live2DModel.addToParamFloat('PARAM_ANGLE_Z', Number(10 * Math.sin(t / 5.5345)), 0.5);
	  this.live2DModel.addToParamFloat('PARAM_BODY_ANGLE_X', Number(4 * Math.sin(t / 15.5345)), 0.5);
	  this.live2DModel.setParamFloat('PARAM_BREATH', Number(0.5 + 0.5 * Math.sin(t / 3.2345)), 1);

	  if (this.physics != null) {
	    this.physics.updateParam(this.live2DModel);
	  }
	  if (mouseNum !== false) {
	    this.live2DModel.setParamFloat('PARAM_MOUTH_OPEN_Y', mouseNum);
	  }

	  if (this.pose != null) ;

	  this.live2DModel.update();
	};

	LAppModel.prototype.setRandomExpression = function () {
	  var tmp = [];
	  for (var name in this.expressions) {
	    tmp.push(name);
	  }

	  var no = parseInt(Math.random() * tmp.length);

	  this.setExpression(tmp[no]);
	};

	LAppModel.prototype.startRandomMotion = function (name, priority) {
	  var max = this.modelSetting.getMotionNum(name);
	  if (max / 1 === 0) return;
	  var no = parseInt(Math.random() * max);
	  this.startMotion(name, no, priority);
	};

	LAppModel.prototype.startMotion = function (name, no, priority, resolve, newMotion) {
	  // console.log("startMotion : " + name + " " + no + " " + priority);
	  var motionName = this.modelSetting.getMotionFile(name, no);

	  if (motionName == null || motionName === '') {
	    if (LAppDefine.DEBUG_LOG) {
	      console.error('Failed to motion.');
	    }
	    return;
	  }
	  var newMotionManager = null;
	  if (newMotion === true) {
	    newMotionManager = new L2DMotionManager();
	  } else {
	    newMotionManager = this.mainMotionManager;
	  }

	  if (priority === LAppDefine.PRIORITY_FORCE) {
	    newMotionManager.setReservePriority(priority);
	  } else if (!newMotionManager.reserveMotion(priority)) {
	    if (LAppDefine.DEBUG_LOG) {
	      console.log('Motion is running.');
	    }
	    return;
	  }

	  var thisRef = this;
	  var motion = void 0;

	  if (this.motions[name] == null) {
	    this.loadMotion(null, this.modelHomeDir + motionName, function (mtn) {
	      motion = mtn;
	      thisRef.setFadeInFadeOut(name, no, priority, motion, resolve, { motion: newMotionManager, isTrue: newMotion });
	    });
	  } else {
	    motion = this.motions[name];
	    thisRef.setFadeInFadeOut(name, no, priority, motion, resolve, { motion: newMotionManager, isTrue: newMotion });
	  }
	};

	LAppModel.prototype.setFadeInFadeOut = function (name, no, priority, motion, resolve, newMotionManager) {
	  var motionName = this.modelSetting.getMotionFile(name, no);
	  var motionManger = newMotionManager.isTrue === true ? newMotionManager.motion : this.mainMotionManager;
	  motion.setFadeIn(this.modelSetting.getMotionFadeIn(name, no));
	  motion.setFadeOut(this.modelSetting.getMotionFadeOut(name, no));
	  if (LAppDefine.DEBUG_LOG) {
	    console.log('Start motion : ' + motionName);
	  }
	  if (this.modelSetting.getMotionSound(name, no) == null) {
	    // 传入自己的sound资源路径
	    if (this.UserclassModel.isHasOwnSound) {
	      this.UserclassModel.startSound();
	    }
	    motionManger.startMotionPrio(motion, priority);

	    this.startMotionCallBack = newMotionManager.isTrue === true ? null : resolve;
	  } else {
	    // 传入自己的sound资源路径
	    if (this.UserclassModel.isHasOwnSound) {
	      this.UserclassModel.startSound();
	    } else {
	      // model.json资源里自己配的sound资源
	      var soundName = this.modelSetting.getMotionSound(name, no);
	      var snd = document.createElement('audio');
	      snd.src = this.modelHomeDir + soundName;
	      if (LAppDefine.DEBUG_LOG) {
	        console.log('Start sound : ' + soundName);
	      }
	      snd.play();
	    }

	    motionManger.startMotionPrio(motion, priority);
	    this.startMotionCallBack = newMotionManager.isTrue === true ? null : resolve;
	  }
	  if (newMotionManager.isTrue === true) {
	    this.userMangerMotion.push({ manger: newMotionManager.motion, callBack: resolve });
	  }
	};

	LAppModel.prototype.setExpression = function (name, resolve) {
	  var motion = this.expressions[name];

	  if (LAppDefine.DEBUG_LOG) {
	    console.log('Expression : ' + name);
	  }

	  this.expressionManager.startMotion(motion, false);
	  this.isStartExpressCallBack = true;
	  this.startExpressCallBack = resolve;
	};

	LAppModel.prototype.draw = function (gl) {
	  // console.log("--> LAppModel.draw()");

	  // if(this.live2DModel == null) return;

	  MatrixStack.push();

	  MatrixStack.multMatrix(this.modelMatrix.getArray());

	  this.tmpMatrix = MatrixStack.getMatrix();
	  this.live2DModel.setMatrix(this.tmpMatrix);
	  this.live2DModel.draw();

	  MatrixStack.pop();
	};

	LAppModel.prototype.hitTest = function (id, testX, testY) {
	  var len = this.modelSetting.getHitAreaNum();
	  for (var i = 0; i < len; i++) {
	    if (id === this.modelSetting.getHitAreaName(i) / 1) {
	      var drawID = this.modelSetting.getHitAreaID(i);

	      return this.hitTestSimple(drawID, testX, testY);
	    }
	  }

	  return false;
	};

	function LAppLive2DManager() {
	  // console.log("--> LAppLive2DManager()");

	  this.models = [];

	  this.count = -1;
	  this.reloadFlg = false;

	  Live2D.init();
	  Live2DFramework.setPlatformManager(new PlatformManager());
	}

	_Object$assign(LAppLive2DManager.prototype, {
	  userDelete: function userDelete(model, gl) {
	    var _this = this;

	    this.models.some(function (val, index) {
	      if (val === model) {
	        _this.models[index].release(gl);
	        delete _this.models[index];
	        _this.models.splice(index, 1);
	        return true;
	      }
	    });
	  },
	  userPlacePart: function userPlacePart(classModel, gl, userModel, modelJsonFile, callBack) {
	    var _this2 = this;

	    this.models.some(function (val, index) {
	      if (val === classModel.model) {
	        _this2.models[index].release(gl);
	        delete _this2.models[index];
	        delete classModel.model;
	        classModel.model = new LAppModel(userModel);
	        _this2.models.splice(index, 1, classModel.model);
	        _this2.models[index].load(gl, modelJsonFile, callBack, true);
	        return true;
	      }
	    });
	  }
	});
	LAppLive2DManager.prototype.createModel = function (userModel) {
	  // console.log
	  var model = new LAppModel(userModel);
	  this.models.push(model);

	  return model;
	};

	LAppLive2DManager.prototype.loadModel = function (gl, modelJsonFile, userModel, callback) {
	  // console.log("--> LAppLive2DManager.update(gl)");

	  if (this.reloadFlg) {
	    this.reloadFlg = false;
	    this.releaseAllModel(gl);
	    // let thisRef = this

	    var model = this.createModel(userModel);
	    this.models[0].load(gl, modelJsonFile, callback);
	    return model;
	  }
	};
	LAppLive2DManager.prototype.addModel = function (gl, modelJsonFile, userModel, callback) {
	  // console.log("--> LAppLive2DManager.update(gl)");

	  if (this.reloadFlg) {
	    this.reloadFlg = false;

	    // let thisRef = this

	    var model = this.createModel(userModel);

	    this.models[this.models.length - 1].load(gl, modelJsonFile, callback);
	    return model;
	  }
	};

	/*
	LAppLive2DManager.prototype.changeModel = function(gl)
	{
	    // console.log("--> LAppLive2DManager.update(gl)");

	    if (this.reloadFlg)
	    {

	        this.reloadFlg = false;
	        var no = parseInt(this.count % 6);

	        var thisRef = this;
	        switch (no)
	        {
	            case 0:
	                this.releaseModel(1, gl);
	                this.releaseModel(0, gl);

	                this.createModel();
	                this.models[0].load(gl, LAppDefine.MODEL_HARU);
	                break;
	            case 1:
	                this.releaseModel(0, gl);
	                this.createModel();
	                this.models[0].load(gl, LAppDefine.MODEL_SHIZUKU);
	                break;
	            case 2:
	                this.releaseModel(0, gl);
	                this.createModel();
	                this.models[0].load(gl, LAppDefine.MODEL_WANKO);
	                break;
	            case 3:
	                this.releaseModel(0, gl);
	                this.createModel();
	                this.models[0].load(gl, LAppDefine.MODEL_EPSILON);
	                break;
	            case 4:
	                this.releaseModel(0, gl);
	                this.createModel();
	                this.models[0].load(gl, LAppDefine.MODEL_SHOUXING);
	                break;
	            case 5:
	                this.releaseModel(0, gl);
	                // 一体目のモデル
	                this.createModel();
	                this.models[0].load(gl, LAppDefine.MODEL_HARU_A, function() {
	                    // 二体目のモデル
	                    thisRef.createModel();
	                    thisRef.models[1].load(gl, LAppDefine.MODEL_HARU_B);
	                });
	                break;

	            default:
	                break;
	        }
	    }
	};
	*/

	LAppLive2DManager.prototype.getModel = function (no) {
	  // console.log("--> LAppLive2DManager.getModel(" + no + ")");

	  if (no >= this.models.length) return null;

	  return this.models[no];
	};

	LAppLive2DManager.prototype.releaseAllModel = function (gl) {
	  // console.log("--> LAppLive2DManager.releaseModel(" all")");

	  for (var i = 0; i < this.models.length; i++) {
	    this.models[i].release(gl);

	    delete this.models[i];
	  }
	  this.models = [];
	};

	LAppLive2DManager.prototype.releaseModel = function (no, gl) {
	  // console.log("--> LAppLive2DManager.releaseModel(" + no + ")");

	  if (this.models.length <= no) return;

	  this.models[no].release(gl);

	  delete this.models[no];
	  this.models.splice(no, 1);
	};

	LAppLive2DManager.prototype.numModels = function () {
	  return this.models.length;
	};

	LAppLive2DManager.prototype.setDrag = function (x, y) {
	  for (var i = 0; i < this.models.length; i++) {
	    this.models[i].setDrag(x, y);
	  }
	};

	LAppLive2DManager.prototype.maxScaleEvent = function () {
	  if (LAppDefine.DEBUG_LOG) {
	    console.log('Max scale event.');
	  }
	  for (var i = 0; i < this.models.length; i++) {
	    // this.models[i].startRandomMotion(LAppDefine.MOTION_GROUP_PINCH_IN,
	    //                                 LAppDefine.PRIORITY_NORMAL);
	  }
	};

	LAppLive2DManager.prototype.minScaleEvent = function () {
	  if (LAppDefine.DEBUG_LOG) {
	    console.log('Min scale event.');
	  }
	  for (var i = 0; i < this.models.length; i++) {
	    // this.models[i].startRandomMotion(LAppDefine.MOTION_GROUP_PINCH_OUT,
	    //                                 LAppDefine.PRIORITY_NORMAL);
	  }
	};

	LAppLive2DManager.prototype.tapEvent = function (x, y) {
	  if (LAppDefine.DEBUG_LOG) {
	    console.log('tapEvent view x:' + x + ' y:' + y);
	  }

	  for (var i = 0; i < this.models.length; i++) {
	    if (this.models[i].hitTest(LAppDefine.HIT_AREA_HEAD, x, y)) {
	      if (LAppDefine.DEBUG_LOG) {
	        console.log('Tap face.');
	      }

	      this.models[i].setRandomExpression();
	    } else if (this.models[i].hitTest(LAppDefine.HIT_AREA_BODY, x, y)) {
	      if (LAppDefine.DEBUG_LOG) {
	        console.log('Tap body.' + ' models[' + i + ']');
	      }

	      this.models[i].startRandomMotion(LAppDefine.MOTION_GROUP_TAP_BODY, LAppDefine.PRIORITY_NORMAL);
	    }
	  }

	  return true;
	};

	var DOMID = { divTextId: 'divText', canvasId: 'canvasId', divBoxId: 'divBox' };

	var LiveComponent = {
	  name: 'FindLive2d',
	  component: {
	    render: function render(createElement) {
	      var divText = createElement('div', {
	        attrs: {
	          id: DOMID.divTextId
	        },
	        on: {
	          click: function () {
	            console.log(this.divText);
	          }.bind(this)
	        },
	        style: _extends$1({
	          width: this.liveWH.width + 'px'
	        }, this.divText.style),
	        'class': {
	          live2dTextAnimationClass_ttxs: this.divText.isLive2dTextAnimationClass_ttxs
	        }
	      });
	      var canvas = createElement('canvas', {
	        attrs: {
	          id: DOMID.canvasId,
	          width: this.liveWH.width,
	          height: this.liveWH.height

	        },
	        style: {
	          zIndex: 999
	        },
	        'class': {
	          live2dCanvas_ttxs: true
	        }
	      });
	      return createElement('div', {
	        attrs: {
	          id: DOMID.divBoxId
	        },
	        'class': {
	          live2dDivBoxClass_ttxs: true
	        }
	      }, [divText, canvas, this.$slots.default]);
	    },

	    props: {
	      liveWH: {
	        type: Object,
	        default: function _default() {
	          return {
	            width: 400,
	            height: 600
	          };
	        }
	      }
	    },
	    data: function data() {
	      return {
	        divText: {
	          isLive2dTextAnimationClass_ttxs: true,
	          divTextContent: 'hellow main',
	          style: {
	            boxSizing: 'border-box',
	            position: 'absolute',
	            left: 0,
	            top: 0,
	            color: 'skyblue',
	            textAlign: 'center',
	            padding: '7px',
	            fontSize: '18px',
	            border: '1px solid rgba(255, 137, 255,0.1)',
	            backgroundColor: 'rgba(255, 137, 255,0.4)',
	            boxShadow: '0 3px 15px 2px rgba(255, 137, 255,0.4)',
	            borderRadius: '17px',
	            display: 'none',
	            opacity: 0
	          }
	        }

	      };
	    },

	    methods: {
	      abc: function abc() {}
	    },
	    mounted: function mounted() {}
	  }
	};

	// import { isFunction } from 'lodash'

	/**
	 * @class CreateScene
	 * @param {String} canvasId
	 */

	var CreateScene = function () {
	  function CreateScene() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref$vm = _ref.vm,
	        _ref$canvasId = _ref.canvasId,
	        canvasId = _ref$canvasId === undefined ? false : _ref$canvasId,
	        _ref$divBoxId = _ref.divBoxId,
	        _ref$divTextId = _ref.divTextId,
	        _ref$isVue = _ref.isVue;

	    _classCallCheck(this, CreateScene);

	    if (this.getError(canvasId)) {
	      return console.error('不符合参数要求');
	    }
	    this.getIsVue(arguments[0]);

	    this.userAppearAnimation = false;
	    this.user_model = {};
	    this.user_isDraw = false;
	    this.user_animationId = null;
	    this.live2DMgr = new LAppLive2DManager();
	    this.isDrawStart = false;
	    this.mouseNum = '';
	    this.gl = null;
	    this.dragMgr = null; /* new L2DTargetPoint(); */
	    this.viewMatrix = null; /* new L2DViewMatrix(); */
	    this.projMatrix = null; /* new L2DMatrix44() */
	    this.drag = false;
	    this.oldLen = 0;
	    this.lastMouseX = 0;
	    this.lastMouseY = 0;
	    this.isModelShown = false;
	    this.init();
	    return 'success';
	  }
	  /**
	   * @
	   */


	  _createClass(CreateScene, [{
	    key: 'getIsVue',
	    value: function getIsVue(arg) {
	      var t = document.getElementById.bind(document);
	      this.canvas = t(arg.canvasId);
	      if (arg.isVue === true) {
	        this.vm = arg.vm;
	        this.divBox = t(arg.divBoxId);
	        this.divText = t(arg.divTextId);
	      }
	      this.moveDom = arg.isVue === true ? this.divBox : this.canvas;
	      this.moveDom.setAttribute('style', 'display:none;position:fixed;left:0;top:0;opacity:0');
	    }
	  }, {
	    key: 'getError',
	    value: function getError(canvasId) {
	      if (canvasId === false) {
	        return true;
	      }
	    }
	  }, {
	    key: 'getWebGLContext',
	    value: function getWebGLContext() {
	      var NAMES = ['webgl', 'experimental-webgl', 'webkit-3d', 'moz-webgl'];
	      for (var i = 0; i < NAMES.length; i++) {
	        try {
	          var ctx = this.canvas.getContext(NAMES[i], { premultipliedAlpha: true, alpha: true });
	          if (ctx) {
	            console.log(ctx.clearColor);
	            return ctx;
	          }
	        } catch (e) {}
	      }
	      return null;
	    }
	    /**
	     * @
	     */

	  }, {
	    key: 'draw',
	    value: function draw() {
	      var _this = this;

	      MatrixStack.reset();
	      MatrixStack.loadIdentity();

	      this.dragMgr.update();
	      this.live2DMgr.setDrag(this.dragMgr.getX(), this.dragMgr.getY());

	      this.gl.clear(this.gl.COLOR_BUFFER_BIT);

	      MatrixStack.multMatrix(this.projMatrix.getArray());
	      MatrixStack.multMatrix(this.viewMatrix.getArray());
	      MatrixStack.push();

	      _Object$entries(this.user_model).forEach(function (_ref2) {
	        var _ref3 = _slicedToArray(_ref2, 2),
	            name = _ref3[0],
	            classModel = _ref3[1];

	        var userMouseArray = classModel.userMouseArray,
	            model = classModel.model,
	            mouseSpeed = classModel.mouseSpeed;

	        if (model == null) return;
	        if (model.initialized && !model.updating) {
	          if (model && !userMouseArray.length) {
	            model.update();
	          } else {
	            classModel.mouseSpeedMark += 1;
	            if (classModel.mouseSpeedMark === mouseSpeed) {
	              classModel.mouseSpeedMark = -1;
	              _this.mouseNum = parseFloat(userMouseArray.shift());
	              model.update({ mouseNum: _this.mouseNum });
	            } else {
	              model.update({ mouseNum: _this.mouseNum });
	            }
	          }

	          model.draw(_this.gl);
	        }
	      });
	      // for (let i = 0; i < this.live2DMgr.numModels(); i++) {

	      // }

	      MatrixStack.pop();
	    }
	  }, {
	    key: 'modelScaling',
	    value: function modelScaling(scale) {
	      // let isMaxScale = this.viewMatrix.isMaxScale()
	      // let isMinScale = this.viewMatrix.isMinScale()
	      this.viewMatrix.adjustScale(0, 0, scale);
	      if (this.viewMatrix.isMaxScale()) {
	        this.isUserMaxScale = true;
	      }

	      if (this.viewMatrix.isMinScale()) {
	        this.isUserMinScale = true;
	      }
	    }
	    /**
	     * @
	     */

	  }, {
	    key: 'init',
	    value: function init() {
	      var width = this.canvas.width;
	      var height = this.canvas.height;

	      this.dragMgr = new L2DTargetPoint(); // yuanx-1

	      var ratio = height / width;
	      var left = LAppDefine.VIEW_LOGICAL_LEFT;
	      var right = LAppDefine.VIEW_LOGICAL_RIGHT;
	      var bottom = -ratio;
	      var top = ratio;

	      this.viewMatrix = new L2DViewMatrix();

	      this.viewMatrix.setScreenRect(left, right, bottom, top);

	      this.viewMatrix.setMaxScreenRect(LAppDefine.VIEW_LOGICAL_MAX_LEFT, LAppDefine.VIEW_LOGICAL_MAX_RIGHT, LAppDefine.VIEW_LOGICAL_MAX_BOTTOM, LAppDefine.VIEW_LOGICAL_MAX_TOP);

	      this.viewMatrix.setMaxScale(LAppDefine.VIEW_MAX_SCALE);
	      this.viewMatrix.setMinScale(LAppDefine.VIEW_MIN_SCALE);

	      this.projMatrix = new L2DMatrix44();
	      this.projMatrix.multScale(1, width / height);

	      this.deviceToScreen = new L2DMatrix44();
	      this.deviceToScreen.multTranslate(-width / 2.0, -height / 2.0);
	      this.deviceToScreen.multScale(2 / width, -2 / width);

	      this.gl = this.getWebGLContext();
	      if (!this.gl) {
	        console.error('Failed to create WebGL context.');
	        return;
	      }
	      console.dir(this.gl.clearColor);
	      Live2D.setGL(this.gl);
	      this.gl.clearColor(0.0, 0.0, 0.0, 0.0);
	    }
	    /**
	     * @
	     */

	  }, {
	    key: 'Utick',
	    value: function Utick() {
	      var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	      this.draw();
	      this.user_animationId = requestAnimationFrame(this.Utick.bind(this), this.canvas);
	    }
	  }, {
	    key: 'stopUtick',
	    value: function stopUtick() {
	      cancelAnimationFrame(this.user_animationId);
	    }
	  }, {
	    key: 'startUtick',
	    value: function startUtick() {
	      this.Utick();
	    }
	  }, {
	    key: 'startDraw',
	    value: function startDraw() {
	      if (this.user_isDraw) {
	        return;
	      }
	      this.user_isDraw = true;
	      this.Utick();
	    }
	  }, {
	    key: 'modelName',
	    value: function modelName(name, model) {
	      if (!name) {
	        this.user_model['default'] = model;
	      } else {
	        this.user_model[name] = model;
	      }
	    }
	    /**
	     * @param {String} name - 添加的模型名字
	     * @param {String} configUrl - model.json路径
	     */
	    // callback 不能用promise 因为 return的值是model

	  }, {
	    key: 'addModel',
	    value: function addModel() {
	      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref4$name = _ref4.name,
	          name = _ref4$name === undefined ? '' : _ref4$name,
	          _ref4$configUrl = _ref4.configUrl,
	          configUrl = _ref4$configUrl === undefined ? '' : _ref4$configUrl;

	      var callBack = arguments[1];

	      if (_Object$keys(this.user_model).includes(name)) {
	        console.error('model重复命名');
	        return;
	      }

	      var model = new Model(configUrl, this, callBack);
	      this.modelName(name, model);
	      return model;
	    }
	  }, {
	    key: 'loadModel',
	    value: function loadModel() {
	      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref5$name = _ref5.name,
	          name = _ref5$name === undefined ? '' : _ref5$name,
	          _ref5$configUrl = _ref5.configUrl,
	          configUrl = _ref5$configUrl === undefined ? '' : _ref5$configUrl;

	      var callBack = arguments[1];

	      this.user_model = [];
	      var model = new Model(configUrl, this, callBack, true);
	      this.modelName(name, model);
	      return model;
	    }
	  }, {
	    key: 'getModel',
	    value: function getModel(name) {
	      return this.user_model[name];
	    }
	  }, {
	    key: 'getAllModelName',
	    value: function getAllModelName() {
	      return _Object$keys(this.user_model);
	    }
	  }, {
	    key: 'removeModel',
	    value: function removeModel(name) {
	      if (!_Object$keys(this.user_model).includes(name)) {
	        console.error('没有该model');
	        return;
	      }
	      this.live2DMgr.userDelete(this.user_model[name].model, this.gl);
	      return delete this.user_model[name];
	    }
	  }, {
	    key: 'getIsMove',
	    value: function getIsMove(x, y) {
	      if (parseInt(this.canvas.style.left) === parseInt(x) && parseInt(this.canvas.style.top) === parseInt(y)) {
	        return true;
	      }
	      if (x === false && y === false) {
	        return true;
	      }
	      if (x === false && parseInt(this.canvas.style.top) === parseInt(y)) {
	        return true;
	      }
	      if (y === false && parseInt(this.canvas.style.left) === parseInt(x)) {
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'move',
	    value: function move() {
	      var _this2 = this;

	      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref6$x = _ref6.x,
	          x = _ref6$x === undefined ? false : _ref6$x,
	          _ref6$y = _ref6.y,
	          y = _ref6$y === undefined ? false : _ref6$y,
	          _ref6$time = _ref6.time,
	          time = _ref6$time === undefined ? '500ms' : _ref6$time;

	      return new _Promise(function (resolve, reject) {
	        if (_this2.getIsAnimation(resolve, 'none')) {
	          return;
	        }
	        if (_this2.getIsMove(x, y)) {
	          resolve('没有移动');
	          return;
	        }
	        _this2.userAppearAnimation = true;
	        _this2.moveDom.style.transition = 'all ' + time + ' linear';
	        _this2.setCanvasStyle({ left: x + 'px', top: y + 'px' });
	        var fn = function fn(e) {
	          _this2.moveDom.removeEventListener('transitionend', fn);
	          _this2.setCanvasStyle({ transition: 'none' });
	          _this2.userAppearAnimation = false;
	          resolve(_this2);
	        };
	        _this2.addCanvasEvent({ event: 'transitionend', func: fn });
	      });
	    }
	  }, {
	    key: 'addCanvasEvent',
	    value: function addCanvasEvent() {
	      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref7$event = _ref7.event,
	          event = _ref7$event === undefined ? 'click' : _ref7$event,
	          _ref7$func = _ref7.func,
	          func = _ref7$func === undefined ? function () {} : _ref7$func;

	      this.moveDom.addEventListener(event, func);
	    }
	  }, {
	    key: 'getChongHui',
	    value: function getChongHui(property, dom) {
	      if (window.getComputedStyle(dom, null)[property]) {
	        console.log('getChongHui-sucess');
	      }
	    }
	    /**
	     */

	  }, {
	    key: 'appear',
	    value: function appear() {
	      var _this3 = this;

	      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref8$startX = _ref8.startX,
	          startX = _ref8$startX === undefined ? 0 : _ref8$startX,
	          _ref8$startY = _ref8.startY,
	          startY = _ref8$startY === undefined ? 0 : _ref8$startY,
	          _ref8$endX = _ref8.endX,
	          endX = _ref8$endX === undefined ? startX : _ref8$endX,
	          _ref8$endY = _ref8.endY,
	          endY = _ref8$endY === undefined ? startY : _ref8$endY,
	          _ref8$startOpacity = _ref8.startOpacity,
	          startOpacity = _ref8$startOpacity === undefined ? 0 : _ref8$startOpacity,
	          _ref8$time = _ref8.time,
	          time = _ref8$time === undefined ? '500ms' : _ref8$time,
	          _ref8$animation = _ref8.animation,
	          animation = _ref8$animation === undefined ? false : _ref8$animation,
	          _ref8$textContent = _ref8.textContent,
	          textContent = _ref8$textContent === undefined ? false : _ref8$textContent;

	      return new _Promise(function (resolve, reject) {
	        if (_this3.getIsAnimation(resolve, 'block')) {
	          return;
	        }
	        if (_this3.vm && textContent !== false) {
	          _this3.appearText({ text: textContent });
	        }
	        _this3.startUtick();
	        _this3.setCanvasStyle({ left: startX + 'px', top: startY + 'px' });
	        if (animation) {
	          _this3.userAppearAnimation = true;
	          _this3.setCanvasStyle({ opacity: startOpacity, transition: 'all ' + time + ' linear', display: 'block' });
	          _this3.getChongHui('opacity', _this3.moveDom);
	          _this3.setCanvasStyle({ opacity: 1, left: endX + 'px', top: endY + 'px' });
	          var fn = function fn() {
	            _this3.moveDom.removeEventListener('transitionend', fn);
	            _this3.setCanvasStyle({ transition: 'none' });
	            _this3.userAppearAnimation = false;
	            resolve(_this3);
	          };
	          _this3.moveDom.addEventListener('transitionend', fn);
	        } else {
	          _this3.setCanvasStyle({ display: 'block', opacity: 1 });
	          resolve(_this3);
	        }
	      });
	    }
	  }, {
	    key: 'setCanvasStyle',
	    value: function setCanvasStyle(objStyle) {
	      var _this4 = this;

	      _Object$entries(objStyle).forEach(function (_ref9) {
	        var _ref10 = _slicedToArray(_ref9, 2),
	            key = _ref10[0],
	            value = _ref10[1];

	        _this4.moveDom.style[key] = value;
	      });
	    }
	  }, {
	    key: 'disappear',
	    value: function disappear() {
	      var _this5 = this;

	      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref11$time = _ref11.time,
	          time = _ref11$time === undefined ? '500ms' : _ref11$time,
	          _ref11$opacity = _ref11.opacity,
	          opacity = _ref11$opacity === undefined ? 0 : _ref11$opacity,
	          _ref11$animation = _ref11.animation,
	          animation = _ref11$animation === undefined ? false : _ref11$animation;

	      return new _Promise(function (resolve, reject) {
	        if (_this5.getIsAnimation(resolve, 'none')) {
	          return;
	        }
	        _this5.stopUtick();
	        if (animation) {
	          _this5.userAppearAnimation = true;
	          _this5.setCanvasStyle({ transition: 'all ' + time + ' linear', opacity: opacity });
	          var fn = function fn() {
	            _this5.moveDom.removeEventListener('transitionend', fn);
	            _this5.setCanvasStyle({ display: 'none', transition: 'none' });
	            _this5.userAppearAnimation = false;
	            resolve(_this5);
	          };
	          _this5.moveDom.addEventListener('transitionend', fn);
	        } else {
	          _this5.setCanvasStyle({ display: 'none', opacity: opacity });
	          resolve(_this5);
	        }
	      });
	    }
	    /**
	     * @method {animation}
	     * @param {obj} stylePropertys ----{width:100,height:100,top:1,left:1,time:"500ms",opacity:0}
	     */

	  }, {
	    key: 'getIsAnimation',
	    value: function getIsAnimation(resolve, display) {
	      if (this.userAppearAnimation) {
	        resolve('正在动画');
	        return true;
	      }
	      if (this.moveDom.style.display === display) {
	        resolve('不适合用该动画');
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'animation',
	    value: function animation() {
	      var _this6 = this,
	          _arguments = arguments;

	      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref12$time = _ref12.time,
	          time = _ref12$time === undefined ? '500ms' : _ref12$time,
	          _ref12$top = _ref12.top,
	          _ref12$left = _ref12.left,
	          _ref12$opacity = _ref12.opacity;

	      return new _Promise(function (resolve, reject) {
	        if (_this6.getIsAnimation(resolve, 'none')) {
	          return;
	        }
	        _this6.userAppearAnimation = true;
	        var obj = {};
	        _Object$entries(_arguments[0]).forEach(function (_ref13) {
	          var _ref14 = _slicedToArray(_ref13, 2),
	              property = _ref14[0],
	              value = _ref14[1];

	          if (value !== false) {
	            obj[property] = value;
	          }
	        });
	        _this6.setCanvasStyle({ transition: 'all ' + time + ' linear' });
	        for (var k in obj) {
	          if (k === 'time') {
	            break;
	          }
	          if (k === 'opacity') {
	            _this6.moveDom.style[k] = obj[k];
	            break;
	          }
	          _this6.moveDom.style[k] = obj[k] + 'px';
	        }
	        var fn = function fn() {
	          _this6.moveDom.removeEventListener('transitionend', fn);
	          _this6.setCanvasStyle({ transition: 'none' });
	          _this6.userAppearAnimation = false;
	          resolve(_this6);
	        };
	        _this6.moveDom.addEventListener('transitionend', fn);
	      });
	    }
	  }]);

	  return CreateScene;
	}();
	/**
	 * @class Model
	 * @desc model类
	 * @param {obj} modelJson
	 */


	var Model = function () {
	  function Model(configUrl, that, callBack, isLoad) {
	    _classCallCheck(this, Model);

	    this.CreateScene = that;
	    this.userMouseArray = [];
	    this.isMouseSpeaking = false;
	    this.mouseSpeed = 5;
	    this.mouseSpeedMark = -1;
	    this.audio = null;
	    this.baseUrl = this.getBaseUrl(configUrl);
	    this.loadUrl = configUrl;
	    this.isHasOwnSound = false;
	    this.ownSoundUrl = '';
	    this.live2DMgr = that.live2DMgr;
	    this.gl = that.gl;
	    this.model = null;
	    this.getLoad(configUrl, isLoad, callBack);
	  }

	  _createClass(Model, [{
	    key: 'getLoad',
	    value: function getLoad(configUrl, isLoad, callBack) {
	      if (isLoad === true) {
	        this.loadModel(configUrl, callBack);
	      } else {
	        this.addModel(configUrl, callBack);
	      }
	    }
	  }, {
	    key: 'getBaseUrl',
	    value: function getBaseUrl(configUrl) {
	      var arr = configUrl.split('/');
	      arr.pop();
	      return arr.join('/');
	    }
	  }, {
	    key: 'loadModel',
	    value: function loadModel(configUrl, callBack) {
	      this.live2DMgr.reloadFlg = true;
	      this.live2DMgr.count++;
	      this.model = this.live2DMgr.loadModel(this.gl, configUrl, this, callBack);
	    }
	  }, {
	    key: 'addModel',
	    value: function addModel(configUrl, callBack) {
	      this.live2DMgr.reloadFlg = true;
	      this.live2DMgr.count++;
	      this.model = this.live2DMgr.addModel(this.gl, configUrl, this, callBack);
	    }
	    /**
	     * @param {str}---soundUrl 对应声音文件位置
	     */

	  }, {
	    key: 'startMotion',
	    value: function startMotion() {
	      var _this7 = this;

	      var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref15$name = _ref15.name,
	          name = _ref15$name === undefined ? 'idle' : _ref15$name,
	          _ref15$id = _ref15.id,
	          id = _ref15$id === undefined ? 0 : _ref15$id,
	          _ref15$soundUrl = _ref15.soundUrl,
	          soundUrl = _ref15$soundUrl === undefined ? false : _ref15$soundUrl,
	          _ref15$newMotion = _ref15.newMotion,
	          newMotion = _ref15$newMotion === undefined ? false : _ref15$newMotion;

	      if (soundUrl !== false) {
	        this.isHasOwnSound = true;
	        this.ownSoundUrl = soundUrl;
	      }

	      return new _Promise(function (resolve, reject) {
	        _this7.model.startMotion(name, id, undefined, resolve, newMotion);
	      });
	    }
	  }, {
	    key: 'stopMotion',
	    value: function stopMotion(callBack) {
	      this.model.userStopMotion(callBack);
	    }
	  }, {
	    key: 'stopNewMotion',
	    value: function stopNewMotion() {
	      var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref16$id = _ref16.id,
	          id = _ref16$id === undefined ? 0 : _ref16$id;

	      this.model.userStopNewMotion(id);
	    }
	  }, {
	    key: 'startExpress',
	    value: function startExpress() {
	      var _this8 = this;

	      var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref17$name = _ref17.name,
	          name = _ref17$name === undefined ? 'expressName' : _ref17$name;

	      // this.model.setExpression(name, callBack)
	      return new _Promise(function (resolve, reject) {
	        _this8.model.setExpression(name, resolve);
	      });
	    }
	  }, {
	    key: 'stopExpress',
	    value: function stopExpress(callBack) {
	      this.model.userStopExress(callBack);
	    }
	    /**
	     * @method startPose
	     * @param {obj} options -- {pose:''}
	     * @param {func} callBack
	     */

	  }, {
	    key: 'startPose',
	    value: function startPose() {
	      var _this9 = this;

	      var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref18$pose = _ref18.pose,
	          pose = _ref18$pose === undefined ? '' : _ref18$pose;

	      var url = this.baseUrl + '/' + pose;
	      return new _Promise(function (resolve, reject) {
	        _this9.model.userStartPoseOption(url, resolve);
	      });
	    }
	  }, {
	    key: 'scaleMoving',
	    value: function scaleMoving(type, resolve) {
	      var _this10 = this;

	      this.isScale = true;
	      var scaleId = void 0;
	      var num = type === true ? 1.05 : 0.95;
	      scaleId = setInterval(function () {
	        _this10.CreateScene.modelScaling(num);
	        if (_this10.CreateScene.isUserMaxScale || _this10.CreateScene.isUserMinScale) {
	          _this10.CreateScene.isUserMaxScale = false;
	          _this10.CreateScene.isUserMinScale = false;
	          _this10.isScale = false;
	          clearInterval(scaleId);
	          resolve(_this10);
	        }
	      }, 20);
	    }
	  }, {
	    key: 'scale',
	    value: function scale() {
	      var _this11 = this;

	      var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref19$scale = _ref19.scale,
	          _scale = _ref19$scale === undefined ? 1 : _ref19$scale;

	      return new _Promise(function (resolve, reject) {
	        if (_this11.isScale) {
	          resolve({ text: '正在scale' });
	          return;
	        }

	        var viewMatrix = _this11.CreateScene.viewMatrix;

	        if (Math.abs(viewMatrix.getCurrentScale() - _scale) <= 0.001) {
	          resolve({ text: '值相等' });
	          return;
	        }
	        if (viewMatrix.getCurrentScale() < _scale) {
	          viewMatrix.setMaxScale(_scale);
	          _this11.scaleMoving(true, resolve);
	        } else {
	          viewMatrix.setMinScale(_scale);
	          _this11.scaleMoving(false, resolve);
	        }
	      });
	    }
	  }, {
	    key: 'move',
	    value: function move() {}
	  }, {
	    key: 'replacePart',
	    value: function replacePart() {
	      var _this12 = this;

	      var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref20$picArr = _ref20.picArr,
	          picArr = _ref20$picArr === undefined ? [] : _ref20$picArr,
	          _ref20$load = _ref20.load,
	          load = _ref20$load === undefined ? false : _ref20$load;

	      return new _Promise(function (resolve, reject) {
	        if (load === true) {
	          _this12.json.textures = picArr;
	          _this12.CreateScene.live2DMgr.userPlacePart(_this12, _this12.CreateScene.gl, _this12, _this12.loadUrl, resolve);
	        } else {
	          _this12.json.textures = picArr;
	          _this12.model.userGetChangeClothes(_this12.CreateScene.gl, resolve, _this12);
	        }
	      });
	    }
	    /**
	     * @param {obj} {}
	     */

	  }, {
	    key: 'soundEndCallBack',
	    value: function soundEndCallBack() {
	      if (!this.audio) {
	        return;
	      }
	      this.audio.pause();
	      this.audio.removeEventListener('ended', this.soundEndCallBack);
	      this.audio = null;
	      this.userMouseArray = [];
	      this.isMouseSpeaking = false;
	      if (this.isStopSpeakText === true && this.TextStayTime !== true) {
	        this.isStopSpeakText = false;
	        this.CreateScene.disAppearText();
	      }
	      if (isFunction_1(this.speakMouseResolve)) {
	        this.speakMouseResolve(this);
	        this.speakMouseResolve = null;
	      }
	    }
	  }, {
	    key: 'startSound',
	    value: function startSound() {
	      this.isHasOwnSound = false;
	      this.audio = document.createElement('audio');
	      this.audio.src = this.baseUrl + '/' + this.ownSoundUrl;
	      this.audio.play();
	      this.audio.addEventListener('ended', this.soundEndCallBack.bind(this));
	    }
	  }, {
	    key: 'animations',
	    value: function animations() {
	      var _this13 = this;

	      var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref21$soundUrl = _ref21.soundUrl,
	          soundUrl = _ref21$soundUrl === undefined ? false : _ref21$soundUrl,
	          _ref21$pose = _ref21.pose,
	          _ref21$scale = _ref21.scale,
	          _ref21$startExpress = _ref21.startExpress,
	          _ref21$startMotion = _ref21.startMotion;

	      var obj = {};
	      var arr = [];
	      _Object$entries(arguments[0]).forEach(function (_ref22) {
	        var _ref23 = _slicedToArray(_ref22, 2),
	            key = _ref23[0],
	            value = _ref23[1];

	        if (value !== false) {
	          obj[key] = value;
	        }
	      });
	      if (obj.hasOwnProperty('soundUrl') && obj.hasOwnProperty('startMotion')) {
	        this.isHasOwnSound = true;
	        this.ownSoundUrl = soundUrl;
	      }
	      _Object$entries(obj).forEach(function (_ref24) {
	        var _ref25 = _slicedToArray(_ref24, 2),
	            key = _ref25[0],
	            value = _ref25[1];

	        switch (key) {
	          case 'scale':
	            arr.push(_this13.scale({ scale: value }));
	            break;
	          case 'startExpress':
	            arr.push(_this13.startExpress({ name: value }));
	            break;
	          case 'startMotion':
	            arr.push(_this13.startMotion(value));
	            break;
	          case 'pose':
	            arr.push(_this13.startPose({ pose: value }));
	            break;
	        }
	      });
	      return _Promise.all(arr);
	    }
	  }, {
	    key: 'replaceRandomMotion',
	    value: function replaceRandomMotion() {
	      var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref26$name = _ref26.name,
	          name = _ref26$name === undefined ? '' : _ref26$name;

	      this.model.userChangeRandoMotion(name);
	    }
	    /**
	     * @param {obj} {soundUrl:''}
	     */

	  }, {
	    key: 'mouseSpeak',
	    value: function mouseSpeak() {
	      var _this14 = this;

	      var _ref27 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref27$soundUrl = _ref27.soundUrl,
	          soundUrl = _ref27$soundUrl === undefined ? false : _ref27$soundUrl,
	          _ref27$mouseSpeed = _ref27.mouseSpeed,
	          mouseSpeed = _ref27$mouseSpeed === undefined ? 5 : _ref27$mouseSpeed,
	          _ref27$text = _ref27.text,
	          text = _ref27$text === undefined ? false : _ref27$text,
	          _ref27$animation = _ref27.animation,
	          animation = _ref27$animation === undefined ? false : _ref27$animation,
	          _ref27$textStayTime = _ref27.textStayTime,
	          textStayTime = _ref27$textStayTime === undefined ? false : _ref27$textStayTime;

	      var arg = arguments[0];
	      return new _Promise(function (resolve, reject) {
	        if (arg.startMotion) {
	          reject(new Error('不可传动作'));
	          return;
	        }
	        if (soundUrl === false) {
	          reject(new Error('需要传入soundUrl'));
	          return;
	        }
	        if (_this14.isMouseSpeaking) {
	          reject(new Error('  正在mouseSpeaking，可停止'));
	          return;
	        }
	        if (_this14.CreateScene.vm && text !== false) {
	          _this14.isStopSpeakText = true;
	          _this14.TextStayTime = textStayTime;
	          _this14.CreateScene.changeText({ text: text, animation: animation });
	        }
	        _this14.isMouseSpeaking = true;
	        _this14.mouseSpeed = mouseSpeed;
	        _this14.mouseSpeedMark = -1;
	        var str = '0,0,0,0,0,0,0,0,1,0,0.03,0.05,0.2,0.35,0.42,0.49,0.38,0.27,0.42,0.56,0.584,0.604,0.51,0.41,0.23,0.05,0.35,0.64,0.5,0.36,0.365,0.369,0.373,0.376,0.51,0.64,0.54,0.44,0.34,0.24,0.34,0.44,0.425,0.412,0.398,0.384,0.44,0.49,0.37,0.25,0.12,0,0,0,0,0,0,0,0,0,0,0,0';
	        var result = [];
	        _Array$from({ length: 50 }, function () {
	          result = result.concat([].concat(_toConsumableArray(str.split(','))));
	        });
	        _this14.ownSoundUrl = soundUrl;
	        _this14.speakMouseResolve = resolve;
	        _this14.startSound();
	        _this14.animations(arg);
	        _this14.userMouseArray = result;
	      });
	    }
	  }, {
	    key: 'mouseSpeakMotion',
	    value: function mouseSpeakMotion() {
	      var _this15 = this;

	      var _ref28 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref28$soundUrl = _ref28.soundUrl,
	          soundUrl = _ref28$soundUrl === undefined ? false : _ref28$soundUrl,
	          _ref28$motion = _ref28.motion,
	          motion = _ref28$motion === undefined ? { name: 'idle', id: 0, soundUrl: false, newMotion: true } : _ref28$motion,
	          _ref28$mouseSpeed = _ref28.mouseSpeed,
	          _ref28$text = _ref28.text,
	          text = _ref28$text === undefined ? false : _ref28$text,
	          _ref28$animation = _ref28.animation,
	          animation = _ref28$animation === undefined ? false : _ref28$animation,
	          _ref28$textStayTime = _ref28.textStayTime,
	          textStayTime = _ref28$textStayTime === undefined ? false : _ref28$textStayTime;

	      var arg = arguments[0];
	      return new _Promise(function (resolve, reject) {
	        if (!arg.motion) {
	          reject(new Error('必须传口型动作'));
	          return;
	        }
	        if (soundUrl === false) {
	          reject(new Error('需要传入soundUrl'));
	          return;
	        }
	        if (_this15.isMouseSpeaking) {
	          reject(new Error('  正在mouseSpeaking，可停止'));
	          return;
	        }
	        if (_this15.CreateScene.vm && text !== false) {
	          _this15.isStopSpeakText = true;
	          _this15.TextStayTime = textStayTime;
	          _this15.CreateScene.changeText({ text: text, animation: animation });
	        }
	        _this15.ownSoundUrl = soundUrl;
	        _this15.speakMouseResolve = resolve;
	        _this15.startMotion(motion);
	        _this15.startSound();
	      });
	    }
	  }, {
	    key: 'stopSpeak',
	    value: function stopSpeak() {
	      this.stopNewMotion({ id: 0 });
	      this.soundEndCallBack();
	    }
	  }]);

	  return Model;
	}();

	var VmApi = {
	  domInnerText: function domInnerText(text) {
	    if (this.divText.innerText) {
	      this.divText.innerText = text;
	    } else {
	      this.divText.textContent = text;
	    }
	  },
	  changeText: function changeText() {
	    var _this16 = this;

	    var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref29$text = _ref29.text,
	        text = _ref29$text === undefined ? 'hahha' : _ref29$text,
	        _ref29$style = _ref29.style,
	        style = _ref29$style === undefined ? {} : _ref29$style,
	        _ref29$animation = _ref29.animation,
	        animation = _ref29$animation === undefined ? false : _ref29$animation;

	    return new _Promise(function (resolve, reject) {
	      if (animation === true) {
	        _this16.disAppearText({ animation: animation }).then(function () {
	          if (_Object$keys(style).length) {
	            _this16.changeTextStyle(style).then(function () {
	              _this16.appearText({ animation: animation, text: text }).then(function () {
	                resolve(_this16);
	              });
	            });
	          } else {
	            _this16.appearText({ animation: animation, text: text }).then(function () {
	              resolve(_this16);
	            });
	          }
	        });
	        return;
	      }
	      if (_Object$keys(style).length) {
	        _this16.changeTextStyle(style);
	      }

	      _this16.domInnerText(text);
	      _this16.divText.style.opacity = 1;
	      _this16.divText.style.display = 'block';
	      resolve(_this16);
	    });
	  },
	  changeTextStyle: function changeTextStyle() {
	    var _arguments2 = arguments,
	        _this17 = this;

	    var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref30$color = _ref30.color,
	        _ref30$fontSize = _ref30.fontSize,
	        _ref30$opacity = _ref30.opacity,
	        _ref30$background = _ref30.background,
	        _ref30$backgroundColo = _ref30.backgroundColor;

	    return new _Promise(function (resolve, reject) {
	      var objStyle = {};
	      _Object$entries(_arguments2[0]).forEach(function (_ref31) {
	        var _ref32 = _slicedToArray(_ref31, 2),
	            property = _ref32[0],
	            val = _ref32[1];

	        if (val !== false) {
	          objStyle[property] = val;
	        }
	      });
	      if (!_Object$keys(objStyle).length) {
	        reject(new Error('传入一个值'));
	        return;
	      }
	      _Object$entries(objStyle).forEach(function (_ref33) {
	        var _ref34 = _slicedToArray(_ref33, 2),
	            property = _ref34[0],
	            val = _ref34[1];

	        _this17.divText.style[property] = val;
	      });
	      resolve(_this17);
	    });
	  },
	  appearText: function appearText() {
	    var _this18 = this;

	    var _ref35 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref35$time = _ref35.time,
	        time = _ref35$time === undefined ? '500ms' : _ref35$time,
	        _ref35$animation = _ref35.animation,
	        animation = _ref35$animation === undefined ? false : _ref35$animation,
	        _ref35$text = _ref35.text,
	        text = _ref35$text === undefined ? false : _ref35$text;

	    return new _Promise(function (resolve, reject) {
	      if (_this18.getDivTextStatus('block')) {
	        resolve(_this18);
	        return;
	      }
	      if (text !== false) {
	        _this18.domInnerText(text);
	      }
	      if (animation === true) {
	        _this18.divText.style.transition = 'all ' + time;
	        _this18.divText.style.display = 'block';
	        _this18.getChongHui('opacity', _this18.divText);
	        _this18.divText.style.opacity = 1;
	        var fn = function fn(e) {
	          e.stopPropagation();
	          _this18.divText.removeEventListener('transitionend', fn);
	          _this18.divText.style.transition = 'none';
	          resolve(_this18);
	        };
	        _this18.divText.addEventListener('transitionend', fn);
	      } else {
	        _this18.divText.style.opacity = 1;
	        _this18.divText.style.display = 'block';
	        resolve(_this18);
	      }
	    });
	  },
	  getDivTextStatus: function getDivTextStatus(display) {
	    if (this.divText.style.display === display) {
	      return true;
	    }
	  },
	  disAppearText: function disAppearText() {
	    var _this19 = this;

	    var _ref36 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref36$time = _ref36.time,
	        time = _ref36$time === undefined ? '500ms' : _ref36$time,
	        _ref36$animation = _ref36.animation,
	        animation = _ref36$animation === undefined ? false : _ref36$animation;

	    return new _Promise(function (resolve, reject) {
	      if (_this19.getDivTextStatus('none')) {
	        resolve(_this19);
	        return;
	      }
	      if (animation === true) {
	        _this19.divText.style.transition = 'all ' + time;
	        _this19.divText.style.opacity = 0;
	        var fn = function fn(e) {
	          e.stopPropagation();
	          _this19.divText.style.display = 'none';
	          _this19.divText.removeEventListener('transitionend', fn);
	          _this19.divText.style.transition = 'none';
	          resolve(_this19);
	        };
	        _this19.divText.addEventListener('transitionend', fn);
	      } else {
	        _this19.divText.style.opacity = 0;
	        _this19.divText.style.display = 'none';
	        resolve(_this19);
	      }
	    });
	  }
	};

	var FindLive2D = function () {
	  function FindLive2D() {
	    _classCallCheck(this, FindLive2D);
	  }

	  _createClass(FindLive2D, null, [{
	    key: 'install',
	    value: function install(Vue, options) {
	      _Object$assign(FindLive2D.CreateScene.prototype, VmApi);
	      Vue.mixin({
	        mounted: function mounted() {
	          if (this.$root === this) {
	            if (!this.$children[0]) {
	              return;
	            }
	            var vm = this.$children[0].$children[0];

	            this.$root.$Live2d = new FindLive2D.CreateScene(_extends$1({ vm: vm, isVue: true }, DOMID));
	          }
	        }
	      });
	      Object.defineProperty(Vue.prototype, '$FindLive2d', {
	        get: function get() {
	          return this.$root.$Live2d;
	        }
	      });
	      Vue.component(LiveComponent.name, LiveComponent.component);
	    }
	  }]);

	  return FindLive2D;
	}();

	FindLive2D.CreateScene = CreateScene;

	return FindLive2D;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("DuR2"), __webpack_require__("FcFp")))

/***/ }),

/***/ "2KxR":
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "3Eo+":
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "3fs2":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("RY/4");
var ITERATOR = __webpack_require__("dSzd")('iterator');
var Iterators = __webpack_require__("/bQp");
module.exports = __webpack_require__("FeBl").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "4mcu":
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),

/***/ "52gC":
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "5QVw":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("BwfY"), __esModule: true };

/***/ }),

/***/ "77Pl":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("EqjI");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "7KvD":
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "7UMu":
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__("R9M2");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "7t+N":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "82Mu":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7KvD");
var macrotask = __webpack_require__("L42u").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__("R9M2")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "880/":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("hJx8");


/***/ }),

/***/ "8hRR":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("B0bq"), __esModule: true };

/***/ }),

/***/ "94VQ":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__("Yobk");
var descriptor = __webpack_require__("X8DO");
var setToStringTag = __webpack_require__("e6n0");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__("hJx8")(IteratorPrototype, __webpack_require__("dSzd")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "9bBU":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("mClu");
var $Object = __webpack_require__("FeBl").Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),

/***/ "B0bq":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("fWfb");
module.exports = __webpack_require__("FeBl").Object.getOwnPropertySymbols;


/***/ }),

/***/ "BwfY":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("fWfb");
__webpack_require__("M6a0");
__webpack_require__("OYls");
__webpack_require__("QWe/");
module.exports = __webpack_require__("FeBl").Symbol;


/***/ }),

/***/ "C4MV":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("9bBU"), __esModule: true };

/***/ }),

/***/ "CJli":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("pRCB");
var $Object = __webpack_require__("FeBl").Object;
module.exports = function defineProperties(T, D) {
  return $Object.defineProperties(T, D);
};


/***/ }),

/***/ "CXw9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__("O4g8");
var global = __webpack_require__("7KvD");
var ctx = __webpack_require__("+ZMJ");
var classof = __webpack_require__("RY/4");
var $export = __webpack_require__("kM2E");
var isObject = __webpack_require__("EqjI");
var aFunction = __webpack_require__("lOnJ");
var anInstance = __webpack_require__("2KxR");
var forOf = __webpack_require__("NWt+");
var speciesConstructor = __webpack_require__("t8x9");
var task = __webpack_require__("L42u").set;
var microtask = __webpack_require__("82Mu")();
var newPromiseCapabilityModule = __webpack_require__("qARP");
var perform = __webpack_require__("dNDb");
var promiseResolve = __webpack_require__("fJUb");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__("dSzd")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__("xH/j")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__("e6n0")($Promise, PROMISE);
__webpack_require__("bRrM")(PROMISE);
Wrapper = __webpack_require__("FeBl")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__("dY0y")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "Cdx3":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__("sB3e");
var $keys = __webpack_require__("lktj");

__webpack_require__("uqUo")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "D2L2":
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "DuR2":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "EGZi":
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "EqBC":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__("kM2E");
var core = __webpack_require__("FeBl");
var global = __webpack_require__("7KvD");
var speciesConstructor = __webpack_require__("t8x9");
var promiseResolve = __webpack_require__("fJUb");

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),

/***/ "EqjI":
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "FZ+f":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "FcFp":
/***/ (function(module, exports) {

// Provide a "System" global.
module.exports = {
	// Make sure import is only used as "System.import"
	import: function() {
		throw new Error("System.import cannot be used indirectly");
	}
};


/***/ }),

/***/ "FeBl":
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "HSQo":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("CJli"), __esModule: true };

/***/ }),

/***/ "Ibhu":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("D2L2");
var toIObject = __webpack_require__("TcQ7");
var arrayIndexOf = __webpack_require__("vFc/")(false);
var IE_PROTO = __webpack_require__("ax3d")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "Kh4W":
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__("dSzd");


/***/ }),

/***/ "Kh5d":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__("sB3e");
var $getPrototypeOf = __webpack_require__("PzxK");

__webpack_require__("uqUo")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),

/***/ "L42u":
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__("+ZMJ");
var invoke = __webpack_require__("knuC");
var html = __webpack_require__("RPLV");
var cel = __webpack_require__("ON07");
var global = __webpack_require__("7KvD");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__("R9M2")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "LKZe":
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__("NpIQ");
var createDesc = __webpack_require__("X8DO");
var toIObject = __webpack_require__("TcQ7");
var toPrimitive = __webpack_require__("MmMw");
var has = __webpack_require__("D2L2");
var IE8_DOM_DEFINE = __webpack_require__("SfB7");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__("+E39") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "M6a0":
/***/ (function(module, exports) {



/***/ }),

/***/ "MU5D":
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__("R9M2");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "Mhyx":
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__("/bQp");
var ITERATOR = __webpack_require__("dSzd")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "MmMw":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__("EqjI");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "NWt+":
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__("+ZMJ");
var call = __webpack_require__("msXi");
var isArrayIter = __webpack_require__("Mhyx");
var anObject = __webpack_require__("77Pl");
var toLength = __webpack_require__("QRG4");
var getIterFn = __webpack_require__("3fs2");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "NpIQ":
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "O4R0":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("+MLA");
module.exports = __webpack_require__("FeBl").Object.freeze;


/***/ }),

/***/ "O4g8":
/***/ (function(module, exports) {

module.exports = true;


/***/ }),

/***/ "ON07":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("EqjI");
var document = __webpack_require__("7KvD").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "OYls":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("crlp")('asyncIterator');


/***/ }),

/***/ "OvRC":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("oM7Q"), __esModule: true };

/***/ }),

/***/ "PzxK":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__("D2L2");
var toObject = __webpack_require__("sB3e");
var IE_PROTO = __webpack_require__("ax3d")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "QRG4":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__("UuGF");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "QWe/":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("crlp")('observable');


/***/ }),

/***/ "R4wc":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__("kM2E");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__("To3L") });


/***/ }),

/***/ "R9M2":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "RPLV":
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__("7KvD").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "RY/4":
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__("R9M2");
var TAG = __webpack_require__("dSzd")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "Rrel":
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__("TcQ7");
var gOPN = __webpack_require__("n0T6").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "S82l":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "SfB7":
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__("+E39") && !__webpack_require__("S82l")(function () {
  return Object.defineProperty(__webpack_require__("ON07")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "TcQ7":
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__("MU5D");
var defined = __webpack_require__("52gC");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "To3L":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__("lktj");
var gOPS = __webpack_require__("1kS7");
var pIE = __webpack_require__("NpIQ");
var toObject = __webpack_require__("sB3e");
var IObject = __webpack_require__("MU5D");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__("S82l")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),

/***/ "U5ju":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("M6a0");
__webpack_require__("zQR9");
__webpack_require__("+tPU");
__webpack_require__("CXw9");
__webpack_require__("EqBC");
__webpack_require__("jKW+");
module.exports = __webpack_require__("FeBl").Promise;


/***/ }),

/***/ "UuGF":
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "V3tA":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("R4wc");
module.exports = __webpack_require__("FeBl").Object.assign;


/***/ }),

/***/ "W2nU":
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "X8DO":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "Xc4G":
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__("lktj");
var gOPS = __webpack_require__("1kS7");
var pIE = __webpack_require__("NpIQ");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "XyMi":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = normalizeComponent;
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  scriptExports = scriptExports || {}

  // ES6 modules interop
  var type = typeof scriptExports.default
  if (type === 'object' || type === 'function') {
    scriptExports = scriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "Yobk":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__("77Pl");
var dPs = __webpack_require__("qio6");
var enumBugKeys = __webpack_require__("xnc9");
var IE_PROTO = __webpack_require__("ax3d")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__("ON07")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__("RPLV").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "Zx67":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("fS6E"), __esModule: true };

/***/ }),

/***/ "Zzip":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("/n6Q"), __esModule: true };

/***/ }),

/***/ "ax3d":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("e8AB")('keys');
var uid = __webpack_require__("3Eo+");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "bRrM":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("7KvD");
var core = __webpack_require__("FeBl");
var dP = __webpack_require__("evD5");
var DESCRIPTORS = __webpack_require__("+E39");
var SPECIES = __webpack_require__("dSzd")('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "crlp":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7KvD");
var core = __webpack_require__("FeBl");
var LIBRARY = __webpack_require__("O4g8");
var wksExt = __webpack_require__("Kh4W");
var defineProperty = __webpack_require__("evD5").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "dNDb":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "dSzd":
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__("e8AB")('wks');
var uid = __webpack_require__("3Eo+");
var Symbol = __webpack_require__("7KvD").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "dY0y":
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__("dSzd")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "e6n0":
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__("evD5").f;
var has = __webpack_require__("D2L2");
var TAG = __webpack_require__("dSzd")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "e8AB":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7KvD");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),

/***/ "evD5":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("77Pl");
var IE8_DOM_DEFINE = __webpack_require__("SfB7");
var toPrimitive = __webpack_require__("MmMw");
var dP = Object.defineProperty;

exports.f = __webpack_require__("+E39") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "f1Eh":
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if(!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true,
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "fJUb":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("77Pl");
var isObject = __webpack_require__("EqjI");
var newPromiseCapability = __webpack_require__("qARP");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "fS6E":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("Kh5d");
module.exports = __webpack_require__("FeBl").Object.getPrototypeOf;


/***/ }),

/***/ "fWfb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__("7KvD");
var has = __webpack_require__("D2L2");
var DESCRIPTORS = __webpack_require__("+E39");
var $export = __webpack_require__("kM2E");
var redefine = __webpack_require__("880/");
var META = __webpack_require__("06OY").KEY;
var $fails = __webpack_require__("S82l");
var shared = __webpack_require__("e8AB");
var setToStringTag = __webpack_require__("e6n0");
var uid = __webpack_require__("3Eo+");
var wks = __webpack_require__("dSzd");
var wksExt = __webpack_require__("Kh4W");
var wksDefine = __webpack_require__("crlp");
var enumKeys = __webpack_require__("Xc4G");
var isArray = __webpack_require__("7UMu");
var anObject = __webpack_require__("77Pl");
var isObject = __webpack_require__("EqjI");
var toIObject = __webpack_require__("TcQ7");
var toPrimitive = __webpack_require__("MmMw");
var createDesc = __webpack_require__("X8DO");
var _create = __webpack_require__("Yobk");
var gOPNExt = __webpack_require__("Rrel");
var $GOPD = __webpack_require__("LKZe");
var $DP = __webpack_require__("evD5");
var $keys = __webpack_require__("lktj");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__("n0T6").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__("NpIQ").f = $propertyIsEnumerable;
  __webpack_require__("1kS7").f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__("O4g8")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__("hJx8")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "fZjL":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("jFbC"), __esModule: true };

/***/ }),

/***/ "fkB2":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("UuGF");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "h65t":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("UuGF");
var defined = __webpack_require__("52gC");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "hJx8":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("evD5");
var createDesc = __webpack_require__("X8DO");
module.exports = __webpack_require__("+E39") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "jFbC":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("Cdx3");
module.exports = __webpack_require__("FeBl").Object.keys;


/***/ }),

/***/ "jKW+":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__("kM2E");
var newPromiseCapability = __webpack_require__("qARP");
var perform = __webpack_require__("dNDb");

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),

/***/ "kM2E":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7KvD");
var core = __webpack_require__("FeBl");
var ctx = __webpack_require__("+ZMJ");
var hide = __webpack_require__("hJx8");
var has = __webpack_require__("D2L2");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "knuC":
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "lOnJ":
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "lktj":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__("Ibhu");
var enumBugKeys = __webpack_require__("xnc9");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "mClu":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("kM2E");
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__("+E39"), 'Object', { defineProperty: __webpack_require__("evD5").f });


/***/ }),

/***/ "msXi":
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__("77Pl");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "mypn":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("DuR2"), __webpack_require__("W2nU")))

/***/ }),

/***/ "n0T6":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__("Ibhu");
var hiddenKeys = __webpack_require__("xnc9").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "nErl":
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),

/***/ "oM7Q":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("sF+V");
var $Object = __webpack_require__("FeBl").Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),

/***/ "pFYg":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__("Zzip");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__("5QVw");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),

/***/ "pRCB":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("kM2E");
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__("+E39"), 'Object', { defineProperties: __webpack_require__("qio6") });


/***/ }),

/***/ "qARP":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__("lOnJ");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "qio6":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("evD5");
var anObject = __webpack_require__("77Pl");
var getKeys = __webpack_require__("lktj");

module.exports = __webpack_require__("+E39") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "rjj0":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["default"] = addStylesClient;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__listToStyles__ = __webpack_require__("tTVk");
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
  Modified by Evan You @yyx990803
*/



var hasDocument = typeof document !== 'undefined'

if (typeof DEBUG !== 'undefined' && DEBUG) {
  if (!hasDocument) {
    throw new Error(
    'vue-style-loader cannot be used in a non-browser environment. ' +
    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
  ) }
}

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

var stylesInDom = {/*
  [id: number]: {
    id: number,
    refs: number,
    parts: Array<(obj?: StyleObjectPart) => void>
  }
*/}

var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
var singletonElement = null
var singletonCounter = 0
var isProduction = false
var noop = function () {}
var options = null
var ssrIdKey = 'data-vue-ssr-id'

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

function addStylesClient (parentId, list, _isProduction, _options) {
  isProduction = _isProduction

  options = _options || {}

  var styles = Object(__WEBPACK_IMPORTED_MODULE_0__listToStyles__["a" /* default */])(parentId, list)
  addStylesToDom(styles)

  return function update (newList) {
    var mayRemove = []
    for (var i = 0; i < styles.length; i++) {
      var item = styles[i]
      var domStyle = stylesInDom[item.id]
      domStyle.refs--
      mayRemove.push(domStyle)
    }
    if (newList) {
      styles = Object(__WEBPACK_IMPORTED_MODULE_0__listToStyles__["a" /* default */])(parentId, newList)
      addStylesToDom(styles)
    } else {
      styles = []
    }
    for (var i = 0; i < mayRemove.length; i++) {
      var domStyle = mayRemove[i]
      if (domStyle.refs === 0) {
        for (var j = 0; j < domStyle.parts.length; j++) {
          domStyle.parts[j]()
        }
        delete stylesInDom[domStyle.id]
      }
    }
  }
}

function addStylesToDom (styles /* Array<StyleObject> */) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var domStyle = stylesInDom[item.id]
    if (domStyle) {
      domStyle.refs++
      for (var j = 0; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j])
      }
      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j]))
      }
      if (domStyle.parts.length > item.parts.length) {
        domStyle.parts.length = item.parts.length
      }
    } else {
      var parts = []
      for (var j = 0; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j]))
      }
      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
    }
  }
}

function createStyleElement () {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  head.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */) {
  var update, remove
  var styleElement = document.querySelector('style[' + ssrIdKey + '~="' + obj.id + '"]')

  if (styleElement) {
    if (isProduction) {
      // has SSR styles and in production mode.
      // simply do nothing.
      return noop
    } else {
      // has SSR styles but in dev mode.
      // for some reason Chrome can't handle source map in server-rendered
      // style tags - source maps in <style> only works if the style tag is
      // created and inserted dynamically. So we remove the server rendered
      // styles and inject new ones.
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  if (isOldIE) {
    // use singleton mode for IE9.
    var styleIndex = singletonCounter++
    styleElement = singletonElement || (singletonElement = createStyleElement())
    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
  } else {
    // use multi-style-tag mode in all other cases
    styleElement = createStyleElement()
    update = applyToTag.bind(null, styleElement)
    remove = function () {
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  update(obj)

  return function updateStyle (newObj /* StyleObjectPart */) {
    if (newObj) {
      if (newObj.css === obj.css &&
          newObj.media === obj.media &&
          newObj.sourceMap === obj.sourceMap) {
        return
      }
      update(obj = newObj)
    } else {
      remove()
    }
  }
}

var replaceText = (function () {
  var textStore = []

  return function (index, replacement) {
    textStore[index] = replacement
    return textStore.filter(Boolean).join('\n')
  }
})()

function applyToSingletonTag (styleElement, index, remove, obj) {
  var css = remove ? '' : obj.css

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = replaceText(index, css)
  } else {
    var cssNode = document.createTextNode(css)
    var childNodes = styleElement.childNodes
    if (childNodes[index]) styleElement.removeChild(childNodes[index])
    if (childNodes.length) {
      styleElement.insertBefore(cssNode, childNodes[index])
    } else {
      styleElement.appendChild(cssNode)
    }
  }
}

function applyToTag (styleElement, obj) {
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }
  if (options.ssrId) {
    styleElement.setAttribute(ssrIdKey, obj.id)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),

/***/ "sB3e":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__("52gC");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "sF+V":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("kM2E");
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__("Yobk") });


/***/ }),

/***/ "t8x9":
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__("77Pl");
var aFunction = __webpack_require__("lOnJ");
var SPECIES = __webpack_require__("dSzd")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "tTVk":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = listToStyles;
/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
function listToStyles (parentId, list) {
  var styles = []
  var newStyles = {}
  for (var i = 0; i < list.length; i++) {
    var item = list[i]
    var id = item[0]
    var css = item[1]
    var media = item[2]
    var sourceMap = item[3]
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    }
    if (!newStyles[id]) {
      styles.push(newStyles[id] = { id: id, parts: [part] })
    } else {
      newStyles[id].parts.push(part)
    }
  }
  return styles
}


/***/ }),

/***/ "u2KI":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("O4R0"), __esModule: true };

/***/ }),

/***/ "uqUo":
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__("kM2E");
var core = __webpack_require__("FeBl");
var fails = __webpack_require__("S82l");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "vFc/":
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__("TcQ7");
var toLength = __webpack_require__("QRG4");
var toAbsoluteIndex = __webpack_require__("fkB2");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "vIB/":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__("O4g8");
var $export = __webpack_require__("kM2E");
var redefine = __webpack_require__("880/");
var hide = __webpack_require__("hJx8");
var Iterators = __webpack_require__("/bQp");
var $iterCreate = __webpack_require__("94VQ");
var setToStringTag = __webpack_require__("e6n0");
var getPrototypeOf = __webpack_require__("PzxK");
var ITERATOR = __webpack_require__("dSzd")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "woOf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__("V3tA"), __esModule: true };

/***/ }),

/***/ "xGkn":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__("4mcu");
var step = __webpack_require__("EGZi");
var Iterators = __webpack_require__("/bQp");
var toIObject = __webpack_require__("TcQ7");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__("vIB/")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "xH/j":
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__("hJx8");
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),

/***/ "xnc9":
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "zQR9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__("h65t")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__("vIB/")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ })

});